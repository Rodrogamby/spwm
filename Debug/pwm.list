
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b48  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08006d9c  08006d9c  00007d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007028  08007028  00009020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007028  08007028  00008028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007030  08007030  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007030  08007030  00008030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007034  08007034  00008034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08007038  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000020  08007058  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08007058  0000918c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001476a  00000000  00000000  00009056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002213  00000000  00000000  0001d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc9  00000000  00000000  00020a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b82c  00000000  00000000  000216f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013661  00000000  00000000  0004cf1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a325  00000000  00000000  0006057e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a8a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000464c  00000000  00000000  0017a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0017ef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	20000020 	.word	0x20000020
 8000270:	00000000 	.word	0x00000000
 8000274:	08006d84 	.word	0x08006d84

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000024 	.word	0x20000024
 8000290:	08006d84 	.word	0x08006d84

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a8:	f000 b9b0 	b.w	800060c <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ca:	4688      	mov	r8, r1
 80002cc:	4604      	mov	r4, r0
 80002ce:	468e      	mov	lr, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14a      	bne.n	800036a <__udivmoddi4+0xa6>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4617      	mov	r7, r2
 80002d8:	d95f      	bls.n	800039a <__udivmoddi4+0xd6>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	b14e      	cbz	r6, 80002f4 <__udivmoddi4+0x30>
 80002e0:	f1c6 0320 	rsb	r3, r6, #32
 80002e4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	40b4      	lsls	r4, r6
 80002ec:	fa20 f303 	lsr.w	r3, r0, r3
 80002f0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f8:	fa1f fc87 	uxth.w	ip, r7
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fbbe f1f8 	udiv	r1, lr, r8
 8000302:	fb08 ee11 	mls	lr, r8, r1, lr
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x5e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x5c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 8154 	bhi.w	80005c8 <__udivmoddi4+0x304>
 8000320:	4601      	mov	r1, r0
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	b2a2      	uxth	r2, r4
 8000326:	fbb3 f0f8 	udiv	r0, r3, r8
 800032a:	fb08 3310 	mls	r3, r8, r0, r3
 800032e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000332:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000336:	4594      	cmp	ip, r2
 8000338:	d90b      	bls.n	8000352 <__udivmoddi4+0x8e>
 800033a:	18ba      	adds	r2, r7, r2
 800033c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000340:	bf2c      	ite	cs
 8000342:	2401      	movcs	r4, #1
 8000344:	2400      	movcc	r4, #0
 8000346:	4594      	cmp	ip, r2
 8000348:	d902      	bls.n	8000350 <__udivmoddi4+0x8c>
 800034a:	2c00      	cmp	r4, #0
 800034c:	f000 813f 	beq.w	80005ce <__udivmoddi4+0x30a>
 8000350:	4618      	mov	r0, r3
 8000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000356:	eba2 020c 	sub.w	r2, r2, ip
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa2>
 800035e:	40f2      	lsrs	r2, r6
 8000360:	2300      	movs	r3, #0
 8000362:	e9c5 2300 	strd	r2, r3, [r5]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xb6>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb0>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa2>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d14e      	bne.n	8000420 <__udivmoddi4+0x15c>
 8000382:	4543      	cmp	r3, r8
 8000384:	f0c0 8112 	bcc.w	80005ac <__udivmoddi4+0x2e8>
 8000388:	4282      	cmp	r2, r0
 800038a:	f240 810f 	bls.w	80005ac <__udivmoddi4+0x2e8>
 800038e:	4608      	mov	r0, r1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e8      	beq.n	8000366 <__udivmoddi4+0xa2>
 8000394:	e9c5 4e00 	strd	r4, lr, [r5]
 8000398:	e7e5      	b.n	8000366 <__udivmoddi4+0xa2>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f000 80ac 	beq.w	80004f8 <__udivmoddi4+0x234>
 80003a0:	fab2 f682 	clz	r6, r2
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	f040 80bb 	bne.w	8000520 <__udivmoddi4+0x25c>
 80003aa:	1a8b      	subs	r3, r1, r2
 80003ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b0:	b2bc      	uxth	r4, r7
 80003b2:	2101      	movs	r1, #1
 80003b4:	0c02      	lsrs	r2, r0, #16
 80003b6:	b280      	uxth	r0, r0
 80003b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003c4:	fb04 f20c 	mul.w	r2, r4, ip
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d90e      	bls.n	80003ea <__udivmoddi4+0x126>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d2:	bf2c      	ite	cs
 80003d4:	f04f 0901 	movcs.w	r9, #1
 80003d8:	f04f 0900 	movcc.w	r9, #0
 80003dc:	429a      	cmp	r2, r3
 80003de:	d903      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003e0:	f1b9 0f00 	cmp.w	r9, #0
 80003e4:	f000 80ec 	beq.w	80005c0 <__udivmoddi4+0x2fc>
 80003e8:	46c4      	mov	ip, r8
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003f4:	fb04 f408 	mul.w	r4, r4, r8
 80003f8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003fc:	4294      	cmp	r4, r2
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x154>
 8000400:	18ba      	adds	r2, r7, r2
 8000402:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000406:	bf2c      	ite	cs
 8000408:	2001      	movcs	r0, #1
 800040a:	2000      	movcc	r0, #0
 800040c:	4294      	cmp	r4, r2
 800040e:	d902      	bls.n	8000416 <__udivmoddi4+0x152>
 8000410:	2800      	cmp	r0, #0
 8000412:	f000 80d1 	beq.w	80005b8 <__udivmoddi4+0x2f4>
 8000416:	4698      	mov	r8, r3
 8000418:	1b12      	subs	r2, r2, r4
 800041a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800041e:	e79d      	b.n	800035c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa08 f401 	lsl.w	r4, r8, r1
 800042a:	fa00 f901 	lsl.w	r9, r0, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa28 f806 	lsr.w	r8, r8, r6
 8000436:	408a      	lsls	r2, r1
 8000438:	431f      	orrs	r7, r3
 800043a:	fa20 f306 	lsr.w	r3, r0, r6
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	4323      	orrs	r3, r4
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fbb8 fef0 	udiv	lr, r8, r0
 800044c:	fb00 881e 	mls	r8, r0, lr, r8
 8000450:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000454:	fb0e f80c 	mul.w	r8, lr, ip
 8000458:	45a0      	cmp	r8, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b6>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a0      	cmp	r8, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b4>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 80b8 	beq.w	80005e8 <__udivmoddi4+0x324>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fa1f f883 	uxth.w	r8, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d90e      	bls.n	80004b4 <__udivmoddi4+0x1f0>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800049c:	bf2c      	ite	cs
 800049e:	f04f 0801 	movcs.w	r8, #1
 80004a2:	f04f 0800 	movcc.w	r8, #0
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d903      	bls.n	80004b2 <__udivmoddi4+0x1ee>
 80004aa:	f1b8 0f00 	cmp.w	r8, #0
 80004ae:	f000 809f 	beq.w	80005f0 <__udivmoddi4+0x32c>
 80004b2:	4603      	mov	r3, r0
 80004b4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b8:	eba4 040c 	sub.w	r4, r4, ip
 80004bc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c0:	4564      	cmp	r4, ip
 80004c2:	4673      	mov	r3, lr
 80004c4:	46e0      	mov	r8, ip
 80004c6:	d302      	bcc.n	80004ce <__udivmoddi4+0x20a>
 80004c8:	d107      	bne.n	80004da <__udivmoddi4+0x216>
 80004ca:	45f1      	cmp	r9, lr
 80004cc:	d205      	bcs.n	80004da <__udivmoddi4+0x216>
 80004ce:	ebbe 0302 	subs.w	r3, lr, r2
 80004d2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	46e0      	mov	r8, ip
 80004da:	b15d      	cbz	r5, 80004f4 <__udivmoddi4+0x230>
 80004dc:	ebb9 0203 	subs.w	r2, r9, r3
 80004e0:	eb64 0408 	sbc.w	r4, r4, r8
 80004e4:	fa04 f606 	lsl.w	r6, r4, r6
 80004e8:	fa22 f301 	lsr.w	r3, r2, r1
 80004ec:	40cc      	lsrs	r4, r1
 80004ee:	431e      	orrs	r6, r3
 80004f0:	e9c5 6400 	strd	r6, r4, [r5]
 80004f4:	2100      	movs	r1, #0
 80004f6:	e736      	b.n	8000366 <__udivmoddi4+0xa2>
 80004f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	4614      	mov	r4, r2
 8000500:	b280      	uxth	r0, r0
 8000502:	4696      	mov	lr, r2
 8000504:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000508:	2620      	movs	r6, #32
 800050a:	4690      	mov	r8, r2
 800050c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000510:	4610      	mov	r0, r2
 8000512:	fbb1 f1f2 	udiv	r1, r1, r2
 8000516:	eba3 0308 	sub.w	r3, r3, r8
 800051a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051e:	e74b      	b.n	80003b8 <__udivmoddi4+0xf4>
 8000520:	40b7      	lsls	r7, r6
 8000522:	f1c6 0320 	rsb	r3, r6, #32
 8000526:	fa01 f206 	lsl.w	r2, r1, r6
 800052a:	fa21 f803 	lsr.w	r8, r1, r3
 800052e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000532:	fa20 f303 	lsr.w	r3, r0, r3
 8000536:	b2bc      	uxth	r4, r7
 8000538:	40b0      	lsls	r0, r6
 800053a:	4313      	orrs	r3, r2
 800053c:	0c02      	lsrs	r2, r0, #16
 800053e:	0c19      	lsrs	r1, r3, #16
 8000540:	b280      	uxth	r0, r0
 8000542:	fbb8 f9fe 	udiv	r9, r8, lr
 8000546:	fb0e 8819 	mls	r8, lr, r9, r8
 800054a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	4588      	cmp	r8, r1
 8000554:	d951      	bls.n	80005fa <__udivmoddi4+0x336>
 8000556:	1879      	adds	r1, r7, r1
 8000558:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 800055c:	bf2c      	ite	cs
 800055e:	f04f 0a01 	movcs.w	sl, #1
 8000562:	f04f 0a00 	movcc.w	sl, #0
 8000566:	4588      	cmp	r8, r1
 8000568:	d902      	bls.n	8000570 <__udivmoddi4+0x2ac>
 800056a:	f1ba 0f00 	cmp.w	sl, #0
 800056e:	d031      	beq.n	80005d4 <__udivmoddi4+0x310>
 8000570:	eba1 0108 	sub.w	r1, r1, r8
 8000574:	fbb1 f9fe 	udiv	r9, r1, lr
 8000578:	fb09 f804 	mul.w	r8, r9, r4
 800057c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000580:	b29b      	uxth	r3, r3
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	4543      	cmp	r3, r8
 8000588:	d235      	bcs.n	80005f6 <__udivmoddi4+0x332>
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000590:	bf2c      	ite	cs
 8000592:	f04f 0a01 	movcs.w	sl, #1
 8000596:	f04f 0a00 	movcc.w	sl, #0
 800059a:	4543      	cmp	r3, r8
 800059c:	d2bb      	bcs.n	8000516 <__udivmoddi4+0x252>
 800059e:	f1ba 0f00 	cmp.w	sl, #0
 80005a2:	d1b8      	bne.n	8000516 <__udivmoddi4+0x252>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e7b4      	b.n	8000516 <__udivmoddi4+0x252>
 80005ac:	1a84      	subs	r4, r0, r2
 80005ae:	eb68 0203 	sbc.w	r2, r8, r3
 80005b2:	2001      	movs	r0, #1
 80005b4:	4696      	mov	lr, r2
 80005b6:	e6eb      	b.n	8000390 <__udivmoddi4+0xcc>
 80005b8:	443a      	add	r2, r7
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	e72b      	b.n	8000418 <__udivmoddi4+0x154>
 80005c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c4:	443b      	add	r3, r7
 80005c6:	e710      	b.n	80003ea <__udivmoddi4+0x126>
 80005c8:	3902      	subs	r1, #2
 80005ca:	443b      	add	r3, r7
 80005cc:	e6a9      	b.n	8000322 <__udivmoddi4+0x5e>
 80005ce:	443a      	add	r2, r7
 80005d0:	3802      	subs	r0, #2
 80005d2:	e6be      	b.n	8000352 <__udivmoddi4+0x8e>
 80005d4:	eba7 0808 	sub.w	r8, r7, r8
 80005d8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005dc:	4441      	add	r1, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c9      	b.n	800057c <__udivmoddi4+0x2b8>
 80005e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e744      	b.n	800047a <__udivmoddi4+0x1b6>
 80005f0:	3b02      	subs	r3, #2
 80005f2:	443c      	add	r4, r7
 80005f4:	e75e      	b.n	80004b4 <__udivmoddi4+0x1f0>
 80005f6:	4649      	mov	r1, r9
 80005f8:	e78d      	b.n	8000516 <__udivmoddi4+0x252>
 80005fa:	eba1 0108 	sub.w	r1, r1, r8
 80005fe:	46cc      	mov	ip, r9
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7b8      	b.n	800057c <__udivmoddi4+0x2b8>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fdc0 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f852 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f9b6 	bl	800098c <MX_GPIO_Init>
  MX_TIM6_Init();
 8000620:	f000 f97e 	bl	8000920 <MX_TIM6_Init>
  MX_TIM1_Init();
 8000624:	f000 f8ac 	bl	8000780 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000628:	4822      	ldr	r0, [pc, #136]	@ (80006b4 <main+0xa4>)
 800062a:	f004 f981 	bl	8004930 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fc12 	bl	8000e58 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000634:	2101      	movs	r1, #1
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fc52 	bl	8000ee0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <main+0xa8>)
 800063e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000642:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <main+0xa8>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <main+0xa8>)
 800064c:	2200      	movs	r2, #0
 800064e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <main+0xa8>)
 8000652:	2200      	movs	r2, #0
 8000654:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <main+0xa8>)
 8000658:	2200      	movs	r2, #0
 800065a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800065c:	4916      	ldr	r1, [pc, #88]	@ (80006b8 <main+0xa8>)
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fcd8 	bl	8001014 <BSP_COM_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <main+0x5e>
  {
    Error_Handler();
 800066a:	f000 fa3b 	bl	8000ae4 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*
   * Timer 6 interval should be steps / 2*output_frequency
   */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800066e:	2100      	movs	r1, #0
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <main+0xac>)
 8000672:	f004 fa6d 	bl	8004b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000676:	2104      	movs	r1, #4
 8000678:	4810      	ldr	r0, [pc, #64]	@ (80006bc <main+0xac>)
 800067a:	f004 fa69 	bl	8004b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800067e:	2108      	movs	r1, #8
 8000680:	480e      	ldr	r0, [pc, #56]	@ (80006bc <main+0xac>)
 8000682:	f004 fa65 	bl	8004b50 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000686:	2100      	movs	r1, #0
 8000688:	480c      	ldr	r0, [pc, #48]	@ (80006bc <main+0xac>)
 800068a:	f005 fc31 	bl	8005ef0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800068e:	2104      	movs	r1, #4
 8000690:	480a      	ldr	r0, [pc, #40]	@ (80006bc <main+0xac>)
 8000692:	f005 fc2d 	bl	8005ef0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000696:	2108      	movs	r1, #8
 8000698:	4808      	ldr	r0, [pc, #32]	@ (80006bc <main+0xac>)
 800069a:	f005 fc29 	bl	8005ef0 <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <main+0xa4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	68da      	ldr	r2, [r3, #12]
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <main+0xa4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f042 0201 	orr.w	r2, r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
  while (1)
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <main+0x9e>
 80006b2:	bf00      	nop
 80006b4:	20000098 	.word	0x20000098
 80006b8:	2000003c 	.word	0x2000003c
 80006bc:	2000004c 	.word	0x2000004c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09c      	sub	sp, #112	@ 0x70
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2250      	movs	r2, #80	@ 0x50
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fb2b 	bl	8006d2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e6:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <SystemClock_Config+0xb8>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	4a23      	ldr	r2, [pc, #140]	@ (8000778 <SystemClock_Config+0xb8>)
 80006ec:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006f0:	6113      	str	r3, [r2, #16]
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <SystemClock_Config+0xb8>)
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006fe:	bf00      	nop
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <SystemClock_Config+0xb8>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	2b08      	cmp	r3, #8
 800070a:	d1f9      	bne.n	8000700 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000714:	2308      	movs	r3, #8
 8000716:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2340      	movs	r3, #64	@ 0x40
 800071a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f99d 	bl	8001a64 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000730:	f000 f9d8 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	231f      	movs	r3, #31
 8000736:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2101      	movs	r1, #1
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fdbe 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800075e:	f000 f9c1 	bl	8000ae4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <SystemClock_Config+0xbc>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a05      	ldr	r2, [pc, #20]	@ (800077c <SystemClock_Config+0xbc>)
 8000768:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800076c:	6013      	str	r3, [r2, #0]
}
 800076e:	bf00      	nop
 8000770:	3770      	adds	r7, #112	@ 0x70
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	44020800 	.word	0x44020800
 800077c:	40022000 	.word	0x40022000

08000780 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	@ 0x70
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2234      	movs	r2, #52	@ 0x34
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f006 fab5 	bl	8006d2a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c0:	4b55      	ldr	r3, [pc, #340]	@ (8000918 <MX_TIM1_Init+0x198>)
 80007c2:	4a56      	ldr	r2, [pc, #344]	@ (800091c <MX_TIM1_Init+0x19c>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 80007c6:	4b54      	ldr	r3, [pc, #336]	@ (8000918 <MX_TIM1_Init+0x198>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80007cc:	4b52      	ldr	r3, [pc, #328]	@ (8000918 <MX_TIM1_Init+0x198>)
 80007ce:	2260      	movs	r2, #96	@ 0x60
 80007d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600;
 80007d2:	4b51      	ldr	r3, [pc, #324]	@ (8000918 <MX_TIM1_Init+0x198>)
 80007d4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80007d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b4f      	ldr	r3, [pc, #316]	@ (8000918 <MX_TIM1_Init+0x198>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000918 <MX_TIM1_Init+0x198>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000918 <MX_TIM1_Init+0x198>)
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ec:	484a      	ldr	r0, [pc, #296]	@ (8000918 <MX_TIM1_Init+0x198>)
 80007ee:	f004 f847 	bl	8004880 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f974 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000800:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000806:	4619      	mov	r1, r3
 8000808:	4843      	ldr	r0, [pc, #268]	@ (8000918 <MX_TIM1_Init+0x198>)
 800080a:	f004 fd49 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000814:	f000 f966 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000818:	483f      	ldr	r0, [pc, #252]	@ (8000918 <MX_TIM1_Init+0x198>)
 800081a:	f004 f937 	bl	8004a8c <HAL_TIM_PWM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000824:	f000 f95e 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000834:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000838:	4619      	mov	r1, r3
 800083a:	4837      	ldr	r0, [pc, #220]	@ (8000918 <MX_TIM1_Init+0x198>)
 800083c:	f005 fc50 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000846:	f000 f94d 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084a:	2360      	movs	r3, #96	@ 0x60
 800084c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000856:	2300      	movs	r3, #0
 8000858:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000866:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	482a      	ldr	r0, [pc, #168]	@ (8000918 <MX_TIM1_Init+0x198>)
 8000870:	f004 fc02 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800087a:	f000 f933 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800087e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000882:	2204      	movs	r2, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4824      	ldr	r0, [pc, #144]	@ (8000918 <MX_TIM1_Init+0x198>)
 8000888:	f004 fbf6 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000892:	f000 f927 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000896:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800089a:	2208      	movs	r2, #8
 800089c:	4619      	mov	r1, r3
 800089e:	481e      	ldr	r0, [pc, #120]	@ (8000918 <MX_TIM1_Init+0x198>)
 80008a0:	f004 fbea 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008aa:	f000 f91b 	bl	8000ae4 <Error_Handler>
  }
  HAL_TIMEx_ConfigAsymmetricalDeadTime(&htim1, 75);
 80008ae:	214b      	movs	r1, #75	@ 0x4b
 80008b0:	4819      	ldr	r0, [pc, #100]	@ (8000918 <MX_TIM1_Init+0x198>)
 80008b2:	f005 fd7f 	bl	80063b4 <HAL_TIMEx_ConfigAsymmetricalDeadTime>
  HAL_TIMEx_EnableAsymmetricalDeadTime(&htim1);
 80008b6:	4818      	ldr	r0, [pc, #96]	@ (8000918 <MX_TIM1_Init+0x198>)
 80008b8:	f005 fd92 	bl	80063e0 <HAL_TIMEx_EnableAsymmetricalDeadTime>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 75;
 80008c8:	234b      	movs	r3, #75	@ 0x4b
 80008ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <MX_TIM1_Init+0x198>)
 80008fa:	f005 fcc1 	bl	8006280 <HAL_TIMEx_ConfigBreakDeadTime>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000904:	f000 f8ee 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <MX_TIM1_Init+0x198>)
 800090a:	f000 f963 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 800090e:	bf00      	nop
 8000910:	3770      	adds	r7, #112	@ 0x70
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000004c 	.word	0x2000004c
 800091c:	40012c00 	.word	0x40012c00

08000920 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_TIM6_Init+0x64>)
 8000932:	4a15      	ldr	r2, [pc, #84]	@ (8000988 <MX_TIM6_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <MX_TIM6_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_TIM6_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9143;
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <MX_TIM6_Init+0x64>)
 8000944:	f242 32b7 	movw	r2, #9143	@ 0x23b7
 8000948:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_TIM6_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_TIM6_Init+0x64>)
 8000952:	f003 ff95 	bl	8004880 <HAL_TIM_Base_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800095c:	f000 f8c2 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_TIM6_Init+0x64>)
 800096e:	f005 fbb7 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000978:	f000 f8b4 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000098 	.word	0x20000098
 8000988:	40001000 	.word	0x40001000

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a8:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b2:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e4:	4a14      	ldr	r2, [pc, #80]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009fc:	2310      	movs	r3, #16
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480b      	ldr	r0, [pc, #44]	@ (8000a3c <MX_GPIO_Init+0xb0>)
 8000a10:	f000 fe98 	bl	8001744 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a14:	2320      	movs	r3, #32
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // Claim PA5 (user LED)
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_GPIO_Init+0xb4>)
 8000a2c:	f000 fe8a 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	44020c00 	.word	0x44020c00
 8000a3c:	42020800 	.word	0x42020800
 8000a40:	42020000 	.word	0x42020000

08000a44 <toggleUserLed>:

/* USER CODE BEGIN 4 */
void toggleUserLed(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <toggleUserLed+0x10>)
 8000a4c:	f000 fff0 	bl	8001a30 <HAL_GPIO_TogglePin>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	42020000 	.word	0x42020000

08000a58 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    if(htim == &htim6)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a1a      	ldr	r2, [pc, #104]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d12d      	bne.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x6c>
    {
    	toggleUserLed(); // just for debug, check on PA5
 8000a68:	f7ff ffec 	bl	8000a44 <toggleUserLed>
        lookup_index++;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a76:	801a      	strh	r2, [r3, #0]
        if(lookup_index >= lookup_size)
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2264      	movs	r2, #100	@ 0x64
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d302      	bcc.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x30>
        {
            lookup_index = 0;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	801a      	strh	r2, [r3, #0]
        }

        uint16_t c1 = lookup1[lookup_index];
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a94:	81fb      	strh	r3, [r7, #14]
        uint16_t c2 = lookup2[lookup_index];
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000aa2:	81bb      	strh	r3, [r7, #12]
        uint16_t c3 = lookup3[lookup_index];
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000aac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ab0:	817b      	strh	r3, [r7, #10]

        TIM1->CCR2 = c1;
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ab4:	89fb      	ldrh	r3, [r7, #14]
 8000ab6:	6393      	str	r3, [r2, #56]	@ 0x38
        TIM1->CCR3 = c2;
 8000ab8:	4a09      	ldr	r2, [pc, #36]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000aba:	89bb      	ldrh	r3, [r7, #12]
 8000abc:	63d3      	str	r3, [r2, #60]	@ 0x3c
        TIM1->CCR1 = c3; // channel 1 is third output phase
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ac0:	897b      	ldrh	r3, [r7, #10]
 8000ac2:	6353      	str	r3, [r2, #52]	@ 0x34
    }
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000098 	.word	0x20000098
 8000ad0:	200000e4 	.word	0x200000e4
 8000ad4:	08006d9c 	.word	0x08006d9c
 8000ad8:	08006e64 	.word	0x08006e64
 8000adc:	08006f2c 	.word	0x08006f2c
 8000ae0:	40012c00 	.word	0x40012c00

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a29      	ldr	r2, [pc, #164]	@ (8000bc4 <HAL_TIM_Base_MspInit+0xc4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12f      	bne.n	8000b82 <HAL_TIM_Base_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b22:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b28:	4a27      	ldr	r2, [pc, #156]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b2a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b2e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b32:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b46:	4a20      	ldr	r2, [pc, #128]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b50:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4814      	ldr	r0, [pc, #80]	@ (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b7c:	f000 fde2 	bl	8001744 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b80:	e01b      	b.n	8000bba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM6)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d116      	bne.n	8000bba <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b92:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2031      	movs	r0, #49	@ 0x31
 8000bb0:	f000 fc68 	bl	8001484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000bb4:	2031      	movs	r0, #49	@ 0x31
 8000bb6:	f000 fc7f 	bl	80014b8 <HAL_NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	44020c00 	.word	0x44020c00
 8000bcc:	42020000 	.word	0x42020000
 8000bd0:	40001000 	.word	0x40001000

08000bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a22      	ldr	r2, [pc, #136]	@ (8000c7c <HAL_TIM_MspPostInit+0xa8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d13e      	bne.n	8000c74 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <HAL_TIM_MspPostInit+0xac>)
 8000bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bfc:	4a20      	ldr	r2, [pc, #128]	@ (8000c80 <HAL_TIM_MspPostInit+0xac>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <HAL_TIM_MspPostInit+0xac>)
 8000c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <HAL_TIM_MspPostInit+0xac>)
 8000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c1a:	4a19      	ldr	r2, [pc, #100]	@ (8000c80 <HAL_TIM_MspPostInit+0xac>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <HAL_TIM_MspPostInit+0xac>)
 8000c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c32:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <HAL_TIM_MspPostInit+0xb0>)
 8000c50:	f000 fd78 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c54:	2303      	movs	r3, #3
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <HAL_TIM_MspPostInit+0xb4>)
 8000c70:	f000 fd68 	bl	8001744 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	@ 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40012c00 	.word	0x40012c00
 8000c80:	44020c00 	.word	0x44020c00
 8000c84:	42020000 	.word	0x42020000
 8000c88:	42020400 	.word	0x42020400

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 faf7 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f96e 	bl	8000fd0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <TIM6_IRQHandler+0x10>)
 8000cfe:	f004 f86b 	bl	8004dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000098 	.word	0x20000098

08000d0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d12:	4b35      	ldr	r3, [pc, #212]	@ (8000de8 <SystemInit+0xdc>)
 8000d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d18:	4a33      	ldr	r2, [pc, #204]	@ (8000de8 <SystemInit+0xdc>)
 8000d1a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d1e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d22:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <SystemInit+0xe0>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <SystemInit+0xe0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <SystemInit+0xe0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d34:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <SystemInit+0xe0>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	492c      	ldr	r1, [pc, #176]	@ (8000dec <SystemInit+0xe0>)
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <SystemInit+0xe4>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <SystemInit+0xe0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000d46:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <SystemInit+0xe0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <SystemInit+0xe0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d52:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <SystemInit+0xe0>)
 8000d54:	4a27      	ldr	r2, [pc, #156]	@ (8000df4 <SystemInit+0xe8>)
 8000d56:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <SystemInit+0xe0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <SystemInit+0xe0>)
 8000d60:	4a24      	ldr	r2, [pc, #144]	@ (8000df4 <SystemInit+0xe8>)
 8000d62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <SystemInit+0xe0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <SystemInit+0xe0>)
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <SystemInit+0xe8>)
 8000d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <SystemInit+0xe0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <SystemInit+0xe0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dec <SystemInit+0xe0>)
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <SystemInit+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d88:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <SystemInit+0xdc>)
 8000d8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d8e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d90:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <SystemInit+0xec>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d98:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000da0:	d003      	beq.n	8000daa <SystemInit+0x9e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000da8:	d117      	bne.n	8000dda <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <SystemInit+0xec>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <SystemInit+0xec>)
 8000db8:	4a10      	ldr	r2, [pc, #64]	@ (8000dfc <SystemInit+0xf0>)
 8000dba:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <SystemInit+0xec>)
 8000dbe:	4a10      	ldr	r2, [pc, #64]	@ (8000e00 <SystemInit+0xf4>)
 8000dc0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <SystemInit+0xec>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000df8 <SystemInit+0xec>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <SystemInit+0xec>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a09      	ldr	r2, [pc, #36]	@ (8000df8 <SystemInit+0xec>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	61d3      	str	r3, [r2, #28]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00
 8000dec:	44020c00 	.word	0x44020c00
 8000df0:	eae2eae3 	.word	0xeae2eae3
 8000df4:	01010280 	.word	0x01010280
 8000df8:	40022000 	.word	0x40022000
 8000dfc:	08192a3b 	.word	0x08192a3b
 8000e00:	4c5d6e7f 	.word	0x4c5d6e7f

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e04:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e08:	f7ff ff80 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	@ (8000e50 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e32:	f005 ff83 	bl	8006d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e36:	f7ff fbeb 	bl	8000610 <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   r0, =_estack
 8000e3c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000e48:	08007038 	.word	0x08007038
  ldr r2, =_sbss
 8000e4c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000e50:	2000018c 	.word	0x2000018c

08000e54 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_IRQHandler>
	...

08000e58 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e6c:	f06f 0301 	mvn.w	r3, #1
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e72:	e02c      	b.n	8000ece <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10e      	bne.n	8000e98 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <BSP_LED_Init+0x80>)
 8000e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e80:	4a15      	ldr	r2, [pc, #84]	@ (8000ed8 <BSP_LED_Init+0x80>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <BSP_LED_Init+0x80>)
 8000e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e98:	2320      	movs	r3, #32
 8000e9a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <BSP_LED_Init+0x84>)
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	f107 0210 	add.w	r2, r7, #16
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fc44 	bl	8001744 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4a07      	ldr	r2, [pc, #28]	@ (8000edc <BSP_LED_Init+0x84>)
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fd99 	bl	8001a00 <HAL_GPIO_WritePin>
  }

  return ret;
 8000ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	44020c00 	.word	0x44020c00
 8000edc:	20000008 	.word	0x20000008

08000ee0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <BSP_PB_Init+0xd4>)
 8000ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb4 <BSP_PB_Init+0xd4>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f00:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <BSP_PB_Init+0xd4>)
 8000f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000f0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f12:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000f14:	2302      	movs	r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4a23      	ldr	r2, [pc, #140]	@ (8000fb8 <BSP_PB_Init+0xd8>)
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fc05 	bl	8001744 <HAL_GPIO_Init>
 8000f3a:	e036      	b.n	8000faa <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <BSP_PB_Init+0xdc>)
 8000f3e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb8 <BSP_PB_Init+0xd8>)
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	f107 020c 	add.w	r2, r7, #12
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fbf8 	bl	8001744 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4a18      	ldr	r2, [pc, #96]	@ (8000fc0 <BSP_PB_Init+0xe0>)
 8000f60:	441a      	add	r2, r3
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	4917      	ldr	r1, [pc, #92]	@ (8000fc4 <BSP_PB_Init+0xe4>)
 8000f66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	f000 fb8d 	bl	800168c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <BSP_PB_Init+0xe0>)
 8000f7e:	1898      	adds	r0, r3, r2
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4a11      	ldr	r2, [pc, #68]	@ (8000fc8 <BSP_PB_Init+0xe8>)
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f000 fb52 	bl	8001634 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f90:	2018      	movs	r0, #24
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <BSP_PB_Init+0xec>)
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f000 fa71 	bl	8001484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000fa2:	2318      	movs	r3, #24
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fa87 	bl	80014b8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	44020c00 	.word	0x44020c00
 8000fb8:	2000000c 	.word	0x2000000c
 8000fbc:	10110000 	.word	0x10110000
 8000fc0:	200000e8 	.word	0x200000e8
 8000fc4:	0800700c 	.word	0x0800700c
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	20000014 	.word	0x20000014

08000fd0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <BSP_PB_IRQHandler+0x28>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fb63 	bl	80016b4 <HAL_EXTI_IRQHandler>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000e8 	.word	0x200000e8

08000ffc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800102a:	f06f 0301 	mvn.w	r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e018      	b.n	8001064 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2294      	movs	r2, #148	@ 0x94
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <BSP_COM_Init+0x5c>)
 800103c:	4413      	add	r3, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f854 	bl	80010ec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2294      	movs	r2, #148	@ 0x94
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <BSP_COM_Init+0x5c>)
 800104e:	4413      	add	r3, r2
 8001050:	6839      	ldr	r1, [r7, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f80e 	bl	8001074 <MX_USART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800105e:	f06f 0303 	mvn.w	r3, #3
 8001062:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001064:	68fb      	ldr	r3, [r7, #12]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000f4 	.word	0x200000f4

08001074 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_USART_Init+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	220c      	movs	r2, #12
 8001092:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	895b      	ldrh	r3, [r3, #10]
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	891b      	ldrh	r3, [r3, #8]
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	899b      	ldrh	r3, [r3, #12]
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010c0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f005 fa07 	bl	80064dc <HAL_UART_Init>
 80010ce:	4603      	mov	r3, r0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000004 	.word	0x20000004

080010dc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff ff8b 	bl	8000ffc <BSP_PB_Callback>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80010f4:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <COM1_MspInit+0xa4>)
 80010f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010fa:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <COM1_MspInit+0xa4>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <COM1_MspInit+0xa4>)
 8001106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001112:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <COM1_MspInit+0xa4>)
 8001114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001118:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <COM1_MspInit+0xa4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <COM1_MspInit+0xa4>)
 8001124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <COM1_MspInit+0xa4>)
 8001132:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001136:	4a16      	ldr	r2, [pc, #88]	@ (8001190 <COM1_MspInit+0xa4>)
 8001138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <COM1_MspInit+0xa4>)
 8001142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800114e:	2304      	movs	r3, #4
 8001150:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001156:	2302      	movs	r3, #2
 8001158:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800115e:	2307      	movs	r3, #7
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480a      	ldr	r0, [pc, #40]	@ (8001194 <COM1_MspInit+0xa8>)
 800116a:	f000 faeb 	bl	8001744 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 800116e:	2308      	movs	r3, #8
 8001170:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001176:	2307      	movs	r3, #7
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <COM1_MspInit+0xa8>)
 8001182:	f000 fadf 	bl	8001744 <HAL_GPIO_Init>
}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	44020c00 	.word	0x44020c00
 8001194:	42020000 	.word	0x42020000

08001198 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f966 	bl	800146e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80011a2:	f001 fa4f 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <HAL_Init+0x44>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	490b      	ldr	r1, [pc, #44]	@ (80011e0 <HAL_Init+0x48>)
 80011b2:	5ccb      	ldrb	r3, [r1, r3]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_Init+0x4c>)
 80011ba:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011bc:	2004      	movs	r0, #4
 80011be:	f000 f9ab 	bl	8001518 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f810 	bl	80011e8 <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e002      	b.n	80011d8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011d2:	f7ff fc8d 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	44020c00 	.word	0x44020c00
 80011e0:	08006ff4 	.word	0x08006ff4
 80011e4:	20000000 	.word	0x20000000

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011f4:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <HAL_InitTick+0xdc>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e05c      	b.n	80012ba <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <HAL_InitTick+0xe0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b04      	cmp	r3, #4
 800120a:	d10c      	bne.n	8001226 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800120c:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <HAL_InitTick+0xe4>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <HAL_InitTick+0xdc>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e037      	b.n	8001296 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001226:	f000 f9cf 	bl	80015c8 <HAL_SYSTICK_GetCLKSourceConfig>
 800122a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d023      	beq.n	800127a <HAL_InitTick+0x92>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d82d      	bhi.n	8001294 <HAL_InitTick+0xac>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_InitTick+0x5e>
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d00d      	beq.n	8001260 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001244:	e026      	b.n	8001294 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_InitTick+0xe4>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <HAL_InitTick+0xdc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001254:	fbb3 f3f1 	udiv	r3, r3, r1
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	60fb      	str	r3, [r7, #12]
        break;
 800125e:	e01a      	b.n	8001296 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_InitTick+0xdc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	fbb3 f3f2 	udiv	r3, r3, r2
 800126e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	60fb      	str	r3, [r7, #12]
        break;
 8001278:	e00d      	b.n	8001296 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0xdc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001284:	fbb3 f3f2 	udiv	r3, r3, r2
 8001288:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800128c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001290:	60fb      	str	r3, [r7, #12]
        break;
 8001292:	e000      	b.n	8001296 <HAL_InitTick+0xae>
        break;
 8001294:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f91c 	bl	80014d4 <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e009      	b.n	80012ba <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a6:	2200      	movs	r2, #0
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012ae:	f000 f8e9 	bl	8001484 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80012b2:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <HAL_InitTick+0xe8>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000001c 	.word	0x2000001c
 80012c8:	e000e010 	.word	0xe000e010
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000018 	.word	0x20000018

080012d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	2000001c 	.word	0x2000001c
 80012f8:	20000188 	.word	0x20000188

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000188 	.word	0x20000188

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	@ (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff4c 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001492:	f7ff ff63 	bl	800135c <__NVIC_GetPriorityGrouping>
 8001496:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff ffb3 	bl	8001408 <NVIC_EncodePriority>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff82 	bl	80013b4 <__NVIC_SetPriority>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff56 	bl	8001378 <__NVIC_EnableIRQ>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e4:	d301      	bcc.n	80014ea <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00d      	b.n	8001506 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_SYSTICK_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_SYSTICK_Config+0x40>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_SYSTICK_Config+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <HAL_SYSTICK_Config+0x40>)
 80014fe:	f043 0303 	orr.w	r3, r3, #3
 8001502:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b04      	cmp	r3, #4
 8001524:	d844      	bhi.n	80015b0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800154f 	.word	0x0800154f
 8001530:	0800156d 	.word	0x0800156d
 8001534:	0800158f 	.word	0x0800158f
 8001538:	080015b1 	.word	0x080015b1
 800153c:	08001541 	.word	0x08001541
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1e      	ldr	r2, [pc, #120]	@ (80015c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6013      	str	r3, [r2, #0]
      break;
 800154c:	e031      	b.n	80015b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800155a:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800155c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001560:	4a18      	ldr	r2, [pc, #96]	@ (80015c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001562:	f023 030c 	bic.w	r3, r3, #12
 8001566:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800156a:	e022      	b.n	80015b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a13      	ldr	r2, [pc, #76]	@ (80015c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800157a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800157e:	f023 030c 	bic.w	r3, r3, #12
 8001582:	4a10      	ldr	r2, [pc, #64]	@ (80015c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800158c:	e011      	b.n	80015b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a0b      	ldr	r2, [pc, #44]	@ (80015c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800159c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015a0:	f023 030c 	bic.w	r3, r3, #12
 80015a4:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80015ae:	e000      	b.n	80015b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80015b0:	bf00      	nop
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010
 80015c4:	44020c00 	.word	0x44020c00

080015c8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80015da:	2304      	movs	r3, #4
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	e01e      	b.n	800161e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80015e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d00f      	beq.n	8001612 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d80f      	bhi.n	8001618 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b04      	cmp	r3, #4
 8001602:	d003      	beq.n	800160c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001604:	e008      	b.n	8001618 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
        break;
 800160a:	e008      	b.n	800161e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800160c:	2301      	movs	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
        break;
 8001610:	e005      	b.n	800161e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001612:	2302      	movs	r3, #2
 8001614:	607b      	str	r3, [r7, #4]
        break;
 8001616:	e002      	b.n	800161e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
        break;
 800161c:	bf00      	nop
    }
  }
  return systick_source;
 800161e:	687b      	ldr	r3, [r7, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e010 	.word	0xe000e010
 8001630:	44020c00 	.word	0x44020c00

08001634 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	460b      	mov	r3, r1
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d011      	beq.n	8001670 <HAL_EXTI_RegisterCallback+0x3c>
 800164c:	2b02      	cmp	r3, #2
 800164e:	dc13      	bgt.n	8001678 <HAL_EXTI_RegisterCallback+0x44>
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_EXTI_RegisterCallback+0x26>
 8001654:	2b01      	cmp	r3, #1
 8001656:	d007      	beq.n	8001668 <HAL_EXTI_RegisterCallback+0x34>
 8001658:	e00e      	b.n	8001678 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	609a      	str	r2, [r3, #8]
      break;
 8001666:	e00a      	b.n	800167e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
      break;
 800166e:	e006      	b.n	800167e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]
      break;
 8001676:	e002      	b.n	800167e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
      break;
 800167c:	bf00      	nop
  }

  return status;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e003      	b.n	80016a8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80016a6:	2300      	movs	r3, #0
  }
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	2201      	movs	r2, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	015a      	lsls	r2, r3, #5
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <HAL_EXTI_IRQHandler+0x88>)
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <HAL_EXTI_IRQHandler+0x8c>)
 800170c:	4413      	add	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	4798      	blx	r3
    }
  }
}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	4402200c 	.word	0x4402200c
 8001740:	44022010 	.word	0x44022010

08001744 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001752:	e142      	b.n	80019da <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8134 	beq.w	80019d4 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x38>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b12      	cmp	r3, #18
 800177a:	d125      	bne.n	80017c8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4013      	ands	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f003 020f 	and.w	r2, r3, #15
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	6979      	ldr	r1, [r7, #20]
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0xd8>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4013      	ands	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	4313      	orrs	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4013      	ands	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b03      	cmp	r3, #3
 8001888:	d109      	bne.n	800189e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001892:	2b03      	cmp	r3, #3
 8001894:	d11b      	bne.n	80018ce <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4013      	ands	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d07c      	beq.n	80019d4 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80018da:	4a47      	ldr	r2, [pc, #284]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3318      	adds	r3, #24
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4013      	ands	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0a9a      	lsrs	r2, r3, #10
 8001902:	4b3e      	ldr	r3, [pc, #248]	@ (80019fc <HAL_GPIO_Init+0x2b8>)
 8001904:	4013      	ands	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	f002 0203 	and.w	r2, r2, #3
 800190c:	00d2      	lsls	r2, r2, #3
 800190e:	4093      	lsls	r3, r2
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001916:	4938      	ldr	r1, [pc, #224]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3318      	adds	r3, #24
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001924:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001948:	4a2b      	ldr	r2, [pc, #172]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800194e:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	4013      	ands	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001972:	4a21      	ldr	r2, [pc, #132]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001978:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 800197a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800197e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	4013      	ands	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800199e:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 80019a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_GPIO_Init+0x2b4>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3301      	adds	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f47f aeb5 	bne.w	8001754 <HAL_GPIO_Init+0x10>
  }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	44022000 	.word	0x44022000
 80019fc:	002f7f7f 	.word	0x002f7f7f

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43d9      	mvns	r1, r3
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	400b      	ands	r3, r1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f000 bc28 	b.w	80022c8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a78:	4b94      	ldr	r3, [pc, #592]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f003 0318 	and.w	r3, r3, #24
 8001a80:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001a82:	4b92      	ldr	r3, [pc, #584]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d05b      	beq.n	8001b50 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d005      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	2b18      	cmp	r3, #24
 8001aa2:	d114      	bne.n	8001ace <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d111      	bne.n	8001ace <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f000 bc08 	b.w	80022c8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001ab8:	4b84      	ldr	r3, [pc, #528]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	041b      	lsls	r3, r3, #16
 8001ac6:	4981      	ldr	r1, [pc, #516]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001acc:	e040      	b.n	8001b50 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d023      	beq.n	8001b1e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ad6:	4b7d      	ldr	r3, [pc, #500]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7c      	ldr	r2, [pc, #496]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fc0b 	bl	80012fc <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001aea:	f7ff fc07 	bl	80012fc <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e3e5      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001afc:	4b73      	ldr	r3, [pc, #460]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001b08:	4b70      	ldr	r3, [pc, #448]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	496d      	ldr	r1, [pc, #436]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	618b      	str	r3, [r1, #24]
 8001b1c:	e018      	b.n	8001b50 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6a      	ldr	r2, [pc, #424]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fbe7 	bl	80012fc <HAL_GetTick>
 8001b2e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001b32:	f7ff fbe3 	bl	80012fc <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e3c1      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b44:	4b61      	ldr	r3, [pc, #388]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a0 	beq.w	8001c9e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b18      	cmp	r3, #24
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 8092 	bne.w	8001c9e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e3a4      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x132>
 8001b88:	4b50      	ldr	r3, [pc, #320]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e058      	b.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d112      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x160>
 8001b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b48      	ldr	r3, [pc, #288]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a47      	ldr	r2, [pc, #284]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001bb0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b45      	ldr	r3, [pc, #276]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a44      	ldr	r2, [pc, #272]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e041      	b.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bcc:	d112      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x190>
 8001bce:	4b3f      	ldr	r3, [pc, #252]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b3c      	ldr	r3, [pc, #240]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a3b      	ldr	r2, [pc, #236]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001be0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b39      	ldr	r3, [pc, #228]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a38      	ldr	r2, [pc, #224]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e029      	b.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001bfc:	d112      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1c0>
 8001bfe:	4b33      	ldr	r3, [pc, #204]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a32      	ldr	r2, [pc, #200]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b30      	ldr	r3, [pc, #192]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e011      	b.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
 8001c24:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a28      	ldr	r2, [pc, #160]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a25      	ldr	r2, [pc, #148]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a22      	ldr	r2, [pc, #136]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fb54 	bl	80012fc <HAL_GetTick>
 8001c54:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fb50 	bl	80012fc <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	@ 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e32e      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x1f4>
 8001c76:	e012      	b.n	8001c9e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fb40 	bl	80012fc <HAL_GetTick>
 8001c7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fb3c 	bl	80012fc <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e31a      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_RCC_OscConfig+0x268>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 809a 	beq.w	8001de0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x25a>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	2b18      	cmp	r3, #24
 8001cb6:	d149      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d146      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e2fe      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
 8001cca:	bf00      	nop
 8001ccc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001cd6:	4b9a      	ldr	r3, [pc, #616]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0218 	and.w	r2, r3, #24
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d014      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001ce6:	4b96      	ldr	r3, [pc, #600]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0218 	bic.w	r2, r3, #24
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	4993      	ldr	r1, [pc, #588]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001cf8:	f000 fdd0 	bl	800289c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cfc:	4b91      	ldr	r3, [pc, #580]	@ (8001f44 <HAL_RCC_OscConfig+0x4e0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa71 	bl	80011e8 <HAL_InitTick>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e2db      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff faf4 	bl	80012fc <HAL_GetTick>
 8001d14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d18:	f7ff faf0 	bl	80012fc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e2ce      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2a:	4b85      	ldr	r3, [pc, #532]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d36:	4b82      	ldr	r3, [pc, #520]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	041b      	lsls	r3, r3, #16
 8001d44:	497e      	ldr	r1, [pc, #504]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001d4a:	e049      	b.n	8001de0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d02c      	beq.n	8001dae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001d54:	4b7a      	ldr	r3, [pc, #488]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 0218 	bic.w	r2, r3, #24
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	4977      	ldr	r1, [pc, #476]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001d66:	4b76      	ldr	r3, [pc, #472]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a75      	ldr	r2, [pc, #468]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff fac3 	bl	80012fc <HAL_GetTick>
 8001d76:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fabf 	bl	80012fc <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e29d      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d98:	4b69      	ldr	r3, [pc, #420]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4966      	ldr	r1, [pc, #408]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	610b      	str	r3, [r1, #16]
 8001dac:	e018      	b.n	8001de0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b64      	ldr	r3, [pc, #400]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a63      	ldr	r2, [pc, #396]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fa9f 	bl	80012fc <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fa9b 	bl	80012fc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e279      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d03c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01c      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df4:	4b52      	ldr	r3, [pc, #328]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dfa:	4a51      	ldr	r2, [pc, #324]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001dfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff fa7a 	bl	80012fc <HAL_GetTick>
 8001e08:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fa76 	bl	80012fc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e254      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e1e:	4b48      	ldr	r3, [pc, #288]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ef      	beq.n	8001e0c <HAL_RCC_OscConfig+0x3a8>
 8001e2c:	e01b      	b.n	8001e66 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b44      	ldr	r3, [pc, #272]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e34:	4a42      	ldr	r2, [pc, #264]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001e36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fa5d 	bl	80012fc <HAL_GetTick>
 8001e42:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e46:	f7ff fa59 	bl	80012fc <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e237      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e58:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ef      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80d2 	beq.w	8002018 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e74:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <HAL_RCC_OscConfig+0x4e4>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001e80:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_RCC_OscConfig+0x4e4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	4a30      	ldr	r2, [pc, #192]	@ (8001f48 <HAL_RCC_OscConfig+0x4e4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fa36 	bl	80012fc <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7ff fa32 	bl	80012fc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e210      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001ea6:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <HAL_RCC_OscConfig+0x4e4>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x468>
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001eca:	e074      	b.n	8001fb6 <HAL_RCC_OscConfig+0x552>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d118      	bne.n	8001f06 <HAL_RCC_OscConfig+0x4a2>
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eda:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eea:	4a15      	ldr	r2, [pc, #84]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001efa:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f04:	e057      	b.n	8001fb6 <HAL_RCC_OscConfig+0x552>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d11e      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4e8>
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f14:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f2e:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f34:	4a02      	ldr	r2, [pc, #8]	@ (8001f40 <HAL_RCC_OscConfig+0x4dc>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f3e:	e03a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x552>
 8001f40:	44020c00 	.word	0x44020c00
 8001f44:	20000018 	.word	0x20000018
 8001f48:	44020800 	.word	0x44020800
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b85      	cmp	r3, #133	@ 0x85
 8001f52:	d118      	bne.n	8001f86 <HAL_RCC_OscConfig+0x522>
 8001f54:	4ba2      	ldr	r3, [pc, #648]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f5a:	4aa1      	ldr	r2, [pc, #644]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f64:	4b9e      	ldr	r3, [pc, #632]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f6a:	4a9d      	ldr	r2, [pc, #628]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f74:	4b9a      	ldr	r3, [pc, #616]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f7a:	4a99      	ldr	r2, [pc, #612]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f84:	e017      	b.n	8001fb6 <HAL_RCC_OscConfig+0x552>
 8001f86:	4b96      	ldr	r3, [pc, #600]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f8c:	4a94      	ldr	r2, [pc, #592]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f96:	4b92      	ldr	r3, [pc, #584]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9c:	4a90      	ldr	r2, [pc, #576]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fa6:	4b8e      	ldr	r3, [pc, #568]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fac:	4a8c      	ldr	r2, [pc, #560]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f99d 	bl	80012fc <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff f999 	bl	80012fc <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e175      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fdc:	4b80      	ldr	r3, [pc, #512]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8001fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0ed      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x562>
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff f986 	bl	80012fc <HAL_GetTick>
 8001ff0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7ff f982 	bl	80012fc <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e15e      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800200a:	4b75      	ldr	r3, [pc, #468]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 800200c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ed      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d036      	beq.n	8002092 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	2b00      	cmp	r3, #0
 800202a:	d019      	beq.n	8002060 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800202c:	4b6c      	ldr	r3, [pc, #432]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a6b      	ldr	r2, [pc, #428]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002032:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002036:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f960 	bl	80012fc <HAL_GetTick>
 800203c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002040:	f7ff f95c 	bl	80012fc <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e13a      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002052:	4b63      	ldr	r3, [pc, #396]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x5dc>
 800205e:	e018      	b.n	8002092 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002060:	4b5f      	ldr	r3, [pc, #380]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5e      	ldr	r2, [pc, #376]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002066:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800206a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff f946 	bl	80012fc <HAL_GetTick>
 8002070:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002074:	f7ff f942 	bl	80012fc <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e120      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002086:	4b56      	ldr	r3, [pc, #344]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8115 	beq.w	80022c6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b18      	cmp	r3, #24
 80020a0:	f000 80af 	beq.w	8002202 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f040 8086 	bne.w	80021ba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80020ae:	4b4c      	ldr	r3, [pc, #304]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a4b      	ldr	r2, [pc, #300]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 80020b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7ff f91f 	bl	80012fc <HAL_GetTick>
 80020be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80020c2:	f7ff f91b 	bl	80012fc <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0f9      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020d4:	4b42      	ldr	r3, [pc, #264]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80020e0:	4b3f      	ldr	r3, [pc, #252]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020e8:	f023 0303 	bic.w	r3, r3, #3
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020f4:	0212      	lsls	r2, r2, #8
 80020f6:	430a      	orrs	r2, r1
 80020f8:	4939      	ldr	r1, [pc, #228]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002102:	3b01      	subs	r3, #1
 8002104:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210c:	3b01      	subs	r3, #1
 800210e:	025b      	lsls	r3, r3, #9
 8002110:	b29b      	uxth	r3, r3
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002118:	3b01      	subs	r3, #1
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	3b01      	subs	r3, #1
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800212e:	492c      	ldr	r1, [pc, #176]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002134:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	4a29      	ldr	r2, [pc, #164]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 800213a:	f023 0310 	bic.w	r3, r3, #16
 800213e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002144:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800214a:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	4a24      	ldr	r2, [pc, #144]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002156:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f023 020c 	bic.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	491f      	ldr	r1, [pc, #124]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	f023 0220 	bic.w	r2, r3, #32
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002174:	491a      	ldr	r1, [pc, #104]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002176:	4313      	orrs	r3, r2
 8002178:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800217a:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 800217c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217e:	4a18      	ldr	r2, [pc, #96]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002184:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002186:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 800218c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7ff f8b3 	bl	80012fc <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800219a:	f7ff f8af 	bl	80012fc <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e08d      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x736>
 80021b8:	e085      	b.n	80022c6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80021ba:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a08      	ldr	r2, [pc, #32]	@ (80021e0 <HAL_RCC_OscConfig+0x77c>)
 80021c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff f899 	bl	80012fc <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80021ce:	f7ff f895 	bl	80012fc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d903      	bls.n	80021e4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e073      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
 80021e0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021e4:	4b3a      	ldr	r3, [pc, #232]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1ee      	bne.n	80021ce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80021f0:	4b37      	ldr	r3, [pc, #220]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	4a36      	ldr	r2, [pc, #216]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 80021f6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	6293      	str	r3, [r2, #40]	@ 0x28
 8002200:	e061      	b.n	80022c6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002202:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002208:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 800220a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	2b01      	cmp	r3, #1
 8002214:	d031      	beq.n	800227a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d12a      	bne.n	800227a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d122      	bne.n	800227a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d11a      	bne.n	800227a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0a5b      	lsrs	r3, r3, #9
 8002248:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002250:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d111      	bne.n	800227a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002262:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d108      	bne.n	800227a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	0e1b      	lsrs	r3, r3, #24
 800226c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e024      	b.n	80022c8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800227e:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 8002280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002282:	08db      	lsrs	r3, r3, #3
 8002284:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800228c:	429a      	cmp	r2, r3
 800228e:	d01a      	beq.n	80022c6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	4a0e      	ldr	r2, [pc, #56]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 8002296:	f023 0310 	bic.w	r3, r3, #16
 800229a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff f82e 	bl	80012fc <HAL_GetTick>
 80022a0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80022a2:	bf00      	nop
 80022a4:	f7ff f82a 	bl	80012fc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d0f9      	beq.n	80022a4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b4:	4a06      	ldr	r2, [pc, #24]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80022ba:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_RCC_OscConfig+0x86c>)
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	44020c00 	.word	0x44020c00

080022d4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e19e      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b83      	ldr	r3, [pc, #524]	@ (80024f8 <HAL_RCC_ClockConfig+0x224>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b80      	ldr	r3, [pc, #512]	@ (80024f8 <HAL_RCC_ClockConfig+0x224>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 020f 	bic.w	r2, r3, #15
 80022fe:	497e      	ldr	r1, [pc, #504]	@ (80024f8 <HAL_RCC_ClockConfig+0x224>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b7c      	ldr	r3, [pc, #496]	@ (80024f8 <HAL_RCC_ClockConfig+0x224>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e186      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d012      	beq.n	800234a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	4b74      	ldr	r3, [pc, #464]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002332:	429a      	cmp	r2, r3
 8002334:	d909      	bls.n	800234a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002336:	4b71      	ldr	r3, [pc, #452]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	496d      	ldr	r1, [pc, #436]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 8002346:	4313      	orrs	r3, r2
 8002348:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d012      	beq.n	800237c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	4b68      	ldr	r3, [pc, #416]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002364:	429a      	cmp	r2, r3
 8002366:	d909      	bls.n	800237c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002368:	4b64      	ldr	r3, [pc, #400]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	4961      	ldr	r1, [pc, #388]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 8002378:	4313      	orrs	r3, r2
 800237a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	4b5b      	ldr	r3, [pc, #364]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002394:	429a      	cmp	r2, r3
 8002396:	d908      	bls.n	80023aa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002398:	4b58      	ldr	r3, [pc, #352]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4955      	ldr	r1, [pc, #340]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b50      	ldr	r3, [pc, #320]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d908      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80023c6:	4b4d      	ldr	r3, [pc, #308]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	494a      	ldr	r1, [pc, #296]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8093 	beq.w	800250c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023ee:	4b43      	ldr	r3, [pc, #268]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d121      	bne.n	800243e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e113      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002406:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e107      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800241e:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0fb      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242e:	4b33      	ldr	r3, [pc, #204]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0f3      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800243e:	4b2f      	ldr	r3, [pc, #188]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	492c      	ldr	r1, [pc, #176]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 800244c:	4313      	orrs	r3, r2
 800244e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002450:	f7fe ff54 	bl	80012fc <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d112      	bne.n	8002484 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fe ff4c 	bl	80012fc <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0d7      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002476:	4b21      	ldr	r3, [pc, #132]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 0318 	and.w	r3, r3, #24
 800247e:	2b18      	cmp	r3, #24
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_ClockConfig+0x18c>
 8002482:	e043      	b.n	800250c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d112      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7fe ff35 	bl	80012fc <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e0c0      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a4:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f003 0318 	and.w	r3, r3, #24
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_ClockConfig+0x1ba>
 80024b0:	e02c      	b.n	800250c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d122      	bne.n	8002500 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe ff1e 	bl	80012fc <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e0a9      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_RCC_ClockConfig+0x228>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0318 	and.w	r3, r3, #24
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d1ee      	bne.n	80024bc <HAL_RCC_ClockConfig+0x1e8>
 80024de:	e015      	b.n	800250c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe ff0c 	bl	80012fc <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d906      	bls.n	8002500 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e097      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000
 80024fc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002500:	4b4b      	ldr	r3, [pc, #300]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f003 0318 	and.w	r3, r3, #24
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e9      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4b44      	ldr	r3, [pc, #272]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	429a      	cmp	r2, r3
 8002526:	d208      	bcs.n	800253a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002528:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f023 020f 	bic.w	r2, r3, #15
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	493e      	ldr	r1, [pc, #248]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800253a:	4b3e      	ldr	r3, [pc, #248]	@ (8002634 <HAL_RCC_ClockConfig+0x360>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d210      	bcs.n	800256a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002548:	4b3a      	ldr	r3, [pc, #232]	@ (8002634 <HAL_RCC_ClockConfig+0x360>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 020f 	bic.w	r2, r3, #15
 8002550:	4938      	ldr	r1, [pc, #224]	@ (8002634 <HAL_RCC_ClockConfig+0x360>)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002558:	4b36      	ldr	r3, [pc, #216]	@ (8002634 <HAL_RCC_ClockConfig+0x360>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e05d      	b.n	8002626 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002582:	429a      	cmp	r2, r3
 8002584:	d208      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002586:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	4927      	ldr	r1, [pc, #156]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d209      	bcs.n	80025ca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	491a      	ldr	r1, [pc, #104]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d209      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	490e      	ldr	r1, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025fc:	f000 f822 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x35c>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490b      	ldr	r1, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x364>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <HAL_RCC_ClockConfig+0x368>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_RCC_ClockConfig+0x36c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fde4 	bl	80011e8 <HAL_InitTick>
 8002620:	4603      	mov	r3, r0
 8002622:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002624:	7afb      	ldrb	r3, [r7, #11]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	44020c00 	.word	0x44020c00
 8002634:	40022000 	.word	0x40022000
 8002638:	08006ff4 	.word	0x08006ff4
 800263c:	20000000 	.word	0x20000000
 8002640:	20000018 	.word	0x20000018

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800264a:	4b8c      	ldr	r3, [pc, #560]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0318 	and.w	r3, r3, #24
 8002652:	2b08      	cmp	r3, #8
 8002654:	d102      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002656:	4b8a      	ldr	r3, [pc, #552]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e107      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800265c:	4b87      	ldr	r3, [pc, #540]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f003 0318 	and.w	r3, r3, #24
 8002664:	2b00      	cmp	r3, #0
 8002666:	d112      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002668:	4b84      	ldr	r3, [pc, #528]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002674:	4b81      	ldr	r3, [pc, #516]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	4a81      	ldr	r2, [pc, #516]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x240>)
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e0f1      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002688:	4b7e      	ldr	r3, [pc, #504]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x240>)
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	e0ee      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800268e:	4b7b      	ldr	r3, [pc, #492]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 0318 	and.w	r3, r3, #24
 8002696:	2b10      	cmp	r3, #16
 8002698:	d102      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800269a:	4b7b      	ldr	r3, [pc, #492]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x244>)
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e0e5      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a0:	4b76      	ldr	r3, [pc, #472]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f003 0318 	and.w	r3, r3, #24
 80026a8:	2b18      	cmp	r3, #24
 80026aa:	f040 80dd 	bne.w	8002868 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80026ae:	4b73      	ldr	r3, [pc, #460]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80026b8:	4b70      	ldr	r3, [pc, #448]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80026c4:	4b6d      	ldr	r3, [pc, #436]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80026d0:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80026d4:	08db      	lsrs	r3, r3, #3
 80026d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80b7 	beq.w	8002862 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0xbe>
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d056      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x16a>
 8002700:	e077      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002702:	4b5e      	ldr	r3, [pc, #376]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d02d      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800270e:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	08db      	lsrs	r3, r3, #3
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	4a5a      	ldr	r2, [pc, #360]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x240>)
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002738:	4b50      	ldr	r3, [pc, #320]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 800273a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002748:	ed97 6a02 	vldr	s12, [r7, #8]
 800274c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800288c <HAL_RCC_GetSysClockFreq+0x248>
 8002750:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002754:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800275c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002764:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002768:	e065      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002774:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002890 <HAL_RCC_GetSysClockFreq+0x24c>
 8002778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800277c:	4b3f      	ldr	r3, [pc, #252]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 800277e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800278c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002790:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800288c <HAL_RCC_GetSysClockFreq+0x248>
 8002794:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002798:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800279c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80027ac:	e043      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	ee07 3a90 	vmov	s15, r3
 80027b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002894 <HAL_RCC_GetSysClockFreq+0x250>
 80027bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c0:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 80027c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c8:	ee07 3a90 	vmov	s15, r3
 80027cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80027d4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800288c <HAL_RCC_GetSysClockFreq+0x248>
 80027d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80027f0:	e021      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x254>
 8002800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002804:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 8002806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002814:	ed97 6a02 	vldr	s12, [r7, #8]
 8002818:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800288c <HAL_RCC_GetSysClockFreq+0x248>
 800281c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002820:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002828:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800282c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002830:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002834:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002836:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_RCC_GetSysClockFreq+0x238>)
 8002838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283a:	0a5b      	lsrs	r3, r3, #9
 800283c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002840:	3301      	adds	r3, #1
 8002842:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800284e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800285a:	ee17 3a90 	vmov	r3, s15
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	e004      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e001      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002868:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x240>)
 800286a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800286c:	69fb      	ldr	r3, [r7, #28]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	@ 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	44020c00 	.word	0x44020c00
 8002880:	003d0900 	.word	0x003d0900
 8002884:	03d09000 	.word	0x03d09000
 8002888:	017d7840 	.word	0x017d7840
 800288c:	46000000 	.word	0x46000000
 8002890:	4c742400 	.word	0x4c742400
 8002894:	4bbebc20 	.word	0x4bbebc20
 8002898:	4a742400 	.word	0x4a742400

0800289c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80028a0:	f7ff fed0 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80028aa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80028ae:	4907      	ldr	r1, [pc, #28]	@ (80028cc <HAL_RCC_GetHCLKFreq+0x30>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80028b2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80028bc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80028be:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80028c0:	681b      	ldr	r3, [r3, #0]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	44020c00 	.word	0x44020c00
 80028cc:	08006ff4 	.word	0x08006ff4
 80028d0:	20000000 	.word	0x20000000

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80028d8:	f7ff ffe0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4904      	ldr	r1, [pc, #16]	@ (80028fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	44020c00 	.word	0x44020c00
 80028fc:	08007004 	.word	0x08007004

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002904:	f7ff ffca 	bl	800289c <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	@ (8002928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	44020c00 	.word	0x44020c00
 8002928:	08007004 	.word	0x08007004

0800292c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002930:	f7ff ffb4 	bl	800289c <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	0b1b      	lsrs	r3, r3, #12
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4904      	ldr	r1, [pc, #16]	@ (8002954 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	44020c00 	.word	0x44020c00
 8002954:	08007004 	.word	0x08007004

08002958 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8002958:	b480      	push	{r7}
 800295a:	b08b      	sub	sp, #44	@ 0x2c
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8002960:	4bae      	ldr	r3, [pc, #696]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800296a:	4bac      	ldr	r3, [pc, #688]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002974:	4ba9      	ldr	r3, [pc, #676]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800297e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002980:	4ba6      	ldr	r3, [pc, #664]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800298c:	4ba3      	ldr	r3, [pc, #652]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800298e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8126 	beq.w	8002bfc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d053      	beq.n	8002a5e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d86f      	bhi.n	8002a9c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d003      	beq.n	80029ca <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d02b      	beq.n	8002a20 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80029c8:	e068      	b.n	8002a9c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80029ca:	4b94      	ldr	r3, [pc, #592]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	08db      	lsrs	r3, r3, #3
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	4a92      	ldr	r2, [pc, #584]	@ (8002c20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a02:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002a1e:	e068      	b.n	8002af2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002c28 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a40:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002a5c:	e049      	b.n	8002af2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	ee07 3a90 	vmov	s15, r3
 8002a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a68:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002c2c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8002a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a7e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002a9a:	e02a      	b.n	8002af2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aac:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ad0:	ed97 6a04 	vldr	s12, [r7, #16]
 8002ad4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002af0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002af2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002afe:	d121      	bne.n	8002b44 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8002b00:	4b46      	ldr	r3, [pc, #280]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d017      	beq.n	8002b3c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002b0c:	4b43      	ldr	r3, [pc, #268]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b10:	0a5b      	lsrs	r3, r3, #9
 8002b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8002b1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b22:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002b26:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b32:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e006      	b.n	8002b4a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e002      	b.n	8002b4a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002b4a:	4b34      	ldr	r3, [pc, #208]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b56:	d121      	bne.n	8002b9c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8002b58:	4b30      	ldr	r3, [pc, #192]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d017      	beq.n	8002b94 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8002b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002b7e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b8a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	e006      	b.n	8002ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	e002      	b.n	8002ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bae:	d121      	bne.n	8002bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002bbc:	4b17      	ldr	r3, [pc, #92]	@ (8002c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc0:	0e1b      	lsrs	r3, r3, #24
 8002bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8002bce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002bd6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8002bea:	e010      	b.n	8002c0e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
}
 8002bf2:	e00c      	b.n	8002c0e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	e008      	b.n	8002c0e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	372c      	adds	r7, #44	@ 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	44020c00 	.word	0x44020c00
 8002c20:	03d09000 	.word	0x03d09000
 8002c24:	46000000 	.word	0x46000000
 8002c28:	4a742400 	.word	0x4a742400
 8002c2c:	4bbebc20 	.word	0x4bbebc20

08002c30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b08b      	sub	sp, #44	@ 0x2c
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8002c38:	4bae      	ldr	r3, [pc, #696]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8002c42:	4bac      	ldr	r3, [pc, #688]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8002c4c:	4ba9      	ldr	r3, [pc, #676]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c56:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8002c58:	4ba6      	ldr	r3, [pc, #664]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8002c64:	4ba3      	ldr	r3, [pc, #652]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8126 	beq.w	8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d053      	beq.n	8002d36 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d86f      	bhi.n	8002d74 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d02b      	beq.n	8002cf8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8002ca0:	e068      	b.n	8002d74 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ca2:	4b94      	ldr	r3, [pc, #592]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	08db      	lsrs	r3, r3, #3
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	4a92      	ldr	r2, [pc, #584]	@ (8002ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd6:	ed97 6a04 	vldr	s12, [r7, #16]
 8002cda:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002efc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002cf6:	e068      	b.n	8002dca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d02:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8002d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d14:	ed97 6a04 	vldr	s12, [r7, #16]
 8002d18:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002efc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002d34:	e049      	b.n	8002dca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d40:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8002d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d52:	ed97 6a04 	vldr	s12, [r7, #16]
 8002d56:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002efc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002d72:	e02a      	b.n	8002dca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d74:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da8:	ed97 6a04 	vldr	s12, [r7, #16]
 8002dac:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002efc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002db8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002dc8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dd6:	d121      	bne.n	8002e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8002dd8:	4b46      	ldr	r3, [pc, #280]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d017      	beq.n	8002e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002de4:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	0a5b      	lsrs	r3, r3, #9
 8002dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8002df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002dfe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e006      	b.n	8002e22 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e002      	b.n	8002e22 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002e22:	4b34      	ldr	r3, [pc, #208]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e2e:	d121      	bne.n	8002e74 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8002e30:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d017      	beq.n	8002e6c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8002e4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e52:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002e56:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e62:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	e006      	b.n	8002e7a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	e002      	b.n	8002e7a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e86:	d121      	bne.n	8002ecc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8002e88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d017      	beq.n	8002ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e98:	0e1b      	lsrs	r3, r3, #24
 8002e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8002ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002eae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eba:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002ec2:	e010      	b.n	8002ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
}
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
}
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
}
 8002ee6:	bf00      	nop
 8002ee8:	372c      	adds	r7, #44	@ 0x2c
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	44020c00 	.word	0x44020c00
 8002ef8:	03d09000 	.word	0x03d09000
 8002efc:	46000000 	.word	0x46000000
 8002f00:	4a742400 	.word	0x4a742400
 8002f04:	4bbebc20 	.word	0x4bbebc20

08002f08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b08b      	sub	sp, #44	@ 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8002f10:	4bae      	ldr	r3, [pc, #696]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8002f1a:	4bac      	ldr	r3, [pc, #688]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8002f24:	4ba9      	ldr	r3, [pc, #676]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f2e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8002f30:	4ba6      	ldr	r3, [pc, #664]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8002f3c:	4ba3      	ldr	r3, [pc, #652]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f40:	08db      	lsrs	r3, r3, #3
 8002f42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f54:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8126 	beq.w	80031ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d053      	beq.n	800300e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d86f      	bhi.n	800304c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d003      	beq.n	8002f7a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d02b      	beq.n	8002fd0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8002f78:	e068      	b.n	800304c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f7a:	4b94      	ldr	r3, [pc, #592]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	08db      	lsrs	r3, r3, #3
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	4a92      	ldr	r2, [pc, #584]	@ (80031d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fae:	ed97 6a04 	vldr	s12, [r7, #16]
 8002fb2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80031d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002fce:	e068      	b.n	80030a2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fda:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80031d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8002fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fec:	ed97 6a04 	vldr	s12, [r7, #16]
 8002ff0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80031d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003008:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800300c:	e049      	b.n	80030a2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003018:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80031dc <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800301c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a04 	vldr	s12, [r7, #16]
 800302e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80031d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800304a:	e02a      	b.n	80030a2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800304c:	4b5f      	ldr	r3, [pc, #380]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	4a5e      	ldr	r2, [pc, #376]	@ (80031d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003080:	ed97 6a04 	vldr	s12, [r7, #16]
 8003084:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80031d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003090:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80030a0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80030a2:	4b4a      	ldr	r3, [pc, #296]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ae:	d121      	bne.n	80030f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80030b0:	4b46      	ldr	r3, [pc, #280]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d017      	beq.n	80030ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80030bc:	4b43      	ldr	r3, [pc, #268]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	0a5b      	lsrs	r3, r3, #9
 80030c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80030ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030d2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80030d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80030da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e006      	b.n	80030fa <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e002      	b.n	80030fa <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80030fa:	4b34      	ldr	r3, [pc, #208]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003106:	d121      	bne.n	800314c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003108:	4b30      	ldr	r3, [pc, #192]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d017      	beq.n	8003144 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003114:	4b2d      	ldr	r3, [pc, #180]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800312a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800312e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	e006      	b.n	8003152 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e002      	b.n	8003152 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003152:	4b1e      	ldr	r3, [pc, #120]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800315a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800315e:	d121      	bne.n	80031a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003160:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d017      	beq.n	800319c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800316c:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800316e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800317e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003182:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8003186:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800318a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800318e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003192:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800319a:	e010      	b.n	80031be <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
}
 80031a2:	e00c      	b.n	80031be <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
}
 80031aa:	e008      	b.n	80031be <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
}
 80031be:	bf00      	nop
 80031c0:	372c      	adds	r7, #44	@ 0x2c
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	44020c00 	.word	0x44020c00
 80031d0:	03d09000 	.word	0x03d09000
 80031d4:	46000000 	.word	0x46000000
 80031d8:	4a742400 	.word	0x4a742400
 80031dc:	4bbebc20 	.word	0x4bbebc20

080031e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b08f      	sub	sp, #60	@ 0x3c
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80031ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031ee:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80031f2:	4321      	orrs	r1, r4
 80031f4:	d150      	bne.n	8003298 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80031f6:	4b26      	ldr	r3, [pc, #152]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80031f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003200:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003202:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b02      	cmp	r3, #2
 800320e:	d108      	bne.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003216:	d104      	bne.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
 800321e:	f001 bb20 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800322c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003230:	d108      	bne.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003238:	d104      	bne.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800323a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800323e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003240:	f001 bb0f 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003244:	4b12      	ldr	r3, [pc, #72]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003250:	d119      	bne.n	8003286 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003258:	d115      	bne.n	8003286 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003266:	d30a      	bcc.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003272:	4a08      	ldr	r2, [pc, #32]	@ (8003294 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800327a:	f001 baf2 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003282:	f001 baee 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	637b      	str	r3, [r7, #52]	@ 0x34
 800328a:	f001 baea 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800328e:	bf00      	nop
 8003290:	44020c00 	.word	0x44020c00
 8003294:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800329c:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 80032a0:	ea50 0104 	orrs.w	r1, r0, r4
 80032a4:	f000 8615 	beq.w	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 80032a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032ac:	2801      	cmp	r0, #1
 80032ae:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 80032b2:	f081 82d3 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80032b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032ba:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80032be:	ea50 0104 	orrs.w	r1, r0, r4
 80032c2:	f000 84d8 	beq.w	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80032c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032ca:	2801      	cmp	r0, #1
 80032cc:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80032d0:	f081 82c4 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80032d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032d8:	f1a1 0410 	sub.w	r4, r1, #16
 80032dc:	ea50 0104 	orrs.w	r1, r0, r4
 80032e0:	f001 8288 	beq.w	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 80032e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e8:	2801      	cmp	r0, #1
 80032ea:	f171 0110 	sbcs.w	r1, r1, #16
 80032ee:	f081 82b5 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80032f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032f6:	f1a1 0408 	sub.w	r4, r1, #8
 80032fa:	ea50 0104 	orrs.w	r1, r0, r4
 80032fe:	f001 81fe 	beq.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8003302:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003306:	2801      	cmp	r0, #1
 8003308:	f171 0108 	sbcs.w	r1, r1, #8
 800330c:	f081 82a6 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003310:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003314:	1f0c      	subs	r4, r1, #4
 8003316:	ea50 0104 	orrs.w	r1, r0, r4
 800331a:	f000 8753 	beq.w	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 800331e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003322:	2801      	cmp	r0, #1
 8003324:	f171 0104 	sbcs.w	r1, r1, #4
 8003328:	f081 8298 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800332c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003330:	1e8c      	subs	r4, r1, #2
 8003332:	ea50 0104 	orrs.w	r1, r0, r4
 8003336:	f001 8173 	beq.w	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 800333a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800333e:	2801      	cmp	r0, #1
 8003340:	f171 0102 	sbcs.w	r1, r1, #2
 8003344:	f081 828a 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800334c:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8003350:	4321      	orrs	r1, r4
 8003352:	f001 80fe 	beq.w	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8003356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800335a:	4ccb      	ldr	r4, [pc, #812]	@ (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800335c:	42a0      	cmp	r0, r4
 800335e:	f171 0100 	sbcs.w	r1, r1, #0
 8003362:	f081 827b 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800336a:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800336e:	4321      	orrs	r1, r4
 8003370:	f001 8076 	beq.w	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8003374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003378:	4cc4      	ldr	r4, [pc, #784]	@ (800368c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800337a:	42a0      	cmp	r0, r4
 800337c:	f171 0100 	sbcs.w	r1, r1, #0
 8003380:	f081 826c 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003388:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800338c:	4321      	orrs	r1, r4
 800338e:	f000 87b5 	beq.w	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8003392:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003396:	4cbe      	ldr	r4, [pc, #760]	@ (8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8003398:	42a0      	cmp	r0, r4
 800339a:	f171 0100 	sbcs.w	r1, r1, #0
 800339e:	f081 825d 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80033a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033a6:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80033aa:	4321      	orrs	r1, r4
 80033ac:	f000 8738 	beq.w	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80033b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033b4:	4cb7      	ldr	r4, [pc, #732]	@ (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 80033b6:	42a0      	cmp	r0, r4
 80033b8:	f171 0100 	sbcs.w	r1, r1, #0
 80033bc:	f081 824e 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80033c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c4:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80033c8:	4321      	orrs	r1, r4
 80033ca:	f001 81cd 	beq.w	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 80033ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033d2:	4cb1      	ldr	r4, [pc, #708]	@ (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80033d4:	42a0      	cmp	r0, r4
 80033d6:	f171 0100 	sbcs.w	r1, r1, #0
 80033da:	f081 823f 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80033de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033e2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80033e6:	4321      	orrs	r1, r4
 80033e8:	f000 80d9 	beq.w	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80033ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033f0:	4caa      	ldr	r4, [pc, #680]	@ (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80033f2:	42a0      	cmp	r0, r4
 80033f4:	f171 0100 	sbcs.w	r1, r1, #0
 80033f8:	f081 8230 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80033fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003400:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8003404:	4321      	orrs	r1, r4
 8003406:	f000 83da 	beq.w	8003bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800340a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800340e:	4ca4      	ldr	r4, [pc, #656]	@ (80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8003410:	42a0      	cmp	r0, r4
 8003412:	f171 0100 	sbcs.w	r1, r1, #0
 8003416:	f081 8221 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800341a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800341e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8003422:	4321      	orrs	r1, r4
 8003424:	f000 8627 	beq.w	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8003428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800342c:	4c9d      	ldr	r4, [pc, #628]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 800342e:	42a0      	cmp	r0, r4
 8003430:	f171 0100 	sbcs.w	r1, r1, #0
 8003434:	f081 8212 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800343c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8003440:	4321      	orrs	r1, r4
 8003442:	f000 857a 	beq.w	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8003446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800344a:	4c97      	ldr	r4, [pc, #604]	@ (80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 800344c:	42a0      	cmp	r0, r4
 800344e:	f171 0100 	sbcs.w	r1, r1, #0
 8003452:	f081 8203 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800345a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800345e:	4321      	orrs	r1, r4
 8003460:	f000 84fb 	beq.w	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8003464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003468:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800346c:	f171 0100 	sbcs.w	r1, r1, #0
 8003470:	f081 81f4 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003478:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800347c:	4321      	orrs	r1, r4
 800347e:	f000 84a9 	beq.w	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8003482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003486:	f248 0401 	movw	r4, #32769	@ 0x8001
 800348a:	42a0      	cmp	r0, r4
 800348c:	f171 0100 	sbcs.w	r1, r1, #0
 8003490:	f081 81e4 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003498:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800349c:	4321      	orrs	r1, r4
 800349e:	f000 8456 	beq.w	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 80034a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034a6:	f244 0401 	movw	r4, #16385	@ 0x4001
 80034aa:	42a0      	cmp	r0, r4
 80034ac:	f171 0100 	sbcs.w	r1, r1, #0
 80034b0:	f081 81d4 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80034b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034b8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80034bc:	4321      	orrs	r1, r4
 80034be:	f000 8403 	beq.w	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80034c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034c6:	f242 0401 	movw	r4, #8193	@ 0x2001
 80034ca:	42a0      	cmp	r0, r4
 80034cc:	f171 0100 	sbcs.w	r1, r1, #0
 80034d0:	f081 81c4 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80034d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034d8:	2821      	cmp	r0, #33	@ 0x21
 80034da:	f171 0100 	sbcs.w	r1, r1, #0
 80034de:	d255      	bcs.n	800358c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80034e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034e4:	4301      	orrs	r1, r0
 80034e6:	f001 81b9 	beq.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80034ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ee:	1e42      	subs	r2, r0, #1
 80034f0:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 80034f4:	2a20      	cmp	r2, #32
 80034f6:	f173 0100 	sbcs.w	r1, r3, #0
 80034fa:	f081 81af 	bcs.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80034fe:	2a1f      	cmp	r2, #31
 8003500:	f201 81ac 	bhi.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003504:	a101      	add	r1, pc, #4	@ (adr r1, 800350c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8003506:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800350a:	bf00      	nop
 800350c:	080035e3 	.word	0x080035e3
 8003510:	080036e1 	.word	0x080036e1
 8003514:	0800485d 	.word	0x0800485d
 8003518:	080037a1 	.word	0x080037a1
 800351c:	0800485d 	.word	0x0800485d
 8003520:	0800485d 	.word	0x0800485d
 8003524:	0800485d 	.word	0x0800485d
 8003528:	08003871 	.word	0x08003871
 800352c:	0800485d 	.word	0x0800485d
 8003530:	0800485d 	.word	0x0800485d
 8003534:	0800485d 	.word	0x0800485d
 8003538:	0800485d 	.word	0x0800485d
 800353c:	0800485d 	.word	0x0800485d
 8003540:	0800485d 	.word	0x0800485d
 8003544:	0800485d 	.word	0x0800485d
 8003548:	08003955 	.word	0x08003955
 800354c:	0800485d 	.word	0x0800485d
 8003550:	0800485d 	.word	0x0800485d
 8003554:	0800485d 	.word	0x0800485d
 8003558:	0800485d 	.word	0x0800485d
 800355c:	0800485d 	.word	0x0800485d
 8003560:	0800485d 	.word	0x0800485d
 8003564:	0800485d 	.word	0x0800485d
 8003568:	0800485d 	.word	0x0800485d
 800356c:	0800485d 	.word	0x0800485d
 8003570:	0800485d 	.word	0x0800485d
 8003574:	0800485d 	.word	0x0800485d
 8003578:	0800485d 	.word	0x0800485d
 800357c:	0800485d 	.word	0x0800485d
 8003580:	0800485d 	.word	0x0800485d
 8003584:	0800485d 	.word	0x0800485d
 8003588:	08003a2b 	.word	0x08003a2b
 800358c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003590:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8003594:	430b      	orrs	r3, r1
 8003596:	f000 82b3 	beq.w	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800359a:	f001 b95f 	b.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800359e:	4b43      	ldr	r3, [pc, #268]	@ (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80035a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80035aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80035b0:	f107 0320 	add.w	r3, r7, #32
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff f9cf 	bl	8002958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80035be:	f001 b950 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	2b40      	cmp	r3, #64	@ 0x40
 80035c6:	d108      	bne.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fb2f 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035d6:	f001 b944 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035de:	f001 b940 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80035e2:	4b32      	ldr	r3, [pc, #200]	@ (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80035e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f984 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80035fa:	f001 b932 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80035fe:	4b2b      	ldr	r3, [pc, #172]	@ (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360a:	d10a      	bne.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	2b01      	cmp	r3, #1
 8003610:	d107      	bne.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fb0a 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003620:	e05c      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8003622:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800362a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800362e:	d10a      	bne.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003636:	f107 0308 	add.w	r3, r7, #8
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fc64 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
 8003644:	e04a      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003646:	4b19      	ldr	r3, [pc, #100]	@ (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d10c      	bne.n	800366c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	2b03      	cmp	r3, #3
 8003656:	d109      	bne.n	800366c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003658:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	08db      	lsrs	r3, r3, #3
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	4a13      	ldr	r2, [pc, #76]	@ (80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
 8003668:	637b      	str	r3, [r7, #52]	@ 0x34
 800366a:	e037      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800366c:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003678:	d11e      	bne.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	2b04      	cmp	r3, #4
 800367e:	d11b      	bne.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8003682:	637b      	str	r3, [r7, #52]	@ 0x34
 8003684:	e02a      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8003686:	bf00      	nop
 8003688:	40000001 	.word	0x40000001
 800368c:	20000001 	.word	0x20000001
 8003690:	10000001 	.word	0x10000001
 8003694:	08000001 	.word	0x08000001
 8003698:	04000001 	.word	0x04000001
 800369c:	00400001 	.word	0x00400001
 80036a0:	00200001 	.word	0x00200001
 80036a4:	00040001 	.word	0x00040001
 80036a8:	00020001 	.word	0x00020001
 80036ac:	44020c00 	.word	0x44020c00
 80036b0:	03d09000 	.word	0x03d09000
 80036b4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80036b8:	4ba3      	ldr	r3, [pc, #652]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80036ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d106      	bne.n	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d103      	bne.n	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 80036cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d2:	e003      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036d8:	f001 b8c3 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80036dc:	f001 b8c1 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80036e0:	4b99      	ldr	r3, [pc, #612]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80036e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80036f2:	f7ff f8ef 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80036f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80036f8:	f001 b8b3 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80036fc:	4b92      	ldr	r3, [pc, #584]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003708:	d10a      	bne.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	2b08      	cmp	r3, #8
 800370e:	d107      	bne.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fa8b 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	637b      	str	r3, [r7, #52]	@ 0x34
 800371e:	e03d      	b.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	2b10      	cmp	r3, #16
 8003724:	d108      	bne.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fbec 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003734:	f001 b895 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003738:	4b83      	ldr	r3, [pc, #524]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b02      	cmp	r3, #2
 8003742:	d10c      	bne.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003746:	2b18      	cmp	r3, #24
 8003748:	d109      	bne.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800374a:	4b7f      	ldr	r3, [pc, #508]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	08db      	lsrs	r3, r3, #3
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	4a7d      	ldr	r2, [pc, #500]	@ (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
 800375c:	e01e      	b.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800375e:	4b7a      	ldr	r3, [pc, #488]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800376a:	d105      	bne.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	2b20      	cmp	r3, #32
 8003770:	d102      	bne.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8003772:	4b77      	ldr	r3, [pc, #476]	@ (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8003774:	637b      	str	r3, [r7, #52]	@ 0x34
 8003776:	e011      	b.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003778:	4b73      	ldr	r3, [pc, #460]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800377a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d106      	bne.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	2b28      	cmp	r3, #40	@ 0x28
 800378a:	d103      	bne.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 800378c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003790:	637b      	str	r3, [r7, #52]	@ 0x34
 8003792:	e003      	b.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003798:	f001 b863 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800379c:	f001 b861 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80037a0:	4b69      	ldr	r3, [pc, #420]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80037a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037a6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80037aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d104      	bne.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80037b2:	f7ff f88f 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80037b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80037b8:	f001 b853 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80037bc:	4b62      	ldr	r3, [pc, #392]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037c8:	d10a      	bne.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	2b40      	cmp	r3, #64	@ 0x40
 80037ce:	d107      	bne.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fa2b 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80037de:	e045      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80037e0:	4b59      	ldr	r3, [pc, #356]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ec:	d10a      	bne.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	2b80      	cmp	r3, #128	@ 0x80
 80037f2:	d107      	bne.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037f4:	f107 0308 	add.w	r3, r7, #8
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fb85 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	637b      	str	r3, [r7, #52]	@ 0x34
 8003802:	e033      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003804:	4b50      	ldr	r3, [pc, #320]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d10c      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	2bc0      	cmp	r3, #192	@ 0xc0
 8003814:	d109      	bne.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003816:	4b4c      	ldr	r3, [pc, #304]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	08db      	lsrs	r3, r3, #3
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	4a4a      	ldr	r2, [pc, #296]	@ (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
 8003828:	e020      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800382a:	4b47      	ldr	r3, [pc, #284]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003836:	d106      	bne.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383e:	d102      	bne.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8003840:	4b43      	ldr	r3, [pc, #268]	@ (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8003842:	637b      	str	r3, [r7, #52]	@ 0x34
 8003844:	e012      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003846:	4b40      	ldr	r3, [pc, #256]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8003848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d107      	bne.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800385a:	d103      	bne.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 800385c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003860:	637b      	str	r3, [r7, #52]	@ 0x34
 8003862:	e003      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003868:	f000 bffb 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800386c:	f000 bff9 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003870:	4b35      	ldr	r3, [pc, #212]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8003872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003876:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800387a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800387c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003882:	f7ff f827 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003886:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8003888:	f000 bfeb 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800388c:	4b2e      	ldr	r3, [pc, #184]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003898:	d10b      	bne.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a0:	d107      	bne.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038a2:	f107 0314 	add.w	r3, r7, #20
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff f9c2 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80038b0:	e047      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80038b2:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038be:	d10b      	bne.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d107      	bne.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038c8:	f107 0308 	add.w	r3, r7, #8
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fb1b 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038d6:	e034      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80038d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d10d      	bne.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038ea:	d109      	bne.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038ec:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	4a15      	ldr	r2, [pc, #84]	@ (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
 80038fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80038fe:	e020      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8003900:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390c:	d106      	bne.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003914:	d102      	bne.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8003916:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8003918:	637b      	str	r3, [r7, #52]	@ 0x34
 800391a:	e012      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800391e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d107      	bne.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003930:	d103      	bne.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8003932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003936:	637b      	str	r3, [r7, #52]	@ 0x34
 8003938:	e003      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800393e:	f000 bf90 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003942:	f000 bf8e 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003946:	bf00      	nop
 8003948:	44020c00 	.word	0x44020c00
 800394c:	03d09000 	.word	0x03d09000
 8003950:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003954:	4ba5      	ldr	r3, [pc, #660]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800395a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800395e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003966:	f7fe ffb5 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 800396a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800396c:	f000 bf79 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8003970:	4b9e      	ldr	r3, [pc, #632]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800397c:	d10b      	bne.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003984:	d107      	bne.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003986:	f107 0314 	add.w	r3, r7, #20
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff f950 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	637b      	str	r3, [r7, #52]	@ 0x34
 8003994:	e047      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8003996:	4b95      	ldr	r3, [pc, #596]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a2:	d10b      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039aa:	d107      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80039ac:	f107 0308 	add.w	r3, r7, #8
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff faa9 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ba:	e034      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80039bc:	4b8b      	ldr	r3, [pc, #556]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ce:	d109      	bne.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80039d0:	4b86      	ldr	r3, [pc, #536]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	4a85      	ldr	r2, [pc, #532]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
 80039e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039e2:	e020      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80039e4:	4b81      	ldr	r3, [pc, #516]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039f0:	d106      	bne.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039f8:	d102      	bne.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80039fa:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039fe:	e012      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003a00:	4b7a      	ldr	r3, [pc, #488]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003a14:	d103      	bne.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a22:	f000 bf1e 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003a26:	f000 bf1c 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8003a2a:	4b70      	ldr	r3, [pc, #448]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a30:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8003a34:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8003a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7fe ff4a 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003a40:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8003a42:	f000 bf0e 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8003a46:	4b69      	ldr	r3, [pc, #420]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f8e5 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a6a:	e047      	b.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8003a6c:	4b5f      	ldr	r3, [pc, #380]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a78:	d10b      	bne.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a80:	d107      	bne.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a82:	f107 0308 	add.w	r3, r7, #8
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fa3e 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a90:	e034      	b.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8003a92:	4b56      	ldr	r3, [pc, #344]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d10d      	bne.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003aa4:	d109      	bne.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003aa6:	4b51      	ldr	r3, [pc, #324]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	08db      	lsrs	r3, r3, #3
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab8:	e020      	b.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8003aba:	4b4c      	ldr	r3, [pc, #304]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8003ad0:	4b48      	ldr	r3, [pc, #288]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8003ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad4:	e012      	b.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8003ad6:	4b45      	ldr	r3, [pc, #276]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d107      	bne.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003aea:	d103      	bne.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8003aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af2:	e003      	b.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003af8:	f000 beb3 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003afc:	f000 beb1 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003b00:	4b3a      	ldr	r3, [pc, #232]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b06:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8003b0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d104      	bne.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003b12:	f7fe ff0b 	bl	800292c <HAL_RCC_GetPCLK3Freq>
 8003b16:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b18:	f000 bea3 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b22:	d108      	bne.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff f881 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b32:	f000 be96 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b3c:	d108      	bne.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b3e:	f107 0308 	add.w	r3, r7, #8
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff f9e0 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b4c:	f000 be89 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003b50:	4b26      	ldr	r3, [pc, #152]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b62:	d109      	bne.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b64:	4b21      	ldr	r3, [pc, #132]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	4a20      	ldr	r2, [pc, #128]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b76:	e020      	b.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8003b78:	4b1c      	ldr	r3, [pc, #112]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b84:	d106      	bne.n	8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b8c:	d102      	bne.n	8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8003b8e:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8003b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b92:	e012      	b.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003b94:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003ba8:	d103      	bne.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8003baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bb6:	f000 be54 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003bba:	f000 be52 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8003bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d104      	bne.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8003bd0:	f7fe fe64 	bl	800289c <HAL_RCC_GetHCLKFreq>
 8003bd4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8003bd6:	f000 be44 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10b      	bne.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8003be0:	f7fe fd30 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8003be4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8003be6:	f000 be3c 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003bea:	bf00      	nop
 8003bec:	44020c00 	.word	0x44020c00
 8003bf0:	03d09000 	.word	0x03d09000
 8003bf4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d108      	bne.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bfe:	f107 0314 	add.w	r3, r7, #20
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff f814 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c0c:	f000 be29 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003c10:	4b9f      	ldr	r3, [pc, #636]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c1c:	d105      	bne.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d102      	bne.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8003c24:	4b9b      	ldr	r3, [pc, #620]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8003c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c28:	e023      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003c2a:	4b99      	ldr	r3, [pc, #612]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d109      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c3c:	4b94      	ldr	r3, [pc, #592]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	4a94      	ldr	r2, [pc, #592]	@ (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4e:	e010      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8003c50:	4b8f      	ldr	r3, [pc, #572]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d102      	bne.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8003c64:	4b8d      	ldr	r3, [pc, #564]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8003c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c6e:	f000 bdf8 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003c72:	f000 bdf6 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003c76:	4b86      	ldr	r3, [pc, #536]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8003c82:	4b83      	ldr	r3, [pc, #524]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8003c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c9c:	e012      	b.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cac:	d106      	bne.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d103      	bne.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8003cb4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8003cc0:	f000 bdcf 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003cc4:	f000 bdcd 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003cc8:	4b71      	ldr	r3, [pc, #452]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003cca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cd2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003cda:	f7fe fdfb 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003cde:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ce0:	f000 bdbf 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cea:	d108      	bne.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff f909 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cfa:	f000 bdb2 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003cfe:	4b64      	ldr	r3, [pc, #400]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d10d      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d10:	d109      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d12:	4b5f      	ldr	r3, [pc, #380]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	08db      	lsrs	r3, r3, #3
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d24:	e011      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003d26:	4b5a      	ldr	r3, [pc, #360]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d32:	d106      	bne.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8003d3c:	4b57      	ldr	r3, [pc, #348]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8003d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d46:	f000 bd8c 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003d4a:	f000 bd8a 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003d4e:	4b50      	ldr	r3, [pc, #320]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003d50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d54:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d58:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d60:	f7fe fdb8 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003d64:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d66:	f000 bd7c 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d70:	d108      	bne.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff f8c6 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d80:	f000 bd6f 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003d84:	4b42      	ldr	r3, [pc, #264]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d10d      	bne.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8003d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d96:	d109      	bne.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d98:	4b3d      	ldr	r3, [pc, #244]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	4a3d      	ldr	r2, [pc, #244]	@ (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003daa:	e011      	b.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8003dac:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dc0:	d102      	bne.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8003dc2:	4b36      	ldr	r3, [pc, #216]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8003dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dcc:	f000 bd49 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003dd0:	f000 bd47 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003dd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dda:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003dde:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003de6:	f7fe fda1 	bl	800292c <HAL_RCC_GetPCLK3Freq>
 8003dea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003dec:	f000 bd39 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df6:	d108      	bne.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff f883 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e06:	f000 bd2c 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8003e0a:	4b21      	ldr	r3, [pc, #132]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d10d      	bne.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	08db      	lsrs	r3, r3, #3
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	4a1b      	ldr	r2, [pc, #108]	@ (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e30:	e011      	b.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8003e32:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e46:	d102      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8003e48:	4b14      	ldr	r3, [pc, #80]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e52:	f000 bd06 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003e56:	f000 bd04 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8003e5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e60:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003e64:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe fd32 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003e70:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e72:	f000 bcf6 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8003e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e7c:	d110      	bne.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff f840 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e8c:	f000 bce9 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003e90:	44020c00 	.word	0x44020c00
 8003e94:	017d7840 	.word	0x017d7840
 8003e98:	03d09000 	.word	0x03d09000
 8003e9c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8003ea0:	4ba4      	ldr	r3, [pc, #656]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d10e      	bne.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eb2:	d10a      	bne.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003eb4:	4b9f      	ldr	r3, [pc, #636]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	4a9e      	ldr	r2, [pc, #632]	@ (8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ec6:	f000 bccc 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ece:	f000 bcc8 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003ed2:	4b98      	ldr	r3, [pc, #608]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003ed4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ed8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003edc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003ee4:	f7fe fd22 	bl	800292c <HAL_RCC_GetPCLK3Freq>
 8003ee8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003eea:	f000 bcba 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff f804 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f04:	f000 bcad 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8003f08:	4b8a      	ldr	r3, [pc, #552]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d10e      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f1a:	d10a      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f1c:	4b85      	ldr	r3, [pc, #532]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	4a84      	ldr	r2, [pc, #528]	@ (8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f2e:	f000 bc98 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f36:	f000 bc94 	b.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003f3a:	4b7e      	ldr	r3, [pc, #504]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003f3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f44:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003f4c:	d056      	beq.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003f54:	f200 808b 	bhi.w	800406e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f5e:	d03e      	beq.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8003f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f66:	f200 8082 	bhi.w	800406e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f70:	d027      	beq.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f78:	d879      	bhi.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f80:	d017      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f88:	d871      	bhi.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f96:	d004      	beq.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8003f98:	e069      	b.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8003f9a:	f7fe fcc7 	bl	800292c <HAL_RCC_GetPCLK3Freq>
 8003f9e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8003fa0:	e068      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe fe42 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003fb0:	e060      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe ffa6 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003fc0:	e058      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d103      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8003fd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8003fd6:	e04d      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003fdc:	e04a      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003fde:	4b55      	ldr	r3, [pc, #340]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fe8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fec:	d103      	bne.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8003fee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003ff2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8003ff4:	e03e      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003ffa:	e03b      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8003ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004002:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004008:	4b4a      	ldr	r3, [pc, #296]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d10c      	bne.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8004014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800401a:	4b46      	ldr	r3, [pc, #280]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	08db      	lsrs	r3, r3, #3
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	4a44      	ldr	r2, [pc, #272]	@ (8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
 800402c:	e01e      	b.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800402e:	4b41      	ldr	r3, [pc, #260]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800403a:	d106      	bne.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800403c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004042:	d102      	bne.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004044:	4b3d      	ldr	r3, [pc, #244]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8004046:	637b      	str	r3, [r7, #52]	@ 0x34
 8004048:	e010      	b.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800404a:	4b3a      	ldr	r3, [pc, #232]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004056:	d106      	bne.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8004058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800405e:	d102      	bne.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004060:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
 8004064:	e002      	b.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800406a:	e003      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004072:	bf00      	nop
          }
        }
        break;
 8004074:	e3f5      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004076:	4b2f      	ldr	r3, [pc, #188]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004078:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800407c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004080:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004084:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004088:	d05f      	beq.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004090:	f200 8094 	bhi.w	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800409a:	d03f      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040a2:	f200 808b 	bhi.w	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040ac:	d028      	beq.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040b4:	f200 8082 	bhi.w	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040be:	d017      	beq.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c6:	d879      	bhi.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80040c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d4:	d004      	beq.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80040d6:	e071      	b.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80040d8:	f7fe fbfc 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80040dc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80040de:	e070      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe fda3 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80040ee:	e068      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe ff07 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80040fe:	e060      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004100:	4b0c      	ldr	r3, [pc, #48]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d103      	bne.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 800410e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004114:	e055      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800411a:	e052      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800411e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412a:	d10b      	bne.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 800412c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004130:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004132:	e046      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8004134:	44020c00 	.word	0x44020c00
 8004138:	03d09000 	.word	0x03d09000
 800413c:	003d0900 	.word	0x003d0900
 8004140:	017d7840 	.word	0x017d7840
              frequency = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004148:	e03b      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800414a:	4bae      	ldr	r3, [pc, #696]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800414c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004150:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004156:	4bab      	ldr	r3, [pc, #684]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	d10c      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8004162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004168:	4ba6      	ldr	r3, [pc, #664]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	4aa5      	ldr	r2, [pc, #660]	@ (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	637b      	str	r3, [r7, #52]	@ 0x34
 800417a:	e01e      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800417c:	4ba1      	ldr	r3, [pc, #644]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004188:	d106      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 800418a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004190:	d102      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004192:	4b9e      	ldr	r3, [pc, #632]	@ (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8004194:	637b      	str	r3, [r7, #52]	@ 0x34
 8004196:	e010      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004198:	4b9a      	ldr	r3, [pc, #616]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041a4:	d106      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80041a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041ac:	d102      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80041ae:	4b98      	ldr	r3, [pc, #608]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80041b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b2:	e002      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80041b8:	e003      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80041ba:	e002      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80041c0:	bf00      	nop
          }
        }
        break;
 80041c2:	e34e      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80041c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80041c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80041d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041dc:	d105      	bne.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80041e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80041e8:	e33b      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f0:	d107      	bne.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041f2:	f107 0320 	add.w	r3, r7, #32
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fbae 	bl	8002958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004200:	e32f      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004208:	d107      	bne.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800420a:	f107 0314 	add.w	r3, r7, #20
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fd0e 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004218:	e323      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800421e:	e320      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004220:	4b78      	ldr	r3, [pc, #480]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	2b04      	cmp	r3, #4
 8004230:	d860      	bhi.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8004232:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800424d 	.word	0x0800424d
 800423c:	0800425d 	.word	0x0800425d
 8004240:	0800426d 	.word	0x0800426d
 8004244:	0800427d 	.word	0x0800427d
 8004248:	08004283 	.word	0x08004283
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800424c:	f107 0320 	add.w	r3, r7, #32
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fb81 	bl	8002958 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800425a:	e04e      	b.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800425c:	f107 0314 	add.w	r3, r7, #20
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe fce5 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800426a:	e046      	b.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800426c:	f107 0308 	add.w	r3, r7, #8
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe fe49 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800427a:	e03e      	b.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800427c:	4b65      	ldr	r3, [pc, #404]	@ (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800427e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004280:	e03b      	b.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004282:	4b60      	ldr	r3, [pc, #384]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004288:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800428c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800428e:	4b5d      	ldr	r3, [pc, #372]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d10c      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800429a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042a0:	4b58      	ldr	r3, [pc, #352]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	4a57      	ldr	r2, [pc, #348]	@ (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b2:	e01e      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80042b4:	4b53      	ldr	r3, [pc, #332]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c0:	d106      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c8:	d102      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80042ca:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80042cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ce:	e010      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80042d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042dc:	d106      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80042de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042e4:	d102      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80042e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ea:	e002      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80042f0:	e003      	b.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80042f2:	e002      	b.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80042f8:	bf00      	nop
          }
        }
        break;
 80042fa:	e2b2      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80042fc:	4b41      	ldr	r3, [pc, #260]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80042fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	2b20      	cmp	r3, #32
 800430c:	f200 80a4 	bhi.w	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8004310:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800439d 	.word	0x0800439d
 800431c:	08004459 	.word	0x08004459
 8004320:	08004459 	.word	0x08004459
 8004324:	08004459 	.word	0x08004459
 8004328:	08004459 	.word	0x08004459
 800432c:	08004459 	.word	0x08004459
 8004330:	08004459 	.word	0x08004459
 8004334:	08004459 	.word	0x08004459
 8004338:	080043ad 	.word	0x080043ad
 800433c:	08004459 	.word	0x08004459
 8004340:	08004459 	.word	0x08004459
 8004344:	08004459 	.word	0x08004459
 8004348:	08004459 	.word	0x08004459
 800434c:	08004459 	.word	0x08004459
 8004350:	08004459 	.word	0x08004459
 8004354:	08004459 	.word	0x08004459
 8004358:	080043bd 	.word	0x080043bd
 800435c:	08004459 	.word	0x08004459
 8004360:	08004459 	.word	0x08004459
 8004364:	08004459 	.word	0x08004459
 8004368:	08004459 	.word	0x08004459
 800436c:	08004459 	.word	0x08004459
 8004370:	08004459 	.word	0x08004459
 8004374:	08004459 	.word	0x08004459
 8004378:	080043cd 	.word	0x080043cd
 800437c:	08004459 	.word	0x08004459
 8004380:	08004459 	.word	0x08004459
 8004384:	08004459 	.word	0x08004459
 8004388:	08004459 	.word	0x08004459
 800438c:	08004459 	.word	0x08004459
 8004390:	08004459 	.word	0x08004459
 8004394:	08004459 	.word	0x08004459
 8004398:	080043d3 	.word	0x080043d3
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800439c:	f107 0320 	add.w	r3, r7, #32
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fad9 	bl	8002958 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80043aa:	e058      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe fc3d 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80043ba:	e050      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043bc:	f107 0308 	add.w	r3, r7, #8
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe fda1 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80043ca:	e048      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80043cc:	4b11      	ldr	r3, [pc, #68]	@ (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80043ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80043d0:	e045      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80043d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80043d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80043de:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d116      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d113      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043f0:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	4a03      	ldr	r2, [pc, #12]	@ (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	637b      	str	r3, [r7, #52]	@ 0x34
 8004402:	e028      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8004404:	44020c00 	.word	0x44020c00
 8004408:	03d09000 	.word	0x03d09000
 800440c:	003d0900 	.word	0x003d0900
 8004410:	017d7840 	.word	0x017d7840
 8004414:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004418:	4b95      	ldr	r3, [pc, #596]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004424:	d106      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8004426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442c:	d102      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800442e:	4b91      	ldr	r3, [pc, #580]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
 8004432:	e010      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004434:	4b8e      	ldr	r3, [pc, #568]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004440:	d106      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8004442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004448:	d102      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800444a:	4b8b      	ldr	r3, [pc, #556]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34
 800444e:	e002      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004454:	e003      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8004456:	e002      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800445c:	bf00      	nop
          }
        }
        break;
 800445e:	e200      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004460:	4b83      	ldr	r3, [pc, #524]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8004462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004466:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004472:	d031      	beq.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800447a:	d866      	bhi.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004480:	d027      	beq.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	2bc0      	cmp	r3, #192	@ 0xc0
 8004486:	d860      	bhi.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	2b80      	cmp	r3, #128	@ 0x80
 800448c:	d019      	beq.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	2b80      	cmp	r3, #128	@ 0x80
 8004492:	d85a      	bhi.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8004494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	2b40      	cmp	r3, #64	@ 0x40
 800449e:	d008      	beq.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 80044a0:	e053      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044a2:	f107 0320 	add.w	r3, r7, #32
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe fa56 	bl	8002958 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80044b0:	e04e      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044b2:	f107 0314 	add.w	r3, r7, #20
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fbba 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80044c0:	e046      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fd1e 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80044d0:	e03e      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80044d2:	4b6a      	ldr	r3, [pc, #424]	@ (800467c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80044d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80044d6:	e03b      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80044d8:	4b65      	ldr	r3, [pc, #404]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80044da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044de:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80044e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80044e4:	4b62      	ldr	r3, [pc, #392]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d10c      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80044f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	08db      	lsrs	r3, r3, #3
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	4a5f      	ldr	r2, [pc, #380]	@ (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8004502:	fa22 f303 	lsr.w	r3, r2, r3
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
 8004508:	e01e      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800450a:	4b59      	ldr	r3, [pc, #356]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004516:	d106      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8004518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451e:	d102      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004520:	4b54      	ldr	r3, [pc, #336]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8004522:	637b      	str	r3, [r7, #52]	@ 0x34
 8004524:	e010      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004526:	4b52      	ldr	r3, [pc, #328]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004532:	d106      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800453a:	d102      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800453c:	4b4e      	ldr	r3, [pc, #312]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004546:	e003      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800454e:	bf00      	nop
          }
        }
        break;
 8004550:	e187      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8004552:	4b47      	ldr	r3, [pc, #284]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8004554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004558:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800455c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004564:	f7fe f9cc 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8004568:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800456a:	e17a      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800456c:	4b40      	ldr	r3, [pc, #256]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004578:	d10b      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004580:	d107      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004582:	f107 0314 	add.w	r3, r7, #20
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fb52 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004590:	e045      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8004592:	4b37      	ldr	r3, [pc, #220]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800459a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800459e:	d10b      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a6:	d107      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fcab 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b6:	e032      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80045b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d10d      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045ca:	d109      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045cc:	4b28      	ldr	r3, [pc, #160]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80045de:	e01e      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80045e0:	4b23      	ldr	r3, [pc, #140]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ec:	d106      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80045ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f4:	d102      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80045f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80045f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fa:	e010      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80045fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004608:	d106      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004610:	d102      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8004612:	4b19      	ldr	r3, [pc, #100]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8004614:	637b      	str	r3, [r7, #52]	@ 0x34
 8004616:	e002      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800461c:	e121      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800461e:	e120      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004620:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8004622:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	2b03      	cmp	r3, #3
 8004630:	d861      	bhi.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8004632:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	08004649 	.word	0x08004649
 800463c:	08004651 	.word	0x08004651
 8004640:	08004661 	.word	0x08004661
 8004644:	08004685 	.word	0x08004685
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8004648:	f7fe f928 	bl	800289c <HAL_RCC_GetHCLKFreq>
 800464c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800464e:	e055      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004650:	f107 0320 	add.w	r3, r7, #32
 8004654:	4618      	mov	r0, r3
 8004656:	f7fe f97f 	bl	8002958 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800465e:	e04d      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fae3 	bl	8002c30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800466e:	e045      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8004670:	44020c00 	.word	0x44020c00
 8004674:	003d0900 	.word	0x003d0900
 8004678:	017d7840 	.word	0x017d7840
 800467c:	00bb8000 	.word	0x00bb8000
 8004680:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004684:	4b79      	ldr	r3, [pc, #484]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8004686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800468a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800468e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004690:	4b76      	ldr	r3, [pc, #472]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b02      	cmp	r3, #2
 800469a:	d10c      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046a2:	4b72      	ldr	r3, [pc, #456]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	4a70      	ldr	r2, [pc, #448]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 80046ae:	fa22 f303 	lsr.w	r3, r2, r3
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b4:	e01e      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046b6:	4b6d      	ldr	r3, [pc, #436]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c2:	d106      	bne.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ca:	d102      	bne.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80046cc:	4b69      	ldr	r3, [pc, #420]	@ (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 80046ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d0:	e010      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046d2:	4b66      	ldr	r3, [pc, #408]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046de:	d106      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80046e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046e6:	d102      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80046e8:	4b63      	ldr	r3, [pc, #396]	@ (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80046f4:	e002      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80046fa:	bf00      	nop
          }
        }
        break;
 80046fc:	e0b1      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80046fe:	4b5b      	ldr	r3, [pc, #364]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8004700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004704:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004708:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800470a:	4b58      	ldr	r3, [pc, #352]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800470c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d106      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004722:	637b      	str	r3, [r7, #52]	@ 0x34
 8004724:	e01f      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8004726:	4b51      	ldr	r3, [pc, #324]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8004728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800472c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004734:	d106      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	2b40      	cmp	r3, #64	@ 0x40
 800473a:	d103      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 800473c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
 8004742:	e010      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8004744:	4b49      	ldr	r3, [pc, #292]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800474c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004750:	d106      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	2b80      	cmp	r3, #128	@ 0x80
 8004756:	d103      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8004758:	f248 0312 	movw	r3, #32786	@ 0x8012
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
 800475e:	e002      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8004764:	e07d      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004766:	e07c      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004768:	4b40      	ldr	r3, [pc, #256]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800476a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800476e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004772:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004774:	4b3d      	ldr	r3, [pc, #244]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004780:	d105      	bne.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8004788:	4b3c      	ldr	r3, [pc, #240]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800478a:	637b      	str	r3, [r7, #52]	@ 0x34
 800478c:	e031      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800478e:	4b37      	ldr	r3, [pc, #220]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800479a:	d10a      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d107      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047a2:	f107 0320 	add.w	r3, r7, #32
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe f8d6 	bl	8002958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b0:	e01f      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80047b2:	4b2e      	ldr	r3, [pc, #184]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80047b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d106      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d103      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80047cc:	e011      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80047ce:	4b27      	ldr	r3, [pc, #156]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80047d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047dc:	d106      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	2b30      	cmp	r3, #48	@ 0x30
 80047e2:	d103      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 80047e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80047e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ea:	e002      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80047f0:	e037      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80047f2:	e036      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80047f4:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80047f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	2b10      	cmp	r3, #16
 8004804:	d107      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004806:	f107 0320 	add.w	r3, r7, #32
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe f8a4 	bl	8002958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004814:	e025      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8004816:	4b15      	ldr	r3, [pc, #84]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800481e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004822:	d10a      	bne.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	2b20      	cmp	r3, #32
 8004828:	d107      	bne.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fb6a 	bl	8002f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	637b      	str	r3, [r7, #52]	@ 0x34
 8004838:	e00f      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800483a:	4b0c      	ldr	r3, [pc, #48]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004846:	d105      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	2b30      	cmp	r3, #48	@ 0x30
 800484c:	d102      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800484e:	4b0b      	ldr	r3, [pc, #44]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8004850:	637b      	str	r3, [r7, #52]	@ 0x34
 8004852:	e002      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8004858:	e003      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800485a:	e002      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004860:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8004862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004864:	4618      	mov	r0, r3
 8004866:	373c      	adds	r7, #60	@ 0x3c
 8004868:	46bd      	mov	sp, r7
 800486a:	bd90      	pop	{r4, r7, pc}
 800486c:	44020c00 	.word	0x44020c00
 8004870:	03d09000 	.word	0x03d09000
 8004874:	003d0900 	.word	0x003d0900
 8004878:	017d7840 	.word	0x017d7840
 800487c:	02dc6c00 	.word	0x02dc6c00

08004880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e049      	b.n	8004926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc f92a 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f000 fe34 	bl	800552c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e07c      	b.n	8004a42 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a3a      	ldr	r2, [pc, #232]	@ (8004a50 <HAL_TIM_Base_Start_IT+0x120>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d04a      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a39      	ldr	r2, [pc, #228]	@ (8004a54 <HAL_TIM_Base_Start_IT+0x124>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d045      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497c:	d040      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004986:	d03b      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a32      	ldr	r2, [pc, #200]	@ (8004a58 <HAL_TIM_Base_Start_IT+0x128>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d036      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a31      	ldr	r2, [pc, #196]	@ (8004a5c <HAL_TIM_Base_Start_IT+0x12c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d031      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004a60 <HAL_TIM_Base_Start_IT+0x130>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d02c      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004a64 <HAL_TIM_Base_Start_IT+0x134>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d027      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004a68 <HAL_TIM_Base_Start_IT+0x138>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d022      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2b      	ldr	r2, [pc, #172]	@ (8004a6c <HAL_TIM_Base_Start_IT+0x13c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d01d      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a29      	ldr	r2, [pc, #164]	@ (8004a70 <HAL_TIM_Base_Start_IT+0x140>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d018      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a28      	ldr	r2, [pc, #160]	@ (8004a74 <HAL_TIM_Base_Start_IT+0x144>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a26      	ldr	r2, [pc, #152]	@ (8004a78 <HAL_TIM_Base_Start_IT+0x148>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00e      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a25      	ldr	r2, [pc, #148]	@ (8004a7c <HAL_TIM_Base_Start_IT+0x14c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d009      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a23      	ldr	r2, [pc, #140]	@ (8004a80 <HAL_TIM_Base_Start_IT+0x150>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xd0>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a22      	ldr	r2, [pc, #136]	@ (8004a84 <HAL_TIM_Base_Start_IT+0x154>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d115      	bne.n	8004a2c <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	4b20      	ldr	r3, [pc, #128]	@ (8004a88 <HAL_TIM_Base_Start_IT+0x158>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	d015      	beq.n	8004a3e <HAL_TIM_Base_Start_IT+0x10e>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a18:	d011      	beq.n	8004a3e <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	e008      	b.n	8004a3e <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e000      	b.n	8004a40 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	50012c00 	.word	0x50012c00
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	50000400 	.word	0x50000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	50000800 	.word	0x50000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	50000c00 	.word	0x50000c00
 8004a70:	40013400 	.word	0x40013400
 8004a74:	50013400 	.word	0x50013400
 8004a78:	40001800 	.word	0x40001800
 8004a7c:	50001800 	.word	0x50001800
 8004a80:	40014000 	.word	0x40014000
 8004a84:	50014000 	.word	0x50014000
 8004a88:	00010007 	.word	0x00010007

08004a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e049      	b.n	8004b32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f841 	bl	8004b3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 fd2e 	bl	800552c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_TIM_PWM_Start+0x24>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e03c      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d109      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x3e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	bf14      	ite	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	2300      	moveq	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	e02f      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d109      	bne.n	8004ba8 <HAL_TIM_PWM_Start+0x58>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e022      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b0c      	cmp	r3, #12
 8004bac:	d109      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x72>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e015      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d109      	bne.n	8004bdc <HAL_TIM_PWM_Start+0x8c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e008      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0ce      	b.n	8004d94 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xb6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c04:	e023      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_PWM_Start+0xc6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c14:	e01b      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_PWM_Start+0xd6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c24:	e013      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xe6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c34:	e00b      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_PWM_Start+0xf6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c44:	e003      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2201      	movs	r2, #1
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 f924 	bl	8005ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a4e      	ldr	r2, [pc, #312]	@ (8004d9c <HAL_TIM_PWM_Start+0x24c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8004da0 <HAL_TIM_PWM_Start+0x250>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a4b      	ldr	r2, [pc, #300]	@ (8004da4 <HAL_TIM_PWM_Start+0x254>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004da8 <HAL_TIM_PWM_Start+0x258>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a48      	ldr	r2, [pc, #288]	@ (8004dac <HAL_TIM_PWM_Start+0x25c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a47      	ldr	r2, [pc, #284]	@ (8004db0 <HAL_TIM_PWM_Start+0x260>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_TIM_PWM_Start+0x14c>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_TIM_PWM_Start+0x14e>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a39      	ldr	r2, [pc, #228]	@ (8004d9c <HAL_TIM_PWM_Start+0x24c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d04a      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a37      	ldr	r2, [pc, #220]	@ (8004da0 <HAL_TIM_PWM_Start+0x250>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d045      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cce:	d040      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd8:	d03b      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <HAL_TIM_PWM_Start+0x264>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d036      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a33      	ldr	r2, [pc, #204]	@ (8004db8 <HAL_TIM_PWM_Start+0x268>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d031      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a32      	ldr	r2, [pc, #200]	@ (8004dbc <HAL_TIM_PWM_Start+0x26c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d02c      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a30      	ldr	r2, [pc, #192]	@ (8004dc0 <HAL_TIM_PWM_Start+0x270>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d027      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc4 <HAL_TIM_PWM_Start+0x274>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d022      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <HAL_TIM_PWM_Start+0x278>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01d      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a22      	ldr	r2, [pc, #136]	@ (8004da4 <HAL_TIM_PWM_Start+0x254>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d018      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a20      	ldr	r2, [pc, #128]	@ (8004da8 <HAL_TIM_PWM_Start+0x258>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a27      	ldr	r2, [pc, #156]	@ (8004dcc <HAL_TIM_PWM_Start+0x27c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <HAL_TIM_PWM_Start+0x280>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1a      	ldr	r2, [pc, #104]	@ (8004dac <HAL_TIM_PWM_Start+0x25c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x202>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <HAL_TIM_PWM_Start+0x260>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d115      	bne.n	8004d7e <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd4 <HAL_TIM_PWM_Start+0x284>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b06      	cmp	r3, #6
 8004d62:	d015      	beq.n	8004d90 <HAL_TIM_PWM_Start+0x240>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d6a:	d011      	beq.n	8004d90 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	e008      	b.n	8004d90 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e000      	b.n	8004d92 <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	50012c00 	.word	0x50012c00
 8004da4:	40013400 	.word	0x40013400
 8004da8:	50013400 	.word	0x50013400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	50014000 	.word	0x50014000
 8004db4:	40000400 	.word	0x40000400
 8004db8:	50000400 	.word	0x50000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	50000800 	.word	0x50000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	50000c00 	.word	0x50000c00
 8004dcc:	40001800 	.word	0x40001800
 8004dd0:	50001800 	.word	0x50001800
 8004dd4:	00010007 	.word	0x00010007

08004dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d020      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0202 	mvn.w	r2, #2
 8004e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fb64 	bl	80054f0 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fb56 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fb67 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01b      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0204 	mvn.w	r2, #4
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fb3e 	bl	80054f0 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fb30 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fb41 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d020      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0208 	mvn.w	r2, #8
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fb18 	bl	80054f0 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fb0a 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb1b 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d020      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0210 	mvn.w	r2, #16
 8004ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 faf2 	bl	80054f0 <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fae4 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 faf5 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0201 	mvn.w	r2, #1
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fb fd8a 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 fa54 	bl	800641a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00c      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 fa4c 	bl	800642e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 faaf 	bl	8005518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00c      	beq.n	8004fde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f06f 0220 	mvn.w	r2, #32
 8004fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fa14 	bl	8006406 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00c      	beq.n	8005002 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 fa20 	bl	8006442 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f001 fa18 	bl	8006456 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00c      	beq.n	800504a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d007      	beq.n	800504a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f001 fa10 	bl	800646a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00c      	beq.n	800506e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 fa08 	bl	800647e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005092:	2302      	movs	r3, #2
 8005094:	e0ff      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b14      	cmp	r3, #20
 80050a2:	f200 80f0 	bhi.w	8005286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050a6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	08005101 	.word	0x08005101
 80050b0:	08005287 	.word	0x08005287
 80050b4:	08005287 	.word	0x08005287
 80050b8:	08005287 	.word	0x08005287
 80050bc:	08005141 	.word	0x08005141
 80050c0:	08005287 	.word	0x08005287
 80050c4:	08005287 	.word	0x08005287
 80050c8:	08005287 	.word	0x08005287
 80050cc:	08005183 	.word	0x08005183
 80050d0:	08005287 	.word	0x08005287
 80050d4:	08005287 	.word	0x08005287
 80050d8:	08005287 	.word	0x08005287
 80050dc:	080051c3 	.word	0x080051c3
 80050e0:	08005287 	.word	0x08005287
 80050e4:	08005287 	.word	0x08005287
 80050e8:	08005287 	.word	0x08005287
 80050ec:	08005205 	.word	0x08005205
 80050f0:	08005287 	.word	0x08005287
 80050f4:	08005287 	.word	0x08005287
 80050f8:	08005287 	.word	0x08005287
 80050fc:	08005245 	.word	0x08005245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fafa 	bl	8005700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	619a      	str	r2, [r3, #24]
      break;
 800513e:	e0a5      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb74 	bl	8005834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800515a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800516a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6999      	ldr	r1, [r3, #24]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
      break;
 8005180:	e084      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fbeb 	bl	8005964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0204 	bic.w	r2, r2, #4
 80051ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	61da      	str	r2, [r3, #28]
      break;
 80051c0:	e064      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fc61 	bl	8005a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69d9      	ldr	r1, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	61da      	str	r2, [r3, #28]
      break;
 8005202:	e043      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fcd8 	bl	8005bc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005242:	e023      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fd22 	bl	8005c94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800525e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800526e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005284:	e002      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
      break;
 800528a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop

080052a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIM_ConfigClockSource+0x1c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e0fe      	b.n	80054ba <HAL_TIM_ConfigClockSource+0x21a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80052da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052f8:	f000 80c9 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 80052fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005300:	f200 80ce 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005304:	4a6f      	ldr	r2, [pc, #444]	@ (80054c4 <HAL_TIM_ConfigClockSource+0x224>)
 8005306:	4293      	cmp	r3, r2
 8005308:	f000 80c1 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 800530c:	4a6d      	ldr	r2, [pc, #436]	@ (80054c4 <HAL_TIM_ConfigClockSource+0x224>)
 800530e:	4293      	cmp	r3, r2
 8005310:	f200 80c6 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005314:	4a6c      	ldr	r2, [pc, #432]	@ (80054c8 <HAL_TIM_ConfigClockSource+0x228>)
 8005316:	4293      	cmp	r3, r2
 8005318:	f000 80b9 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 800531c:	4a6a      	ldr	r2, [pc, #424]	@ (80054c8 <HAL_TIM_ConfigClockSource+0x228>)
 800531e:	4293      	cmp	r3, r2
 8005320:	f200 80be 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005324:	4a69      	ldr	r2, [pc, #420]	@ (80054cc <HAL_TIM_ConfigClockSource+0x22c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	f000 80b1 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 800532c:	4a67      	ldr	r2, [pc, #412]	@ (80054cc <HAL_TIM_ConfigClockSource+0x22c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	f200 80b6 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005334:	4a66      	ldr	r2, [pc, #408]	@ (80054d0 <HAL_TIM_ConfigClockSource+0x230>)
 8005336:	4293      	cmp	r3, r2
 8005338:	f000 80a9 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 800533c:	4a64      	ldr	r2, [pc, #400]	@ (80054d0 <HAL_TIM_ConfigClockSource+0x230>)
 800533e:	4293      	cmp	r3, r2
 8005340:	f200 80ae 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005344:	4a63      	ldr	r2, [pc, #396]	@ (80054d4 <HAL_TIM_ConfigClockSource+0x234>)
 8005346:	4293      	cmp	r3, r2
 8005348:	f000 80a1 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 800534c:	4a61      	ldr	r2, [pc, #388]	@ (80054d4 <HAL_TIM_ConfigClockSource+0x234>)
 800534e:	4293      	cmp	r3, r2
 8005350:	f200 80a6 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005354:	4a60      	ldr	r2, [pc, #384]	@ (80054d8 <HAL_TIM_ConfigClockSource+0x238>)
 8005356:	4293      	cmp	r3, r2
 8005358:	f000 8099 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 800535c:	4a5e      	ldr	r2, [pc, #376]	@ (80054d8 <HAL_TIM_ConfigClockSource+0x238>)
 800535e:	4293      	cmp	r3, r2
 8005360:	f200 809e 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005364:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005368:	f000 8091 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 800536c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005370:	f200 8096 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005374:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005378:	f000 8089 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005380:	f200 808e 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005388:	d03e      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	f200 8087 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005396:	f000 8086 	beq.w	80054a6 <HAL_TIM_ConfigClockSource+0x206>
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539e:	d87f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 80053a0:	2b70      	cmp	r3, #112	@ 0x70
 80053a2:	d01a      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x13a>
 80053a4:	2b70      	cmp	r3, #112	@ 0x70
 80053a6:	d87b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 80053a8:	2b60      	cmp	r3, #96	@ 0x60
 80053aa:	d050      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x1ae>
 80053ac:	2b60      	cmp	r3, #96	@ 0x60
 80053ae:	d877      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 80053b0:	2b50      	cmp	r3, #80	@ 0x50
 80053b2:	d03c      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x18e>
 80053b4:	2b50      	cmp	r3, #80	@ 0x50
 80053b6:	d873      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d058      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x1ce>
 80053bc:	2b40      	cmp	r3, #64	@ 0x40
 80053be:	d86f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 80053c0:	2b30      	cmp	r3, #48	@ 0x30
 80053c2:	d064      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 80053c4:	2b30      	cmp	r3, #48	@ 0x30
 80053c6:	d86b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d060      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d867      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x200>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d05c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d05a      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x1ee>
 80053d8:	e062      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ea:	f000 fd3b 	bl	8005e64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	609a      	str	r2, [r3, #8]
      break;
 8005406:	e04f      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	f000 fd24 	bl	8005e64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800542a:	609a      	str	r2, [r3, #8]
      break;
 800542c:	e03c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	461a      	mov	r2, r3
 800543c:	f000 fc96 	bl	8005d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2150      	movs	r1, #80	@ 0x50
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fcef 	bl	8005e2a <TIM_ITRx_SetConfig>
      break;
 800544c:	e02c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fcb5 	bl	8005dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2160      	movs	r1, #96	@ 0x60
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fcdf 	bl	8005e2a <TIM_ITRx_SetConfig>
      break;
 800546c:	e01c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fc76 	bl	8005d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2140      	movs	r1, #64	@ 0x40
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fccf 	bl	8005e2a <TIM_ITRx_SetConfig>
      break;
 800548c:	e00c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 fcc6 	bl	8005e2a <TIM_ITRx_SetConfig>
      break;
 800549e:	e003      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80054a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	00100070 	.word	0x00100070
 80054c8:	00100060 	.word	0x00100060
 80054cc:	00100050 	.word	0x00100050
 80054d0:	00100040 	.word	0x00100040
 80054d4:	00100030 	.word	0x00100030
 80054d8:	00100020 	.word	0x00100020

080054dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a62      	ldr	r2, [pc, #392]	@ (80056c8 <TIM_Base_SetConfig+0x19c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d02b      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a61      	ldr	r2, [pc, #388]	@ (80056cc <TIM_Base_SetConfig+0x1a0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d027      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005552:	d023      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800555a:	d01f      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a5c      	ldr	r2, [pc, #368]	@ (80056d0 <TIM_Base_SetConfig+0x1a4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d01b      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a5b      	ldr	r2, [pc, #364]	@ (80056d4 <TIM_Base_SetConfig+0x1a8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d017      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a5a      	ldr	r2, [pc, #360]	@ (80056d8 <TIM_Base_SetConfig+0x1ac>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a59      	ldr	r2, [pc, #356]	@ (80056dc <TIM_Base_SetConfig+0x1b0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a58      	ldr	r2, [pc, #352]	@ (80056e0 <TIM_Base_SetConfig+0x1b4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a57      	ldr	r2, [pc, #348]	@ (80056e4 <TIM_Base_SetConfig+0x1b8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a56      	ldr	r2, [pc, #344]	@ (80056e8 <TIM_Base_SetConfig+0x1bc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0x70>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a55      	ldr	r2, [pc, #340]	@ (80056ec <TIM_Base_SetConfig+0x1c0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a45      	ldr	r2, [pc, #276]	@ (80056c8 <TIM_Base_SetConfig+0x19c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d03b      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a44      	ldr	r2, [pc, #272]	@ (80056cc <TIM_Base_SetConfig+0x1a0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d037      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c4:	d033      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055cc:	d02f      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a3f      	ldr	r2, [pc, #252]	@ (80056d0 <TIM_Base_SetConfig+0x1a4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02b      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a3e      	ldr	r2, [pc, #248]	@ (80056d4 <TIM_Base_SetConfig+0x1a8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d027      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a3d      	ldr	r2, [pc, #244]	@ (80056d8 <TIM_Base_SetConfig+0x1ac>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d023      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a3c      	ldr	r2, [pc, #240]	@ (80056dc <TIM_Base_SetConfig+0x1b0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a3b      	ldr	r2, [pc, #236]	@ (80056e0 <TIM_Base_SetConfig+0x1b4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01b      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a3a      	ldr	r2, [pc, #232]	@ (80056e4 <TIM_Base_SetConfig+0x1b8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d017      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a39      	ldr	r2, [pc, #228]	@ (80056e8 <TIM_Base_SetConfig+0x1bc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a38      	ldr	r2, [pc, #224]	@ (80056ec <TIM_Base_SetConfig+0x1c0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00f      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a37      	ldr	r2, [pc, #220]	@ (80056f0 <TIM_Base_SetConfig+0x1c4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00b      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a36      	ldr	r2, [pc, #216]	@ (80056f4 <TIM_Base_SetConfig+0x1c8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a35      	ldr	r2, [pc, #212]	@ (80056f8 <TIM_Base_SetConfig+0x1cc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_Base_SetConfig+0x102>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a34      	ldr	r2, [pc, #208]	@ (80056fc <TIM_Base_SetConfig+0x1d0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d108      	bne.n	8005640 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a18      	ldr	r2, [pc, #96]	@ (80056c8 <TIM_Base_SetConfig+0x19c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <TIM_Base_SetConfig+0x168>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a17      	ldr	r2, [pc, #92]	@ (80056cc <TIM_Base_SetConfig+0x1a0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00f      	beq.n	8005694 <TIM_Base_SetConfig+0x168>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a1c      	ldr	r2, [pc, #112]	@ (80056e8 <TIM_Base_SetConfig+0x1bc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_Base_SetConfig+0x168>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a1b      	ldr	r2, [pc, #108]	@ (80056ec <TIM_Base_SetConfig+0x1c0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x168>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a1c      	ldr	r2, [pc, #112]	@ (80056f8 <TIM_Base_SetConfig+0x1cc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x168>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a1b      	ldr	r2, [pc, #108]	@ (80056fc <TIM_Base_SetConfig+0x1d0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d103      	bne.n	800569c <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d105      	bne.n	80056ba <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f023 0201 	bic.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	611a      	str	r2, [r3, #16]
  }
}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	50012c00 	.word	0x50012c00
 80056d0:	40000400 	.word	0x40000400
 80056d4:	50000400 	.word	0x50000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	50000800 	.word	0x50000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	50000c00 	.word	0x50000c00
 80056e8:	40013400 	.word	0x40013400
 80056ec:	50013400 	.word	0x50013400
 80056f0:	40001800 	.word	0x40001800
 80056f4:	50001800 	.word	0x50001800
 80056f8:	40014000 	.word	0x40014000
 80056fc:	50014000 	.word	0x50014000

08005700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f023 0201 	bic.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0303 	bic.w	r3, r3, #3
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 0302 	bic.w	r3, r3, #2
 800574c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a30      	ldr	r2, [pc, #192]	@ (800581c <TIM_OC1_SetConfig+0x11c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <TIM_OC1_SetConfig+0x88>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a2f      	ldr	r2, [pc, #188]	@ (8005820 <TIM_OC1_SetConfig+0x120>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00f      	beq.n	8005788 <TIM_OC1_SetConfig+0x88>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a2e      	ldr	r2, [pc, #184]	@ (8005824 <TIM_OC1_SetConfig+0x124>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00b      	beq.n	8005788 <TIM_OC1_SetConfig+0x88>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a2d      	ldr	r2, [pc, #180]	@ (8005828 <TIM_OC1_SetConfig+0x128>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d007      	beq.n	8005788 <TIM_OC1_SetConfig+0x88>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a2c      	ldr	r2, [pc, #176]	@ (800582c <TIM_OC1_SetConfig+0x12c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_OC1_SetConfig+0x88>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a2b      	ldr	r2, [pc, #172]	@ (8005830 <TIM_OC1_SetConfig+0x130>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d10c      	bne.n	80057a2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f023 0308 	bic.w	r3, r3, #8
 800578e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 0304 	bic.w	r3, r3, #4
 80057a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1d      	ldr	r2, [pc, #116]	@ (800581c <TIM_OC1_SetConfig+0x11c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <TIM_OC1_SetConfig+0xd2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005820 <TIM_OC1_SetConfig+0x120>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_OC1_SetConfig+0xd2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <TIM_OC1_SetConfig+0x124>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_OC1_SetConfig+0xd2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005828 <TIM_OC1_SetConfig+0x128>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_OC1_SetConfig+0xd2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a19      	ldr	r2, [pc, #100]	@ (800582c <TIM_OC1_SetConfig+0x12c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC1_SetConfig+0xd2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a18      	ldr	r2, [pc, #96]	@ (8005830 <TIM_OC1_SetConfig+0x130>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d111      	bne.n	80057f6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40012c00 	.word	0x40012c00
 8005820:	50012c00 	.word	0x50012c00
 8005824:	40013400 	.word	0x40013400
 8005828:	50013400 	.word	0x50013400
 800582c:	40014000 	.word	0x40014000
 8005830:	50014000 	.word	0x50014000

08005834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f023 0210 	bic.w	r2, r3, #16
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0320 	bic.w	r3, r3, #32
 8005882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a2e      	ldr	r2, [pc, #184]	@ (800594c <TIM_OC2_SetConfig+0x118>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_OC2_SetConfig+0x7c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a2d      	ldr	r2, [pc, #180]	@ (8005950 <TIM_OC2_SetConfig+0x11c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_OC2_SetConfig+0x7c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005954 <TIM_OC2_SetConfig+0x120>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_OC2_SetConfig+0x7c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005958 <TIM_OC2_SetConfig+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10d      	bne.n	80058cc <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a1f      	ldr	r2, [pc, #124]	@ (800594c <TIM_OC2_SetConfig+0x118>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <TIM_OC2_SetConfig+0xc8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005950 <TIM_OC2_SetConfig+0x11c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00f      	beq.n	80058fc <TIM_OC2_SetConfig+0xc8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <TIM_OC2_SetConfig+0x120>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00b      	beq.n	80058fc <TIM_OC2_SetConfig+0xc8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <TIM_OC2_SetConfig+0x124>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d007      	beq.n	80058fc <TIM_OC2_SetConfig+0xc8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a1b      	ldr	r2, [pc, #108]	@ (800595c <TIM_OC2_SetConfig+0x128>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_OC2_SetConfig+0xc8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005960 <TIM_OC2_SetConfig+0x12c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d113      	bne.n	8005924 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800590a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40012c00 	.word	0x40012c00
 8005950:	50012c00 	.word	0x50012c00
 8005954:	40013400 	.word	0x40013400
 8005958:	50013400 	.word	0x50013400
 800595c:	40014000 	.word	0x40014000
 8005960:	50014000 	.word	0x50014000

08005964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a78 <TIM_OC3_SetConfig+0x114>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_OC3_SetConfig+0x7a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	@ (8005a7c <TIM_OC3_SetConfig+0x118>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_OC3_SetConfig+0x7a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a80 <TIM_OC3_SetConfig+0x11c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC3_SetConfig+0x7a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a84 <TIM_OC3_SetConfig+0x120>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10d      	bne.n	80059fa <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a78 <TIM_OC3_SetConfig+0x114>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <TIM_OC3_SetConfig+0xc6>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1d      	ldr	r2, [pc, #116]	@ (8005a7c <TIM_OC3_SetConfig+0x118>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_OC3_SetConfig+0xc6>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005a80 <TIM_OC3_SetConfig+0x11c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_OC3_SetConfig+0xc6>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <TIM_OC3_SetConfig+0x120>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_OC3_SetConfig+0xc6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a88 <TIM_OC3_SetConfig+0x124>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_OC3_SetConfig+0xc6>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a19      	ldr	r2, [pc, #100]	@ (8005a8c <TIM_OC3_SetConfig+0x128>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d113      	bne.n	8005a52 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	50012c00 	.word	0x50012c00
 8005a80:	40013400 	.word	0x40013400
 8005a84:	50013400 	.word	0x50013400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	50014000 	.word	0x50014000

08005a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	031b      	lsls	r3, r3, #12
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba8 <TIM_OC4_SetConfig+0x118>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00b      	beq.n	8005b0c <TIM_OC4_SetConfig+0x7c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a2d      	ldr	r2, [pc, #180]	@ (8005bac <TIM_OC4_SetConfig+0x11c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_OC4_SetConfig+0x7c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb0 <TIM_OC4_SetConfig+0x120>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC4_SetConfig+0x7c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb4 <TIM_OC4_SetConfig+0x124>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10d      	bne.n	8005b28 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	031b      	lsls	r3, r3, #12
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <TIM_OC4_SetConfig+0x118>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <TIM_OC4_SetConfig+0xc8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	@ (8005bac <TIM_OC4_SetConfig+0x11c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00f      	beq.n	8005b58 <TIM_OC4_SetConfig+0xc8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb0 <TIM_OC4_SetConfig+0x120>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <TIM_OC4_SetConfig+0xc8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb4 <TIM_OC4_SetConfig+0x124>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <TIM_OC4_SetConfig+0xc8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb8 <TIM_OC4_SetConfig+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_OC4_SetConfig+0xc8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1a      	ldr	r2, [pc, #104]	@ (8005bbc <TIM_OC4_SetConfig+0x12c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d113      	bne.n	8005b80 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	019b      	lsls	r3, r3, #6
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	50012c00 	.word	0x50012c00
 8005bb0:	40013400 	.word	0x40013400
 8005bb4:	50013400 	.word	0x50013400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	50014000 	.word	0x50014000

08005bc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a19      	ldr	r2, [pc, #100]	@ (8005c7c <TIM_OC5_SetConfig+0xbc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <TIM_OC5_SetConfig+0x82>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a18      	ldr	r2, [pc, #96]	@ (8005c80 <TIM_OC5_SetConfig+0xc0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00f      	beq.n	8005c42 <TIM_OC5_SetConfig+0x82>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a17      	ldr	r2, [pc, #92]	@ (8005c84 <TIM_OC5_SetConfig+0xc4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <TIM_OC5_SetConfig+0x82>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a16      	ldr	r2, [pc, #88]	@ (8005c88 <TIM_OC5_SetConfig+0xc8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_OC5_SetConfig+0x82>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a15      	ldr	r2, [pc, #84]	@ (8005c8c <TIM_OC5_SetConfig+0xcc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC5_SetConfig+0x82>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a14      	ldr	r2, [pc, #80]	@ (8005c90 <TIM_OC5_SetConfig+0xd0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d109      	bne.n	8005c56 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	621a      	str	r2, [r3, #32]
}
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	50012c00 	.word	0x50012c00
 8005c84:	40013400 	.word	0x40013400
 8005c88:	50013400 	.word	0x50013400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	50014000 	.word	0x50014000

08005c94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	051b      	lsls	r3, r3, #20
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a1a      	ldr	r2, [pc, #104]	@ (8005d54 <TIM_OC6_SetConfig+0xc0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d013      	beq.n	8005d18 <TIM_OC6_SetConfig+0x84>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a19      	ldr	r2, [pc, #100]	@ (8005d58 <TIM_OC6_SetConfig+0xc4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00f      	beq.n	8005d18 <TIM_OC6_SetConfig+0x84>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a18      	ldr	r2, [pc, #96]	@ (8005d5c <TIM_OC6_SetConfig+0xc8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <TIM_OC6_SetConfig+0x84>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a17      	ldr	r2, [pc, #92]	@ (8005d60 <TIM_OC6_SetConfig+0xcc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d007      	beq.n	8005d18 <TIM_OC6_SetConfig+0x84>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a16      	ldr	r2, [pc, #88]	@ (8005d64 <TIM_OC6_SetConfig+0xd0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC6_SetConfig+0x84>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a15      	ldr	r2, [pc, #84]	@ (8005d68 <TIM_OC6_SetConfig+0xd4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d109      	bne.n	8005d2c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	50012c00 	.word	0x50012c00
 8005d5c:	40013400 	.word	0x40013400
 8005d60:	50013400 	.word	0x50013400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	50014000 	.word	0x50014000

08005d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f023 0201 	bic.w	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f023 030a 	bic.w	r3, r3, #10
 8005da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b087      	sub	sp, #28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f023 0210 	bic.w	r2, r3, #16
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	031b      	lsls	r3, r3, #12
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f043 0307 	orr.w	r3, r3, #7
 8005e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	021a      	lsls	r2, r3, #8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	609a      	str	r2, [r3, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	401a      	ands	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a1a      	ldr	r2, [r3, #32]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <HAL_TIMEx_PWMN_Start+0x24>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	bf14      	ite	ne
 8005f0c:	2301      	movne	r3, #1
 8005f0e:	2300      	moveq	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e022      	b.n	8005f5a <HAL_TIMEx_PWMN_Start+0x6a>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d109      	bne.n	8005f2e <HAL_TIMEx_PWMN_Start+0x3e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	bf14      	ite	ne
 8005f26:	2301      	movne	r3, #1
 8005f28:	2300      	moveq	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	e015      	b.n	8005f5a <HAL_TIMEx_PWMN_Start+0x6a>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d109      	bne.n	8005f48 <HAL_TIMEx_PWMN_Start+0x58>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	e008      	b.n	8005f5a <HAL_TIMEx_PWMN_Start+0x6a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e09b      	b.n	800609a <HAL_TIMEx_PWMN_Start+0x1aa>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d104      	bne.n	8005f72 <HAL_TIMEx_PWMN_Start+0x82>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f70:	e013      	b.n	8005f9a <HAL_TIMEx_PWMN_Start+0xaa>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d104      	bne.n	8005f82 <HAL_TIMEx_PWMN_Start+0x92>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f80:	e00b      	b.n	8005f9a <HAL_TIMEx_PWMN_Start+0xaa>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d104      	bne.n	8005f92 <HAL_TIMEx_PWMN_Start+0xa2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f90:	e003      	b.n	8005f9a <HAL_TIMEx_PWMN_Start+0xaa>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fa75 	bl	8006492 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a39      	ldr	r2, [pc, #228]	@ (80060a4 <HAL_TIMEx_PWMN_Start+0x1b4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d04a      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a38      	ldr	r2, [pc, #224]	@ (80060a8 <HAL_TIMEx_PWMN_Start+0x1b8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d045      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd4:	d040      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fde:	d03b      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a31      	ldr	r2, [pc, #196]	@ (80060ac <HAL_TIMEx_PWMN_Start+0x1bc>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d036      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a30      	ldr	r2, [pc, #192]	@ (80060b0 <HAL_TIMEx_PWMN_Start+0x1c0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d031      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80060b4 <HAL_TIMEx_PWMN_Start+0x1c4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02c      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a2d      	ldr	r2, [pc, #180]	@ (80060b8 <HAL_TIMEx_PWMN_Start+0x1c8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d027      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2b      	ldr	r2, [pc, #172]	@ (80060bc <HAL_TIMEx_PWMN_Start+0x1cc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2a      	ldr	r2, [pc, #168]	@ (80060c0 <HAL_TIMEx_PWMN_Start+0x1d0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d01d      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a28      	ldr	r2, [pc, #160]	@ (80060c4 <HAL_TIMEx_PWMN_Start+0x1d4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a27      	ldr	r2, [pc, #156]	@ (80060c8 <HAL_TIMEx_PWMN_Start+0x1d8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a25      	ldr	r2, [pc, #148]	@ (80060cc <HAL_TIMEx_PWMN_Start+0x1dc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a24      	ldr	r2, [pc, #144]	@ (80060d0 <HAL_TIMEx_PWMN_Start+0x1e0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a22      	ldr	r2, [pc, #136]	@ (80060d4 <HAL_TIMEx_PWMN_Start+0x1e4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIMEx_PWMN_Start+0x168>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	@ (80060d8 <HAL_TIMEx_PWMN_Start+0x1e8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d115      	bne.n	8006084 <HAL_TIMEx_PWMN_Start+0x194>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	4b1f      	ldr	r3, [pc, #124]	@ (80060dc <HAL_TIMEx_PWMN_Start+0x1ec>)
 8006060:	4013      	ands	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b06      	cmp	r3, #6
 8006068:	d015      	beq.n	8006096 <HAL_TIMEx_PWMN_Start+0x1a6>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006070:	d011      	beq.n	8006096 <HAL_TIMEx_PWMN_Start+0x1a6>
    {
      __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006082:	e008      	b.n	8006096 <HAL_TIMEx_PWMN_Start+0x1a6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	e000      	b.n	8006098 <HAL_TIMEx_PWMN_Start+0x1a8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	50012c00 	.word	0x50012c00
 80060ac:	40000400 	.word	0x40000400
 80060b0:	50000400 	.word	0x50000400
 80060b4:	40000800 	.word	0x40000800
 80060b8:	50000800 	.word	0x50000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	50000c00 	.word	0x50000c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	50013400 	.word	0x50013400
 80060cc:	40001800 	.word	0x40001800
 80060d0:	50001800 	.word	0x50001800
 80060d4:	40014000 	.word	0x40014000
 80060d8:	50014000 	.word	0x50014000
 80060dc:	00010007 	.word	0x00010007

080060e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e0a1      	b.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a4a      	ldr	r2, [pc, #296]	@ (8006248 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a49      	ldr	r2, [pc, #292]	@ (800624c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a47      	ldr	r2, [pc, #284]	@ (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a46      	ldr	r2, [pc, #280]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d108      	bne.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006146:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800615c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a34      	ldr	r2, [pc, #208]	@ (8006248 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d04a      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a33      	ldr	r2, [pc, #204]	@ (800624c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d045      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618c:	d040      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006196:	d03b      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2e      	ldr	r2, [pc, #184]	@ (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d036      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2d      	ldr	r2, [pc, #180]	@ (800625c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d031      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006260 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d02c      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006264 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d027      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a28      	ldr	r2, [pc, #160]	@ (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d022      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a27      	ldr	r2, [pc, #156]	@ (800626c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d01d      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d018      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a20      	ldr	r2, [pc, #128]	@ (8006270 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00e      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d009      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1d      	ldr	r2, [pc, #116]	@ (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d004      	beq.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1c      	ldr	r2, [pc, #112]	@ (800627c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10c      	bne.n	800622a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40012c00 	.word	0x40012c00
 800624c:	50012c00 	.word	0x50012c00
 8006250:	40013400 	.word	0x40013400
 8006254:	50013400 	.word	0x50013400
 8006258:	40000400 	.word	0x40000400
 800625c:	50000400 	.word	0x50000400
 8006260:	40000800 	.word	0x40000800
 8006264:	50000800 	.word	0x50000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	50000c00 	.word	0x50000c00
 8006270:	40001800 	.word	0x40001800
 8006274:	50001800 	.word	0x50001800
 8006278:	40014000 	.word	0x40014000
 800627c:	50014000 	.word	0x50014000

08006280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006298:	2302      	movs	r3, #2
 800629a:	e07d      	b.n	8006398 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1e      	ldr	r2, [pc, #120]	@ (80063a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00e      	beq.n	800634c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1d      	ldr	r2, [pc, #116]	@ (80063a8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d009      	beq.n	800634c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1b      	ldr	r2, [pc, #108]	@ (80063ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1a      	ldr	r2, [pc, #104]	@ (80063b0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d11c      	bne.n	8006386 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	051b      	lsls	r3, r3, #20
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40012c00 	.word	0x40012c00
 80063a8:	50012c00 	.word	0x50012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	50013400 	.word	0x50013400

080063b4 <HAL_TIMEx_ConfigAsymmetricalDeadTime>:
  * @param  FallingDeadtime Falling edge deadtime value
  * @note   This parameter can be a number between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigAsymmetricalDeadTime(TIM_HandleTypeDef *htim, uint32_t FallingDeadtime)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DEADTIME(FallingDeadtime));

  MODIFY_REG(htim->Instance->DTR2, TIM_DTR2_DTGF, FallingDeadtime);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIMEx_EnableAsymmetricalDeadTime>:
  * @brief  Enable asymmetrical deadtime
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableAsymmetricalDeadTime(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTAE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80063f6:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	2204      	movs	r2, #4
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1a      	ldr	r2, [r3, #32]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	43db      	mvns	r3, r3
 80064b4:	401a      	ands	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	431a      	orrs	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e042      	b.n	8006574 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f83b 	bl	800657c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2224      	movs	r2, #36	@ 0x24
 800650a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f9e0 	bl	80068ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f82f 	bl	8006590 <UART_SetConfig>
 8006532:	4603      	mov	r3, r0
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e01b      	b.n	8006574 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800654a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689a      	ldr	r2, [r3, #8]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800655a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa5f 	bl	8006a30 <UART_CheckIdleState>
 8006572:	4603      	mov	r3, r0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006594:	b094      	sub	sp, #80	@ 0x50
 8006596:	af00      	add	r7, sp, #0
 8006598:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80065a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4b83      	ldr	r3, [pc, #524]	@ (80067b4 <UART_SetConfig+0x224>)
 80065a6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	4313      	orrs	r3, r2
 80065be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	497c      	ldr	r1, [pc, #496]	@ (80067b8 <UART_SetConfig+0x228>)
 80065c8:	4019      	ands	r1, r3
 80065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e0:	68d9      	ldr	r1, [r3, #12]
 80065e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	ea40 0301 	orr.w	r3, r0, r1
 80065ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4b6f      	ldr	r3, [pc, #444]	@ (80067b4 <UART_SetConfig+0x224>)
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d009      	beq.n	8006610 <UART_SetConfig+0x80>
 80065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4b6e      	ldr	r3, [pc, #440]	@ (80067bc <UART_SetConfig+0x22c>)
 8006602:	429a      	cmp	r2, r3
 8006604:	d004      	beq.n	8006610 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006608:	6a1a      	ldr	r2, [r3, #32]
 800660a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800660c:	4313      	orrs	r3, r2
 800660e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800661a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006624:	430b      	orrs	r3, r1
 8006626:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662e:	f023 000f 	bic.w	r0, r3, #15
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	ea40 0301 	orr.w	r3, r0, r1
 800663e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4b5e      	ldr	r3, [pc, #376]	@ (80067c0 <UART_SetConfig+0x230>)
 8006646:	429a      	cmp	r2, r3
 8006648:	d102      	bne.n	8006650 <UART_SetConfig+0xc0>
 800664a:	2301      	movs	r3, #1
 800664c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800664e:	e032      	b.n	80066b6 <UART_SetConfig+0x126>
 8006650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b5b      	ldr	r3, [pc, #364]	@ (80067c4 <UART_SetConfig+0x234>)
 8006656:	429a      	cmp	r2, r3
 8006658:	d102      	bne.n	8006660 <UART_SetConfig+0xd0>
 800665a:	2302      	movs	r3, #2
 800665c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800665e:	e02a      	b.n	80066b6 <UART_SetConfig+0x126>
 8006660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b58      	ldr	r3, [pc, #352]	@ (80067c8 <UART_SetConfig+0x238>)
 8006666:	429a      	cmp	r2, r3
 8006668:	d102      	bne.n	8006670 <UART_SetConfig+0xe0>
 800666a:	2304      	movs	r3, #4
 800666c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800666e:	e022      	b.n	80066b6 <UART_SetConfig+0x126>
 8006670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	4b55      	ldr	r3, [pc, #340]	@ (80067cc <UART_SetConfig+0x23c>)
 8006676:	429a      	cmp	r2, r3
 8006678:	d102      	bne.n	8006680 <UART_SetConfig+0xf0>
 800667a:	2308      	movs	r3, #8
 800667c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800667e:	e01a      	b.n	80066b6 <UART_SetConfig+0x126>
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b52      	ldr	r3, [pc, #328]	@ (80067d0 <UART_SetConfig+0x240>)
 8006686:	429a      	cmp	r2, r3
 8006688:	d102      	bne.n	8006690 <UART_SetConfig+0x100>
 800668a:	2310      	movs	r3, #16
 800668c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800668e:	e012      	b.n	80066b6 <UART_SetConfig+0x126>
 8006690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	4b4f      	ldr	r3, [pc, #316]	@ (80067d4 <UART_SetConfig+0x244>)
 8006696:	429a      	cmp	r2, r3
 8006698:	d102      	bne.n	80066a0 <UART_SetConfig+0x110>
 800669a:	2320      	movs	r3, #32
 800669c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800669e:	e00a      	b.n	80066b6 <UART_SetConfig+0x126>
 80066a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	4b43      	ldr	r3, [pc, #268]	@ (80067b4 <UART_SetConfig+0x224>)
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d103      	bne.n	80066b2 <UART_SetConfig+0x122>
 80066aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066b0:	e001      	b.n	80066b6 <UART_SetConfig+0x126>
 80066b2:	2300      	movs	r3, #0
 80066b4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b3e      	ldr	r3, [pc, #248]	@ (80067b4 <UART_SetConfig+0x224>)
 80066bc:	429a      	cmp	r2, r3
 80066be:	d005      	beq.n	80066cc <UART_SetConfig+0x13c>
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b3d      	ldr	r3, [pc, #244]	@ (80067bc <UART_SetConfig+0x22c>)
 80066c6:	429a      	cmp	r2, r3
 80066c8:	f040 8088 	bne.w	80067dc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80066cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ce:	2200      	movs	r2, #0
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80066d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80066d8:	f7fc fd82 	bl	80031e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80066dc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80066de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80eb 	beq.w	80068bc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ea:	4a3b      	ldr	r2, [pc, #236]	@ (80067d8 <UART_SetConfig+0x248>)
 80066ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	4413      	add	r3, r2
 8006704:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006706:	429a      	cmp	r2, r3
 8006708:	d305      	bcc.n	8006716 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006712:	429a      	cmp	r2, r3
 8006714:	d903      	bls.n	800671e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800671c:	e048      	b.n	80067b0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800671e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006720:	2200      	movs	r2, #0
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	61fa      	str	r2, [r7, #28]
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	4a2b      	ldr	r2, [pc, #172]	@ (80067d8 <UART_SetConfig+0x248>)
 800672c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006730:	b29b      	uxth	r3, r3
 8006732:	2200      	movs	r2, #0
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	617a      	str	r2, [r7, #20]
 8006738:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800673c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006740:	f7f9 fda8 	bl	8000294 <__aeabi_uldivmod>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	020b      	lsls	r3, r1, #8
 8006756:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800675a:	0202      	lsls	r2, r0, #8
 800675c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800675e:	6849      	ldr	r1, [r1, #4]
 8006760:	0849      	lsrs	r1, r1, #1
 8006762:	2000      	movs	r0, #0
 8006764:	460c      	mov	r4, r1
 8006766:	4605      	mov	r5, r0
 8006768:	eb12 0804 	adds.w	r8, r2, r4
 800676c:	eb43 0905 	adc.w	r9, r3, r5
 8006770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	60bb      	str	r3, [r7, #8]
 8006778:	60fa      	str	r2, [r7, #12]
 800677a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800677e:	4640      	mov	r0, r8
 8006780:	4649      	mov	r1, r9
 8006782:	f7f9 fd87 	bl	8000294 <__aeabi_uldivmod>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4613      	mov	r3, r2
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800678e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006794:	d308      	bcc.n	80067a8 <UART_SetConfig+0x218>
 8006796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800679c:	d204      	bcs.n	80067a8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800679e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	e003      	b.n	80067b0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80067ae:	e085      	b.n	80068bc <UART_SetConfig+0x32c>
 80067b0:	e084      	b.n	80068bc <UART_SetConfig+0x32c>
 80067b2:	bf00      	nop
 80067b4:	44002400 	.word	0x44002400
 80067b8:	cfff69f3 	.word	0xcfff69f3
 80067bc:	54002400 	.word	0x54002400
 80067c0:	40013800 	.word	0x40013800
 80067c4:	40004400 	.word	0x40004400
 80067c8:	40004800 	.word	0x40004800
 80067cc:	40004c00 	.word	0x40004c00
 80067d0:	40005000 	.word	0x40005000
 80067d4:	40006400 	.word	0x40006400
 80067d8:	08007010 	.word	0x08007010
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e4:	d13c      	bne.n	8006860 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80067e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e8:	2200      	movs	r2, #0
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	607a      	str	r2, [r7, #4]
 80067ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067f2:	f7fc fcf5 	bl	80031e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80067f6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d05e      	beq.n	80068bc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006802:	4a39      	ldr	r2, [pc, #228]	@ (80068e8 <UART_SetConfig+0x358>)
 8006804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006808:	461a      	mov	r2, r3
 800680a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800680c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006810:	005a      	lsls	r2, r3, #1
 8006812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	441a      	add	r2, r3
 800681a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006826:	2b0f      	cmp	r3, #15
 8006828:	d916      	bls.n	8006858 <UART_SetConfig+0x2c8>
 800682a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006830:	d212      	bcs.n	8006858 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006834:	b29b      	uxth	r3, r3
 8006836:	f023 030f 	bic.w	r3, r3, #15
 800683a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800683c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	b29b      	uxth	r3, r3
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	b29a      	uxth	r2, r3
 8006848:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800684a:	4313      	orrs	r3, r2
 800684c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	e031      	b.n	80068bc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800685e:	e02d      	b.n	80068bc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006862:	2200      	movs	r2, #0
 8006864:	469a      	mov	sl, r3
 8006866:	4693      	mov	fp, r2
 8006868:	4650      	mov	r0, sl
 800686a:	4659      	mov	r1, fp
 800686c:	f7fc fcb8 	bl	80031e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006870:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d021      	beq.n	80068bc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687c:	4a1a      	ldr	r2, [pc, #104]	@ (80068e8 <UART_SetConfig+0x358>)
 800687e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006882:	461a      	mov	r2, r3
 8006884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006886:	fbb3 f2f2 	udiv	r2, r3, r2
 800688a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	441a      	add	r2, r3
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800689c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800689e:	2b0f      	cmp	r3, #15
 80068a0:	d909      	bls.n	80068b6 <UART_SetConfig+0x326>
 80068a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a8:	d205      	bcs.n	80068b6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60da      	str	r2, [r3, #12]
 80068b4:	e002      	b.n	80068bc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068be:	2201      	movs	r2, #1
 80068c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80068c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ce:	2200      	movs	r2, #0
 80068d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80068d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d4:	2200      	movs	r2, #0
 80068d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80068d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3750      	adds	r7, #80	@ 0x50
 80068e0:	46bd      	mov	sp, r7
 80068e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068e6:	bf00      	nop
 80068e8:	08007010 	.word	0x08007010

080068ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01a      	beq.n	8006a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ea:	d10a      	bne.n	8006a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]
  }
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b098      	sub	sp, #96	@ 0x60
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a40:	f7fa fc5c 	bl	80012fc <HAL_GetTick>
 8006a44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d12f      	bne.n	8006ab4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f88e 	bl	8006b84 <UART_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d022      	beq.n	8006ab4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e6      	bne.n	8006a6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e063      	b.n	8006b7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d149      	bne.n	8006b56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aca:	2200      	movs	r2, #0
 8006acc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f857 	bl	8006b84 <UART_WaitOnFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d03c      	beq.n	8006b56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006afc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e6      	bne.n	8006adc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b2e:	61fa      	str	r2, [r7, #28]
 8006b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	69b9      	ldr	r1, [r7, #24]
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e5      	bne.n	8006b0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e012      	b.n	8006b7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3758      	adds	r7, #88	@ 0x58
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	4613      	mov	r3, r2
 8006b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b94:	e04f      	b.n	8006c36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b9c:	d04b      	beq.n	8006c36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9e:	f7fa fbad 	bl	80012fc <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e04e      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d037      	beq.n	8006c36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b80      	cmp	r3, #128	@ 0x80
 8006bca:	d034      	beq.n	8006c36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b40      	cmp	r3, #64	@ 0x40
 8006bd0:	d031      	beq.n	8006c36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d110      	bne.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2208      	movs	r2, #8
 8006be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f838 	bl	8006c5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e029      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c10:	d111      	bne.n	8006c36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 f81e 	bl	8006c5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e00f      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	bf0c      	ite	eq
 8006c46:	2301      	moveq	r3, #1
 8006c48:	2300      	movne	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d0a0      	beq.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b095      	sub	sp, #84	@ 0x54
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e6      	bne.n	8006c66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e3      	bne.n	8006c98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d118      	bne.n	8006d0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f023 0310 	bic.w	r3, r3, #16
 8006cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6979      	ldr	r1, [r7, #20]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	613b      	str	r3, [r7, #16]
   return(result);
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e6      	bne.n	8006cd8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d1e:	bf00      	nop
 8006d20:	3754      	adds	r7, #84	@ 0x54
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <memset>:
 8006d2a:	4402      	add	r2, r0
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d100      	bne.n	8006d34 <memset+0xa>
 8006d32:	4770      	bx	lr
 8006d34:	f803 1b01 	strb.w	r1, [r3], #1
 8006d38:	e7f9      	b.n	8006d2e <memset+0x4>
	...

08006d3c <__libc_init_array>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006d74 <__libc_init_array+0x38>)
 8006d40:	2600      	movs	r6, #0
 8006d42:	4c0d      	ldr	r4, [pc, #52]	@ (8006d78 <__libc_init_array+0x3c>)
 8006d44:	1b64      	subs	r4, r4, r5
 8006d46:	10a4      	asrs	r4, r4, #2
 8006d48:	42a6      	cmp	r6, r4
 8006d4a:	d109      	bne.n	8006d60 <__libc_init_array+0x24>
 8006d4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d7c <__libc_init_array+0x40>)
 8006d4e:	2600      	movs	r6, #0
 8006d50:	4c0b      	ldr	r4, [pc, #44]	@ (8006d80 <__libc_init_array+0x44>)
 8006d52:	f000 f817 	bl	8006d84 <_init>
 8006d56:	1b64      	subs	r4, r4, r5
 8006d58:	10a4      	asrs	r4, r4, #2
 8006d5a:	42a6      	cmp	r6, r4
 8006d5c:	d105      	bne.n	8006d6a <__libc_init_array+0x2e>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d64:	3601      	adds	r6, #1
 8006d66:	4798      	blx	r3
 8006d68:	e7ee      	b.n	8006d48 <__libc_init_array+0xc>
 8006d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6e:	3601      	adds	r6, #1
 8006d70:	4798      	blx	r3
 8006d72:	e7f2      	b.n	8006d5a <__libc_init_array+0x1e>
 8006d74:	08007030 	.word	0x08007030
 8006d78:	08007030 	.word	0x08007030
 8006d7c:	08007030 	.word	0x08007030
 8006d80:	08007034 	.word	0x08007034

08006d84 <_init>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr

08006d90 <_fini>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr
