
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cec  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08009f40  08009f40  0000af40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1cc  0800a1cc  0000c020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a1cc  0800a1cc  0000b1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1d4  0800a1d4  0000c020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d4  0800a1d4  0000b1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1d8  0800a1d8  0000b1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800a1dc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000020  0800a1fc  0000c020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  0800a1fc  0000c1f4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e63  00000000  00000000  0000c056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d9  00000000  00000000  00025eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00028698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101b  00000000  00000000  00029b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d83c  00000000  00000000  0002ab53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177d3  00000000  00000000  0005838f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d41b  00000000  00000000  0006fb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019cf7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a8c  00000000  00000000  0019cfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001a2a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	20000020 	.word	0x20000020
 8000270:	00000000 	.word	0x00000000
 8000274:	08009f28 	.word	0x08009f28

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000024 	.word	0x20000024
 8000290:	08009f28 	.word	0x08009f28

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a8:	f000 b9b0 	b.w	800060c <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ca:	4688      	mov	r8, r1
 80002cc:	4604      	mov	r4, r0
 80002ce:	468e      	mov	lr, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14a      	bne.n	800036a <__udivmoddi4+0xa6>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4617      	mov	r7, r2
 80002d8:	d95f      	bls.n	800039a <__udivmoddi4+0xd6>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	b14e      	cbz	r6, 80002f4 <__udivmoddi4+0x30>
 80002e0:	f1c6 0320 	rsb	r3, r6, #32
 80002e4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	40b4      	lsls	r4, r6
 80002ec:	fa20 f303 	lsr.w	r3, r0, r3
 80002f0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f8:	fa1f fc87 	uxth.w	ip, r7
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fbbe f1f8 	udiv	r1, lr, r8
 8000302:	fb08 ee11 	mls	lr, r8, r1, lr
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x5e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x5c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 8154 	bhi.w	80005c8 <__udivmoddi4+0x304>
 8000320:	4601      	mov	r1, r0
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	b2a2      	uxth	r2, r4
 8000326:	fbb3 f0f8 	udiv	r0, r3, r8
 800032a:	fb08 3310 	mls	r3, r8, r0, r3
 800032e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000332:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000336:	4594      	cmp	ip, r2
 8000338:	d90b      	bls.n	8000352 <__udivmoddi4+0x8e>
 800033a:	18ba      	adds	r2, r7, r2
 800033c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000340:	bf2c      	ite	cs
 8000342:	2401      	movcs	r4, #1
 8000344:	2400      	movcc	r4, #0
 8000346:	4594      	cmp	ip, r2
 8000348:	d902      	bls.n	8000350 <__udivmoddi4+0x8c>
 800034a:	2c00      	cmp	r4, #0
 800034c:	f000 813f 	beq.w	80005ce <__udivmoddi4+0x30a>
 8000350:	4618      	mov	r0, r3
 8000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000356:	eba2 020c 	sub.w	r2, r2, ip
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa2>
 800035e:	40f2      	lsrs	r2, r6
 8000360:	2300      	movs	r3, #0
 8000362:	e9c5 2300 	strd	r2, r3, [r5]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xb6>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb0>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa2>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d14e      	bne.n	8000420 <__udivmoddi4+0x15c>
 8000382:	4543      	cmp	r3, r8
 8000384:	f0c0 8112 	bcc.w	80005ac <__udivmoddi4+0x2e8>
 8000388:	4282      	cmp	r2, r0
 800038a:	f240 810f 	bls.w	80005ac <__udivmoddi4+0x2e8>
 800038e:	4608      	mov	r0, r1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e8      	beq.n	8000366 <__udivmoddi4+0xa2>
 8000394:	e9c5 4e00 	strd	r4, lr, [r5]
 8000398:	e7e5      	b.n	8000366 <__udivmoddi4+0xa2>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f000 80ac 	beq.w	80004f8 <__udivmoddi4+0x234>
 80003a0:	fab2 f682 	clz	r6, r2
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	f040 80bb 	bne.w	8000520 <__udivmoddi4+0x25c>
 80003aa:	1a8b      	subs	r3, r1, r2
 80003ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b0:	b2bc      	uxth	r4, r7
 80003b2:	2101      	movs	r1, #1
 80003b4:	0c02      	lsrs	r2, r0, #16
 80003b6:	b280      	uxth	r0, r0
 80003b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003c4:	fb04 f20c 	mul.w	r2, r4, ip
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d90e      	bls.n	80003ea <__udivmoddi4+0x126>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d2:	bf2c      	ite	cs
 80003d4:	f04f 0901 	movcs.w	r9, #1
 80003d8:	f04f 0900 	movcc.w	r9, #0
 80003dc:	429a      	cmp	r2, r3
 80003de:	d903      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003e0:	f1b9 0f00 	cmp.w	r9, #0
 80003e4:	f000 80ec 	beq.w	80005c0 <__udivmoddi4+0x2fc>
 80003e8:	46c4      	mov	ip, r8
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003f4:	fb04 f408 	mul.w	r4, r4, r8
 80003f8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003fc:	4294      	cmp	r4, r2
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x154>
 8000400:	18ba      	adds	r2, r7, r2
 8000402:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000406:	bf2c      	ite	cs
 8000408:	2001      	movcs	r0, #1
 800040a:	2000      	movcc	r0, #0
 800040c:	4294      	cmp	r4, r2
 800040e:	d902      	bls.n	8000416 <__udivmoddi4+0x152>
 8000410:	2800      	cmp	r0, #0
 8000412:	f000 80d1 	beq.w	80005b8 <__udivmoddi4+0x2f4>
 8000416:	4698      	mov	r8, r3
 8000418:	1b12      	subs	r2, r2, r4
 800041a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800041e:	e79d      	b.n	800035c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa08 f401 	lsl.w	r4, r8, r1
 800042a:	fa00 f901 	lsl.w	r9, r0, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa28 f806 	lsr.w	r8, r8, r6
 8000436:	408a      	lsls	r2, r1
 8000438:	431f      	orrs	r7, r3
 800043a:	fa20 f306 	lsr.w	r3, r0, r6
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	4323      	orrs	r3, r4
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fbb8 fef0 	udiv	lr, r8, r0
 800044c:	fb00 881e 	mls	r8, r0, lr, r8
 8000450:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000454:	fb0e f80c 	mul.w	r8, lr, ip
 8000458:	45a0      	cmp	r8, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b6>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a0      	cmp	r8, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b4>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 80b8 	beq.w	80005e8 <__udivmoddi4+0x324>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fa1f f883 	uxth.w	r8, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d90e      	bls.n	80004b4 <__udivmoddi4+0x1f0>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800049c:	bf2c      	ite	cs
 800049e:	f04f 0801 	movcs.w	r8, #1
 80004a2:	f04f 0800 	movcc.w	r8, #0
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d903      	bls.n	80004b2 <__udivmoddi4+0x1ee>
 80004aa:	f1b8 0f00 	cmp.w	r8, #0
 80004ae:	f000 809f 	beq.w	80005f0 <__udivmoddi4+0x32c>
 80004b2:	4603      	mov	r3, r0
 80004b4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b8:	eba4 040c 	sub.w	r4, r4, ip
 80004bc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c0:	4564      	cmp	r4, ip
 80004c2:	4673      	mov	r3, lr
 80004c4:	46e0      	mov	r8, ip
 80004c6:	d302      	bcc.n	80004ce <__udivmoddi4+0x20a>
 80004c8:	d107      	bne.n	80004da <__udivmoddi4+0x216>
 80004ca:	45f1      	cmp	r9, lr
 80004cc:	d205      	bcs.n	80004da <__udivmoddi4+0x216>
 80004ce:	ebbe 0302 	subs.w	r3, lr, r2
 80004d2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	46e0      	mov	r8, ip
 80004da:	b15d      	cbz	r5, 80004f4 <__udivmoddi4+0x230>
 80004dc:	ebb9 0203 	subs.w	r2, r9, r3
 80004e0:	eb64 0408 	sbc.w	r4, r4, r8
 80004e4:	fa04 f606 	lsl.w	r6, r4, r6
 80004e8:	fa22 f301 	lsr.w	r3, r2, r1
 80004ec:	40cc      	lsrs	r4, r1
 80004ee:	431e      	orrs	r6, r3
 80004f0:	e9c5 6400 	strd	r6, r4, [r5]
 80004f4:	2100      	movs	r1, #0
 80004f6:	e736      	b.n	8000366 <__udivmoddi4+0xa2>
 80004f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	4614      	mov	r4, r2
 8000500:	b280      	uxth	r0, r0
 8000502:	4696      	mov	lr, r2
 8000504:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000508:	2620      	movs	r6, #32
 800050a:	4690      	mov	r8, r2
 800050c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000510:	4610      	mov	r0, r2
 8000512:	fbb1 f1f2 	udiv	r1, r1, r2
 8000516:	eba3 0308 	sub.w	r3, r3, r8
 800051a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051e:	e74b      	b.n	80003b8 <__udivmoddi4+0xf4>
 8000520:	40b7      	lsls	r7, r6
 8000522:	f1c6 0320 	rsb	r3, r6, #32
 8000526:	fa01 f206 	lsl.w	r2, r1, r6
 800052a:	fa21 f803 	lsr.w	r8, r1, r3
 800052e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000532:	fa20 f303 	lsr.w	r3, r0, r3
 8000536:	b2bc      	uxth	r4, r7
 8000538:	40b0      	lsls	r0, r6
 800053a:	4313      	orrs	r3, r2
 800053c:	0c02      	lsrs	r2, r0, #16
 800053e:	0c19      	lsrs	r1, r3, #16
 8000540:	b280      	uxth	r0, r0
 8000542:	fbb8 f9fe 	udiv	r9, r8, lr
 8000546:	fb0e 8819 	mls	r8, lr, r9, r8
 800054a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	4588      	cmp	r8, r1
 8000554:	d951      	bls.n	80005fa <__udivmoddi4+0x336>
 8000556:	1879      	adds	r1, r7, r1
 8000558:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 800055c:	bf2c      	ite	cs
 800055e:	f04f 0a01 	movcs.w	sl, #1
 8000562:	f04f 0a00 	movcc.w	sl, #0
 8000566:	4588      	cmp	r8, r1
 8000568:	d902      	bls.n	8000570 <__udivmoddi4+0x2ac>
 800056a:	f1ba 0f00 	cmp.w	sl, #0
 800056e:	d031      	beq.n	80005d4 <__udivmoddi4+0x310>
 8000570:	eba1 0108 	sub.w	r1, r1, r8
 8000574:	fbb1 f9fe 	udiv	r9, r1, lr
 8000578:	fb09 f804 	mul.w	r8, r9, r4
 800057c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000580:	b29b      	uxth	r3, r3
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	4543      	cmp	r3, r8
 8000588:	d235      	bcs.n	80005f6 <__udivmoddi4+0x332>
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000590:	bf2c      	ite	cs
 8000592:	f04f 0a01 	movcs.w	sl, #1
 8000596:	f04f 0a00 	movcc.w	sl, #0
 800059a:	4543      	cmp	r3, r8
 800059c:	d2bb      	bcs.n	8000516 <__udivmoddi4+0x252>
 800059e:	f1ba 0f00 	cmp.w	sl, #0
 80005a2:	d1b8      	bne.n	8000516 <__udivmoddi4+0x252>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e7b4      	b.n	8000516 <__udivmoddi4+0x252>
 80005ac:	1a84      	subs	r4, r0, r2
 80005ae:	eb68 0203 	sbc.w	r2, r8, r3
 80005b2:	2001      	movs	r0, #1
 80005b4:	4696      	mov	lr, r2
 80005b6:	e6eb      	b.n	8000390 <__udivmoddi4+0xcc>
 80005b8:	443a      	add	r2, r7
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	e72b      	b.n	8000418 <__udivmoddi4+0x154>
 80005c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c4:	443b      	add	r3, r7
 80005c6:	e710      	b.n	80003ea <__udivmoddi4+0x126>
 80005c8:	3902      	subs	r1, #2
 80005ca:	443b      	add	r3, r7
 80005cc:	e6a9      	b.n	8000322 <__udivmoddi4+0x5e>
 80005ce:	443a      	add	r2, r7
 80005d0:	3802      	subs	r0, #2
 80005d2:	e6be      	b.n	8000352 <__udivmoddi4+0x8e>
 80005d4:	eba7 0808 	sub.w	r8, r7, r8
 80005d8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005dc:	4441      	add	r1, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c9      	b.n	800057c <__udivmoddi4+0x2b8>
 80005e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e744      	b.n	800047a <__udivmoddi4+0x1b6>
 80005f0:	3b02      	subs	r3, #2
 80005f2:	443c      	add	r4, r7
 80005f4:	e75e      	b.n	80004b4 <__udivmoddi4+0x1f0>
 80005f6:	4649      	mov	r1, r9
 80005f8:	e78d      	b.n	8000516 <__udivmoddi4+0x252>
 80005fa:	eba1 0108 	sub.w	r1, r1, r8
 80005fe:	46cc      	mov	ip, r9
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7b8      	b.n	800057c <__udivmoddi4+0x2b8>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fec0 	bl	8001398 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f870 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 fa36 	bl	8000a8c <MX_GPIO_Init>
  MX_TIM6_Init();
 8000620:	f000 f9fe 	bl	8000a20 <MX_TIM6_Init>
  MX_TIM1_Init();
 8000624:	f000 f92c 	bl	8000880 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000628:	f000 f8c8 	bl	80007bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800062c:	217f      	movs	r1, #127	@ 0x7f
 800062e:	482d      	ldr	r0, [pc, #180]	@ (80006e4 <main+0xd4>)
 8000630:	f002 fbd8 	bl	8002de4 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000634:	482c      	ldr	r0, [pc, #176]	@ (80006e8 <main+0xd8>)
 8000636:	f007 fa4d 	bl	8007ad4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fd0c 	bl	8001058 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000640:	2101      	movs	r1, #1
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fd4c 	bl	80010e0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000648:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <main+0xdc>)
 800064a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000650:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <main+0xdc>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000656:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <main+0xdc>)
 8000658:	2200      	movs	r2, #0
 800065a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <main+0xdc>)
 800065e:	2200      	movs	r2, #0
 8000660:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000662:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <main+0xdc>)
 8000664:	2200      	movs	r2, #0
 8000666:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000668:	4920      	ldr	r1, [pc, #128]	@ (80006ec <main+0xdc>)
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fdd2 	bl	8001214 <BSP_COM_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <main+0x6a>
  {
    Error_Handler();
 8000676:	f000 fabf 	bl	8000bf8 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800067a:	2100      	movs	r1, #0
 800067c:	481c      	ldr	r0, [pc, #112]	@ (80006f0 <main+0xe0>)
 800067e:	f007 fb39 	bl	8007cf4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000682:	2104      	movs	r1, #4
 8000684:	481a      	ldr	r0, [pc, #104]	@ (80006f0 <main+0xe0>)
 8000686:	f007 fb35 	bl	8007cf4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800068a:	2108      	movs	r1, #8
 800068c:	4818      	ldr	r0, [pc, #96]	@ (80006f0 <main+0xe0>)
 800068e:	f007 fb31 	bl	8007cf4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000692:	2100      	movs	r1, #0
 8000694:	4816      	ldr	r0, [pc, #88]	@ (80006f0 <main+0xe0>)
 8000696:	f008 fcfd 	bl	8009094 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800069a:	2104      	movs	r1, #4
 800069c:	4814      	ldr	r0, [pc, #80]	@ (80006f0 <main+0xe0>)
 800069e:	f008 fcf9 	bl	8009094 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006a2:	2108      	movs	r1, #8
 80006a4:	4812      	ldr	r0, [pc, #72]	@ (80006f0 <main+0xe0>)
 80006a6:	f008 fcf5 	bl	8009094 <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <main+0xd8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68da      	ldr	r2, [r3, #12]
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <main+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f042 0201 	orr.w	r2, r2, #1
 80006b8:	60da      	str	r2, [r3, #12]

  HAL_ADC_Start_IT(&hadc1);
 80006ba:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <main+0xd4>)
 80006bc:	f001 fb0a 	bl	8001cd4 <HAL_ADC_Start_IT>

  while (1)
  {
	  if(AD_RES > 1024)
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <main+0xe4>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006c8:	d905      	bls.n	80006d6 <main+0xc6>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2120      	movs	r1, #32
 80006ce:	480a      	ldr	r0, [pc, #40]	@ (80006f8 <main+0xe8>)
 80006d0:	f002 ff92 	bl	80035f8 <HAL_GPIO_WritePin>
 80006d4:	e7f4      	b.n	80006c0 <main+0xb0>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2120      	movs	r1, #32
 80006da:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <main+0xe8>)
 80006dc:	f002 ff8c 	bl	80035f8 <HAL_GPIO_WritePin>
	  if(AD_RES > 1024)
 80006e0:	e7ee      	b.n	80006c0 <main+0xb0>
 80006e2:	bf00      	nop
 80006e4:	2000004c 	.word	0x2000004c
 80006e8:	20000100 	.word	0x20000100
 80006ec:	2000003c 	.word	0x2000003c
 80006f0:	200000b4 	.word	0x200000b4
 80006f4:	2000014e 	.word	0x2000014e
 80006f8:	42020000 	.word	0x42020000

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	@ 0x70
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2250      	movs	r2, #80	@ 0x50
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f009 fbdf 	bl	8009ece <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <SystemClock_Config+0xb8>)
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <SystemClock_Config+0xb8>)
 8000728:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800072c:	6113      	str	r3, [r2, #16]
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <SystemClock_Config+0xb8>)
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800073a:	bf00      	nop
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <SystemClock_Config+0xb8>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	2b08      	cmp	r3, #8
 8000746:	d1f9      	bne.n	800073c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000750:	2308      	movs	r3, #8
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2340      	movs	r3, #64	@ 0x40
 8000756:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f002 ff61 	bl	8003628 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800076c:	f000 fa44 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	231f      	movs	r3, #31
 8000772:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2101      	movs	r1, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fb82 	bl	8003e98 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800079a:	f000 fa2d 	bl	8000bf8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <SystemClock_Config+0xbc>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <SystemClock_Config+0xbc>)
 80007a4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3770      	adds	r7, #112	@ 0x70
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	44020800 	.word	0x44020800
 80007b8:	40022000 	.word	0x40022000

080007bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c2:	463b      	mov	r3, r7
 80007c4:	2220      	movs	r2, #32
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f009 fb80 	bl	8009ece <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <MX_ADC1_Init+0xbc>)
 80007d0:	4a2a      	ldr	r2, [pc, #168]	@ (800087c <MX_ADC1_Init+0xc0>)
 80007d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d4:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <MX_ADC1_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <MX_ADC1_Init+0xbc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e0:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <MX_ADC1_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <MX_ADC1_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <MX_ADC1_Init+0xbc>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <MX_ADC1_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_ADC1_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_ADC1_Init+0xbc>)
 8000800:	2201      	movs	r2, #1
 8000802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_ADC1_Init+0xbc>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_ADC1_Init+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_ADC1_Init+0xbc>)
 8000814:	2200      	movs	r2, #0
 8000816:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_ADC1_Init+0xbc>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_ADC1_Init+0xbc>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_ADC1_Init+0xbc>)
 8000828:	2200      	movs	r2, #0
 800082a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_ADC1_Init+0xbc>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000834:	4810      	ldr	r0, [pc, #64]	@ (8000878 <MX_ADC1_Init+0xbc>)
 8000836:	f001 f8f9 	bl	8001a2c <HAL_ADC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000840:	f000 f9da 	bl	8000bf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000844:	2301      	movs	r3, #1
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000848:	2306      	movs	r3, #6
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000850:	237f      	movs	r3, #127	@ 0x7f
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000854:	2304      	movs	r3, #4
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_ADC1_Init+0xbc>)
 8000862:	f001 fda1 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800086c:	f000 f9c4 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000004c 	.word	0x2000004c
 800087c:	42028000 	.word	0x42028000

08000880 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09c      	sub	sp, #112	@ 0x70
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2234      	movs	r2, #52	@ 0x34
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f009 fb07 	bl	8009ece <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c0:	4b55      	ldr	r3, [pc, #340]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80008c2:	4a56      	ldr	r2, [pc, #344]	@ (8000a1c <MX_TIM1_Init+0x19c>)
 80008c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 80008c6:	4b54      	ldr	r3, [pc, #336]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80008cc:	4b52      	ldr	r3, [pc, #328]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80008ce:	2260      	movs	r2, #96	@ 0x60
 80008d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600;
 80008d2:	4b51      	ldr	r3, [pc, #324]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80008d4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80008d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b4f      	ldr	r3, [pc, #316]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ec:	484a      	ldr	r0, [pc, #296]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80008ee:	f007 f899 	bl	8007a24 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 f97e 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000906:	4619      	mov	r1, r3
 8000908:	4843      	ldr	r0, [pc, #268]	@ (8000a18 <MX_TIM1_Init+0x198>)
 800090a:	f007 fd9b 	bl	8008444 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000914:	f000 f970 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000918:	483f      	ldr	r0, [pc, #252]	@ (8000a18 <MX_TIM1_Init+0x198>)
 800091a:	f007 f989 	bl	8007c30 <HAL_TIM_PWM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000924:	f000 f968 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000934:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000938:	4619      	mov	r1, r3
 800093a:	4837      	ldr	r0, [pc, #220]	@ (8000a18 <MX_TIM1_Init+0x198>)
 800093c:	f008 fca2 	bl	8009284 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000946:	f000 f957 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094a:	2360      	movs	r3, #96	@ 0x60
 800094c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000956:	2300      	movs	r3, #0
 8000958:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000966:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	482a      	ldr	r0, [pc, #168]	@ (8000a18 <MX_TIM1_Init+0x198>)
 8000970:	f007 fc54 	bl	800821c <HAL_TIM_PWM_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800097a:	f000 f93d 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800097e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000982:	2204      	movs	r2, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <MX_TIM1_Init+0x198>)
 8000988:	f007 fc48 	bl	800821c <HAL_TIM_PWM_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000992:	f000 f931 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000996:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800099a:	2208      	movs	r2, #8
 800099c:	4619      	mov	r1, r3
 800099e:	481e      	ldr	r0, [pc, #120]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80009a0:	f007 fc3c 	bl	800821c <HAL_TIM_PWM_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80009aa:	f000 f925 	bl	8000bf8 <Error_Handler>
  }
  HAL_TIMEx_ConfigAsymmetricalDeadTime(&htim1, 75);
 80009ae:	214b      	movs	r1, #75	@ 0x4b
 80009b0:	4819      	ldr	r0, [pc, #100]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80009b2:	f008 fdd1 	bl	8009558 <HAL_TIMEx_ConfigAsymmetricalDeadTime>
  HAL_TIMEx_EnableAsymmetricalDeadTime(&htim1);
 80009b6:	4818      	ldr	r0, [pc, #96]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80009b8:	f008 fde4 	bl	8009584 <HAL_TIMEx_EnableAsymmetricalDeadTime>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 75;
 80009c8:	234b      	movs	r3, #75	@ 0x4b
 80009ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <MX_TIM1_Init+0x198>)
 80009fa:	f008 fd13 	bl	8009424 <HAL_TIMEx_ConfigBreakDeadTime>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000a04:	f000 f8f8 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <MX_TIM1_Init+0x198>)
 8000a0a:	f000 f9d7 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 8000a0e:	bf00      	nop
 8000a10:	3770      	adds	r7, #112	@ 0x70
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000b4 	.word	0x200000b4
 8000a1c:	40012c00 	.word	0x40012c00

08000a20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_TIM6_Init+0x64>)
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <MX_TIM6_Init+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <MX_TIM6_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_TIM6_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9143;
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <MX_TIM6_Init+0x64>)
 8000a44:	f242 32b7 	movw	r2, #9143	@ 0x23b7
 8000a48:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_TIM6_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <MX_TIM6_Init+0x64>)
 8000a52:	f006 ffe7 	bl	8007a24 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a5c:	f000 f8cc 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_TIM6_Init+0x64>)
 8000a6e:	f008 fc09 	bl	8009284 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a78:	f000 f8be 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000100 	.word	0x20000100
 8000a88:	40001000 	.word	0x40001000

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa8:	4a23      	ldr	r2, [pc, #140]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_GPIO_Init+0xac>)
 8000af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000afc:	2310      	movs	r3, #16
 8000afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <MX_GPIO_Init+0xb0>)
 8000b10:	f002 fc14 	bl	800333c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b14:	2320      	movs	r3, #32
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // Claim PA5 (user LED)
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_GPIO_Init+0xb4>)
 8000b2c:	f002 fc06 	bl	800333c <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	44020c00 	.word	0x44020c00
 8000b3c:	42020800 	.word	0x42020800
 8000b40:	42020000 	.word	0x42020000

08000b44 <HAL_ADC_ConvCpltCallback>:
{
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	AD_RES = HAL_ADC_GetValue(&hadc1);
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b4e:	f001 f9ef 	bl	8001f30 <HAL_ADC_GetValue>
 8000b52:	4603      	mov	r3, r0
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <HAL_ADC_ConvCpltCallback+0x24>)
 8000b58:	801a      	strh	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000004c 	.word	0x2000004c
 8000b68:	2000014e 	.word	0x2000014e

08000b6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    if(htim == &htim6)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a1a      	ldr	r2, [pc, #104]	@ (8000be0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d12b      	bne.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x68>
    {
    	//toggleUserLed(); // just for debug, check on PA5
        lookup_index++;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b86:	801a      	strh	r2, [r3, #0]
        if(lookup_index >= lookup_size)
 8000b88:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	2264      	movs	r2, #100	@ 0x64
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d302      	bcc.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x2c>
        {
            lookup_index = 0;
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	801a      	strh	r2, [r3, #0]
        }

        uint16_t c1 = lookup1[lookup_index];
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ba0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ba4:	81fb      	strh	r3, [r7, #14]
        uint16_t c2 = lookup2[lookup_index];
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bb2:	81bb      	strh	r3, [r7, #12]
        uint16_t c3 = lookup3[lookup_index];
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bc0:	817b      	strh	r3, [r7, #10]

        TIM1->CCR2 = c1;
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bc4:	89fb      	ldrh	r3, [r7, #14]
 8000bc6:	6393      	str	r3, [r2, #56]	@ 0x38
        TIM1->CCR3 = c2;
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	63d3      	str	r3, [r2, #60]	@ 0x3c
        TIM1->CCR1 = c3; // channel 1 is third output phase
 8000bce:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bd0:	897b      	ldrh	r3, [r7, #10]
 8000bd2:	6353      	str	r3, [r2, #52]	@ 0x34
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	20000100 	.word	0x20000100
 8000be4:	2000014c 	.word	0x2000014c
 8000be8:	08009f40 	.word	0x08009f40
 8000bec:	0800a008 	.word	0x0800a008
 8000bf0:	0800a0d0 	.word	0x0800a0d0
 8000bf4:	40012c00 	.word	0x40012c00

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b0be      	sub	sp, #248	@ 0xf8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	22d0      	movs	r2, #208	@ 0xd0
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f009 f94a 	bl	8009ece <memset>
  if(hadc->Instance==ADC1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a27      	ldr	r2, [pc, #156]	@ (8000cdc <HAL_ADC_MspInit+0xc8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d147      	bne.n	8000cd4 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c44:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fc5e 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_ADC_MspInit+0x56>
    {
      Error_Handler();
 8000c66:	f7ff ffc7 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP0
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000ca6:	2381      	movs	r3, #129	@ 0x81
 8000ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cac:	2303      	movs	r3, #3
 8000cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <HAL_ADC_MspInit+0xd0>)
 8000cc0:	f002 fb3c 	bl	800333c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2025      	movs	r0, #37	@ 0x25
 8000cca:	f002 f9d7 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000cce:	2025      	movs	r0, #37	@ 0x25
 8000cd0:	f002 f9ee 	bl	80030b0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cd4:	bf00      	nop
 8000cd6:	37f8      	adds	r7, #248	@ 0xf8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	42028000 	.word	0x42028000
 8000ce0:	44020c00 	.word	0x44020c00
 8000ce4:	42020000 	.word	0x42020000

08000ce8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a29      	ldr	r2, [pc, #164]	@ (8000dac <HAL_TIM_Base_MspInit+0xc4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12f      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d10:	4a27      	ldr	r2, [pc, #156]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d16:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d1a:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2e:	4a20      	ldr	r2, [pc, #128]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d38:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <HAL_TIM_Base_MspInit+0xcc>)
 8000d64:	f002 faea 	bl	800333c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d68:	e01b      	b.n	8000da2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM6)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <HAL_TIM_Base_MspInit+0xd0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d116      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d7c:	f043 0310 	orr.w	r3, r3, #16
 8000d80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_TIM_Base_MspInit+0xc8>)
 8000d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2031      	movs	r0, #49	@ 0x31
 8000d98:	f002 f970 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000d9c:	2031      	movs	r0, #49	@ 0x31
 8000d9e:	f002 f987 	bl	80030b0 <HAL_NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40012c00 	.word	0x40012c00
 8000db0:	44020c00 	.word	0x44020c00
 8000db4:	42020000 	.word	0x42020000
 8000db8:	40001000 	.word	0x40001000

08000dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a23      	ldr	r2, [pc, #140]	@ (8000e68 <HAL_TIM_MspPostInit+0xac>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d13f      	bne.n	8000e5e <HAL_TIM_MspPostInit+0xa2>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <HAL_TIM_MspPostInit+0xb0>)
 8000de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de4:	4a21      	ldr	r2, [pc, #132]	@ (8000e6c <HAL_TIM_MspPostInit+0xb0>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dee:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <HAL_TIM_MspPostInit+0xb0>)
 8000df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <HAL_TIM_MspPostInit+0xb0>)
 8000dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e02:	4a1a      	ldr	r2, [pc, #104]	@ (8000e6c <HAL_TIM_MspPostInit+0xb0>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <HAL_TIM_MspPostInit+0xb0>)
 8000e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8000e1a:	f242 0303 	movw	r3, #8195	@ 0x2003
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <HAL_TIM_MspPostInit+0xb4>)
 8000e38:	f002 fa80 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e3c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <HAL_TIM_MspPostInit+0xb8>)
 8000e5a:	f002 fa6f 	bl	800333c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40012c00 	.word	0x40012c00
 8000e6c:	44020c00 	.word	0x44020c00
 8000e70:	42020400 	.word	0x42020400
 8000e74:	42020000 	.word	0x42020000

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <UsageFault_Handler+0x4>

08000ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ece:	f000 fb01 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f978 	bl	80011d0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <ADC1_IRQHandler+0x10>)
 8000eea:	f001 f82f 	bl	8001f4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000004c 	.word	0x2000004c

08000ef8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <TIM6_IRQHandler+0x10>)
 8000efe:	f007 f83d 	bl	8007f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000100 	.word	0x20000100

08000f0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f12:	4b35      	ldr	r3, [pc, #212]	@ (8000fe8 <SystemInit+0xdc>)
 8000f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f18:	4a33      	ldr	r2, [pc, #204]	@ (8000fe8 <SystemInit+0xdc>)
 8000f1a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000f22:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <SystemInit+0xe0>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f28:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <SystemInit+0xe0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fec <SystemInit+0xe0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000f34:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <SystemInit+0xe0>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	492c      	ldr	r1, [pc, #176]	@ (8000fec <SystemInit+0xe0>)
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <SystemInit+0xe4>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f40:	4b2a      	ldr	r3, [pc, #168]	@ (8000fec <SystemInit+0xe0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000f46:	4b29      	ldr	r3, [pc, #164]	@ (8000fec <SystemInit+0xe0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <SystemInit+0xe0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <SystemInit+0xe0>)
 8000f54:	4a27      	ldr	r2, [pc, #156]	@ (8000ff4 <SystemInit+0xe8>)
 8000f56:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000f58:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <SystemInit+0xe0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <SystemInit+0xe0>)
 8000f60:	4a24      	ldr	r2, [pc, #144]	@ (8000ff4 <SystemInit+0xe8>)
 8000f62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000f64:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <SystemInit+0xe0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <SystemInit+0xe0>)
 8000f6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <SystemInit+0xe8>)
 8000f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <SystemInit+0xe0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <SystemInit+0xe0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <SystemInit+0xe0>)
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <SystemInit+0xe0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f88:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <SystemInit+0xdc>)
 8000f8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f8e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <SystemInit+0xec>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000f98:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000fa0:	d003      	beq.n	8000faa <SystemInit+0x9e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000fa8:	d117      	bne.n	8000fda <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <SystemInit+0xec>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <SystemInit+0xec>)
 8000fb8:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <SystemInit+0xf0>)
 8000fba:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <SystemInit+0xec>)
 8000fbe:	4a10      	ldr	r2, [pc, #64]	@ (8001000 <SystemInit+0xf4>)
 8000fc0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <SystemInit+0xec>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff8 <SystemInit+0xec>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <SystemInit+0xec>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a09      	ldr	r2, [pc, #36]	@ (8000ff8 <SystemInit+0xec>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	61d3      	str	r3, [r2, #28]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	44020c00 	.word	0x44020c00
 8000ff0:	eae2eae3 	.word	0xeae2eae3
 8000ff4:	01010280 	.word	0x01010280
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	08192a3b 	.word	0x08192a3b
 8001000:	4c5d6e7f 	.word	0x4c5d6e7f

08001004 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001004:	480d      	ldr	r0, [pc, #52]	@ (800103c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001006:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001008:	f7ff ff80 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <LoopForever+0x6>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	@ (8001044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <LoopForever+0xe>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	@ (8001050 <LoopForever+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001032:	f008 ff55 	bl	8009ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001036:	f7ff faeb 	bl	8000610 <main>

0800103a <LoopForever>:

LoopForever:
    b LoopForever
 800103a:	e7fe      	b.n	800103a <LoopForever>
  ldr   r0, =_estack
 800103c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001048:	0800a1dc 	.word	0x0800a1dc
  ldr r2, =_sbss
 800104c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001050:	200001f4 	.word	0x200001f4

08001054 <ADC2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC2_IRQHandler>
	...

08001058 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800106c:	f06f 0301 	mvn.w	r3, #1
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
 8001072:	e02c      	b.n	80010ce <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10e      	bne.n	8001098 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <BSP_LED_Init+0x80>)
 800107c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001080:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <BSP_LED_Init+0x80>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <BSP_LED_Init+0x80>)
 800108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001098:	2320      	movs	r3, #32
 800109a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <BSP_LED_Init+0x84>)
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	f107 0210 	add.w	r2, r7, #16
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f940 	bl	800333c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <BSP_LED_Init+0x84>)
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	2120      	movs	r1, #32
 80010c6:	2200      	movs	r2, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 fa95 	bl	80035f8 <HAL_GPIO_WritePin>
  }

  return ret;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3728      	adds	r7, #40	@ 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	44020c00 	.word	0x44020c00
 80010dc:	20000008 	.word	0x20000008

080010e0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80010f0:	4b30      	ldr	r3, [pc, #192]	@ (80011b4 <BSP_PB_Init+0xd4>)
 80010f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f6:	4a2f      	ldr	r2, [pc, #188]	@ (80011b4 <BSP_PB_Init+0xd4>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001100:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <BSP_PB_Init+0xd4>)
 8001102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800110e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001112:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10c      	bne.n	800113c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4a23      	ldr	r2, [pc, #140]	@ (80011b8 <BSP_PB_Init+0xd8>)
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	f107 020c 	add.w	r2, r7, #12
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f901 	bl	800333c <HAL_GPIO_Init>
 800113a:	e036      	b.n	80011aa <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800113c:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <BSP_PB_Init+0xdc>)
 800113e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <BSP_PB_Init+0xd8>)
 8001144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f002 f8f4 	bl	800333c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <BSP_PB_Init+0xe0>)
 8001160:	441a      	add	r2, r3
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4917      	ldr	r1, [pc, #92]	@ (80011c4 <BSP_PB_Init+0xe4>)
 8001166:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800116a:	4619      	mov	r1, r3
 800116c:	4610      	mov	r0, r2
 800116e:	f002 f889 	bl	8003284 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <BSP_PB_Init+0xe0>)
 800117e:	1898      	adds	r0, r3, r2
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4a11      	ldr	r2, [pc, #68]	@ (80011c8 <BSP_PB_Init+0xe8>)
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	461a      	mov	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f002 f84e 	bl	800322c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001190:	2018      	movs	r0, #24
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <BSP_PB_Init+0xec>)
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	f001 ff6d 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80011a2:	2318      	movs	r3, #24
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 ff83 	bl	80030b0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	44020c00 	.word	0x44020c00
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	10110000 	.word	0x10110000
 80011c0:	20000150 	.word	0x20000150
 80011c4:	0800a1b0 	.word	0x0800a1b0
 80011c8:	20000010 	.word	0x20000010
 80011cc:	20000014 	.word	0x20000014

080011d0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <BSP_PB_IRQHandler+0x28>)
 80011e6:	4413      	add	r3, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f85f 	bl	80032ac <HAL_EXTI_IRQHandler>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000150 	.word	0x20000150

080011fc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800122a:	f06f 0301 	mvn.w	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e018      	b.n	8001264 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2294      	movs	r2, #148	@ 0x94
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <BSP_COM_Init+0x5c>)
 800123c:	4413      	add	r3, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f854 	bl	80012ec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2294      	movs	r2, #148	@ 0x94
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <BSP_COM_Init+0x5c>)
 800124e:	4413      	add	r3, r2
 8001250:	6839      	ldr	r1, [r7, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f80e 	bl	8001274 <MX_USART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800125e:	f06f 0303 	mvn.w	r3, #3
 8001262:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001264:	68fb      	ldr	r3, [r7, #12]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000015c 	.word	0x2000015c

08001274 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_USART_Init+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	220c      	movs	r2, #12
 8001292:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	895b      	ldrh	r3, [r3, #10]
 8001298:	461a      	mov	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	461a      	mov	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	899b      	ldrh	r3, [r3, #12]
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012c0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f008 f9d9 	bl	8009680 <HAL_UART_Init>
 80012ce:	4603      	mov	r3, r0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000004 	.word	0x20000004

080012dc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ff8b 	bl	80011fc <BSP_PB_Callback>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80012f4:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <COM1_MspInit+0xa4>)
 80012f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fa:	4a25      	ldr	r2, [pc, #148]	@ (8001390 <COM1_MspInit+0xa4>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <COM1_MspInit+0xa4>)
 8001306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <COM1_MspInit+0xa4>)
 8001314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001318:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <COM1_MspInit+0xa4>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <COM1_MspInit+0xa4>)
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <COM1_MspInit+0xa4>)
 8001332:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001336:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <COM1_MspInit+0xa4>)
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <COM1_MspInit+0xa4>)
 8001342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800134e:	2304      	movs	r3, #4
 8001350:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001356:	2302      	movs	r3, #2
 8001358:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800135a:	2301      	movs	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	480a      	ldr	r0, [pc, #40]	@ (8001394 <COM1_MspInit+0xa8>)
 800136a:	f001 ffe7 	bl	800333c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 800136e:	2308      	movs	r3, #8
 8001370:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001376:	2307      	movs	r3, #7
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4804      	ldr	r0, [pc, #16]	@ (8001394 <COM1_MspInit+0xa8>)
 8001382:	f001 ffdb 	bl	800333c <HAL_GPIO_Init>
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	@ 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	44020c00 	.word	0x44020c00
 8001394:	42020000 	.word	0x42020000

08001398 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f001 fe62 	bl	8003066 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80013a2:	f002 ff31 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <HAL_Init+0x44>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	490b      	ldr	r1, [pc, #44]	@ (80013e0 <HAL_Init+0x48>)
 80013b2:	5ccb      	ldrb	r3, [r1, r3]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <HAL_Init+0x4c>)
 80013ba:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013bc:	2004      	movs	r0, #4
 80013be:	f001 fea7 	bl	8003110 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c2:	200f      	movs	r0, #15
 80013c4:	f000 f810 	bl	80013e8 <HAL_InitTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e002      	b.n	80013d8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013d2:	f7ff fc17 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	44020c00 	.word	0x44020c00
 80013e0:	0800a198 	.word	0x0800a198
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80013f4:	4b33      	ldr	r3, [pc, #204]	@ (80014c4 <HAL_InitTick+0xdc>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e05c      	b.n	80014ba <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001400:	4b31      	ldr	r3, [pc, #196]	@ (80014c8 <HAL_InitTick+0xe0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b04      	cmp	r3, #4
 800140a:	d10c      	bne.n	8001426 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <HAL_InitTick+0xe4>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b2c      	ldr	r3, [pc, #176]	@ (80014c4 <HAL_InitTick+0xdc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e037      	b.n	8001496 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001426:	f001 fecb 	bl	80031c0 <HAL_SYSTICK_GetCLKSourceConfig>
 800142a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d023      	beq.n	800147a <HAL_InitTick+0x92>
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d82d      	bhi.n	8001494 <HAL_InitTick+0xac>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_InitTick+0x5e>
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d00d      	beq.n	8001460 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001444:	e026      	b.n	8001494 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <HAL_InitTick+0xe4>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <HAL_InitTick+0xdc>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001454:	fbb3 f3f1 	udiv	r3, r3, r1
 8001458:	fbb2 f3f3 	udiv	r3, r2, r3
 800145c:	60fb      	str	r3, [r7, #12]
        break;
 800145e:	e01a      	b.n	8001496 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_InitTick+0xdc>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146a:	fbb3 f3f2 	udiv	r3, r3, r2
 800146e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	60fb      	str	r3, [r7, #12]
        break;
 8001478:	e00d      	b.n	8001496 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0xdc>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001484:	fbb3 f3f2 	udiv	r3, r3, r2
 8001488:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001490:	60fb      	str	r3, [r7, #12]
        break;
 8001492:	e000      	b.n	8001496 <HAL_InitTick+0xae>
        break;
 8001494:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f001 fe18 	bl	80030cc <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e009      	b.n	80014ba <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a6:	2200      	movs	r2, #0
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ae:	f001 fde5 	bl	800307c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_InitTick+0xe8>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000001c 	.word	0x2000001c
 80014c8:	e000e010 	.word	0xe000e010
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000018 	.word	0x20000018

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	@ (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	2000001c 	.word	0x2000001c
 80014f8:	200001f0 	.word	0x200001f0

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200001f0 	.word	0x200001f0

08001514 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80015aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80015ae:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	42028000 	.word	0x42028000

080015c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3360      	adds	r3, #96	@ 0x60
 80015da:	461a      	mov	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <LL_ADC_SetOffset+0x44>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	4313      	orrs	r3, r2
 80015f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001600:	bf00      	nop
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	03fff000 	.word	0x03fff000

08001610 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3360      	adds	r3, #96	@ 0x60
 800161e:	461a      	mov	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3360      	adds	r3, #96	@ 0x60
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001672:	b480      	push	{r7}
 8001674:	b087      	sub	sp, #28
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3360      	adds	r3, #96	@ 0x60
 8001682:	461a      	mov	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	431a      	orrs	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3360      	adds	r3, #96	@ 0x60
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016d2:	bf00      	nop
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	615a      	str	r2, [r3, #20]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800172a:	b480      	push	{r7}
 800172c:	b087      	sub	sp, #28
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3330      	adds	r3, #48	@ 0x30
 800173a:	461a      	mov	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	4413      	add	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	211f      	movs	r1, #31
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	401a      	ands	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0e9b      	lsrs	r3, r3, #26
 8001762:	f003 011f 	and.w	r1, r3, #31
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3314      	adds	r3, #20
 80017b8:	461a      	mov	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	0e5b      	lsrs	r3, r3, #25
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	0d1b      	lsrs	r3, r3, #20
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2107      	movs	r1, #7
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	0d1b      	lsrs	r3, r3, #20
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0318 	and.w	r3, r3, #24
 8001822:	4908      	ldr	r1, [pc, #32]	@ (8001844 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001824:	40d9      	lsrs	r1, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	400b      	ands	r3, r1
 800182a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800182e:	431a      	orrs	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	000fffff 	.word	0x000fffff

08001848 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 031f 	and.w	r3, r3, #31
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001890:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6093      	str	r3, [r2, #8]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018b8:	d101      	bne.n	80018be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80018dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001908:	d101      	bne.n	800190e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800192c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001958:	f043 0202 	orr.w	r2, r3, #2
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <LL_ADC_IsEnabled+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_ADC_IsEnabled+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d101      	bne.n	80019aa <LL_ADC_IsDisableOngoing+0x18>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_ADC_IsDisableOngoing+0x1a>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019cc:	f043 0204 	orr.w	r2, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d101      	bne.n	80019f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d101      	bne.n	8001a1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e136      	b.n	8001cb4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff f8dd 	bl	8000c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff19 	bl	80018a4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff feff 	bl	8001880 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff34 	bl	80018f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d115      	bne.n	8001abe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff18 	bl	80018cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a9c:	4b87      	ldr	r3, [pc, #540]	@ (8001cbc <HAL_ADC_Init+0x290>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	4a87      	ldr	r2, [pc, #540]	@ (8001cc0 <HAL_ADC_Init+0x294>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	3301      	adds	r3, #1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f9      	bne.n	8001ab2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff16 	bl	80018f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff76 	bl	80019e0 <LL_ADC_REG_IsConversionOngoing>
 8001af4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 80cf 	bne.w	8001ca2 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 80cb 	bne.w	8001ca2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b14:	f043 0202 	orr.w	r2, r3, #2
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff23 	bl	800196c <LL_ADC_IsEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d110      	bne.n	8001b4e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b2c:	4865      	ldr	r0, [pc, #404]	@ (8001cc4 <HAL_ADC_Init+0x298>)
 8001b2e:	f7ff ff1d 	bl	800196c <LL_ADC_IsEnabled>
 8001b32:	4604      	mov	r4, r0
 8001b34:	4864      	ldr	r0, [pc, #400]	@ (8001cc8 <HAL_ADC_Init+0x29c>)
 8001b36:	f7ff ff19 	bl	800196c <LL_ADC_IsEnabled>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4323      	orrs	r3, r4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4619      	mov	r1, r3
 8001b48:	4860      	ldr	r0, [pc, #384]	@ (8001ccc <HAL_ADC_Init+0x2a0>)
 8001b4a:	f7ff fce3 	bl	8001514 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7e5b      	ldrb	r3, [r3, #25]
 8001b52:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b58:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b5e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b64:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	3b01      	subs	r3, #1
 8001b82:	045b      	lsls	r3, r3, #17
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b96:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	4b48      	ldr	r3, [pc, #288]	@ (8001cd0 <HAL_ADC_Init+0x2a4>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	69b9      	ldr	r1, [r7, #24]
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff16 	bl	8001a06 <LL_ADC_INJ_IsConversionOngoing>
 8001bda:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d13d      	bne.n	8001c5e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d13a      	bne.n	8001c5e <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7e1b      	ldrb	r3, [r3, #24]
 8001bec:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bf4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c04:	f023 0302 	bic.w	r3, r3, #2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	69b9      	ldr	r1, [r7, #24]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d118      	bne.n	8001c4e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c26:	f023 0304 	bic.w	r3, r3, #4
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	611a      	str	r2, [r3, #16]
 8001c4c:	e007      	b.n	8001c5e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10c      	bne.n	8001c80 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6c:	f023 010f 	bic.w	r1, r3, #15
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	1e5a      	subs	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c7e:	e007      	b.n	8001c90 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 020f 	bic.w	r2, r2, #15
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	f023 0303 	bic.w	r3, r3, #3
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ca0:	e007      	b.n	8001cb2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	f043 0210 	orr.w	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3724      	adds	r7, #36	@ 0x24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	053e2d63 	.word	0x053e2d63
 8001cc4:	42028000 	.word	0x42028000
 8001cc8:	42028100 	.word	0x42028100
 8001ccc:	42028300 	.word	0x42028300
 8001cd0:	fff04007 	.word	0xfff04007

08001cd4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cdc:	4891      	ldr	r0, [pc, #580]	@ (8001f24 <HAL_ADC_Start_IT+0x250>)
 8001cde:	f7ff fdb3 	bl	8001848 <LL_ADC_GetMultimode>
 8001ce2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fe79 	bl	80019e0 <LL_ADC_REG_IsConversionOngoing>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8110 	bne.w	8001f16 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_Start_IT+0x30>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e10b      	b.n	8001f1c <HAL_ADC_Start_IT+0x248>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 ff5b 	bl	8002bc8 <ADC_Enable>
 8001d12:	4603      	mov	r3, r0
 8001d14:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 80f7 	bne.w	8001f0c <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a7c      	ldr	r2, [pc, #496]	@ (8001f28 <HAL_ADC_Start_IT+0x254>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_Start_IT+0x6e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e000      	b.n	8001d44 <HAL_ADC_Start_IT+0x70>
 8001d42:	4b7a      	ldr	r3, [pc, #488]	@ (8001f2c <HAL_ADC_Start_IT+0x258>)
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d002      	beq.n	8001d52 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	f023 0206 	bic.w	r2, r3, #6
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	221c      	movs	r2, #28
 8001d84:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 021c 	bic.w	r2, r2, #28
 8001d9c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d108      	bne.n	8001db8 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0208 	orr.w	r2, r2, #8
 8001db4:	605a      	str	r2, [r3, #4]
          break;
 8001db6:	e008      	b.n	8001dca <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0204 	orr.w	r2, r2, #4
 8001dc6:	605a      	str	r2, [r3, #4]
          break;
 8001dc8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0210 	orr.w	r2, r2, #16
 8001de0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a50      	ldr	r2, [pc, #320]	@ (8001f28 <HAL_ADC_Start_IT+0x254>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d002      	beq.n	8001df2 <HAL_ADC_Start_IT+0x11e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e000      	b.n	8001df4 <HAL_ADC_Start_IT+0x120>
 8001df2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f2c <HAL_ADC_Start_IT+0x258>)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d008      	beq.n	8001e0e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d002      	beq.n	8001e0e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	d13a      	bne.n	8001e84 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02d      	beq.n	8001e78 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d110      	bne.n	8001e56 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0220 	bic.w	r2, r2, #32
 8001e42:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e52:	605a      	str	r2, [r3, #4]
              break;
 8001e54:	e010      	b.n	8001e78 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e64:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0220 	orr.w	r2, r2, #32
 8001e74:	605a      	str	r2, [r3, #4]
              break;
 8001e76:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fd9b 	bl	80019b8 <LL_ADC_REG_StartConversion>
 8001e82:	e04a      	b.n	8001f1a <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a24      	ldr	r2, [pc, #144]	@ (8001f28 <HAL_ADC_Start_IT+0x254>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d002      	beq.n	8001ea0 <HAL_ADC_Start_IT+0x1cc>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e000      	b.n	8001ea2 <HAL_ADC_Start_IT+0x1ce>
 8001ea0:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <HAL_ADC_Start_IT+0x258>)
 8001ea2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d034      	beq.n	8001f1a <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001eb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	@ 0x58
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d110      	bne.n	8001eea <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0220 	bic.w	r2, r2, #32
 8001ed6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ee6:	605a      	str	r2, [r3, #4]
              break;
 8001ee8:	e017      	b.n	8001f1a <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ef8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	605a      	str	r2, [r3, #4]
              break;
 8001f0a:	e006      	b.n	8001f1a <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001f14:	e001      	b.n	8001f1a <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	42028300 	.word	0x42028300
 8001f28:	42028100 	.word	0x42028100
 8001f2c:	42028000 	.word	0x42028000

08001f30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f68:	4882      	ldr	r0, [pc, #520]	@ (8002174 <HAL_ADC_IRQHandler+0x228>)
 8001f6a:	f7ff fc6d 	bl	8001848 <LL_ADC_GetMultimode>
 8001f6e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d017      	beq.n	8001faa <HAL_ADC_IRQHandler+0x5e>
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d012      	beq.n	8001faa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f94:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 ffab 	bl	8002ef8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <HAL_ADC_IRQHandler+0x72>
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8083 	beq.w	80020d0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d07d      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fb87 	bl	8001704 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d062      	beq.n	80020c2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a5d      	ldr	r2, [pc, #372]	@ (8002178 <HAL_ADC_IRQHandler+0x22c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d002      	beq.n	800200c <HAL_ADC_IRQHandler+0xc0>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e000      	b.n	800200e <HAL_ADC_IRQHandler+0xc2>
 800200c:	4b5b      	ldr	r3, [pc, #364]	@ (800217c <HAL_ADC_IRQHandler+0x230>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	4293      	cmp	r3, r2
 8002014:	d008      	beq.n	8002028 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b05      	cmp	r3, #5
 8002020:	d002      	beq.n	8002028 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b09      	cmp	r3, #9
 8002026:	d104      	bne.n	8002032 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	e00c      	b.n	800204c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a50      	ldr	r2, [pc, #320]	@ (8002178 <HAL_ADC_IRQHandler+0x22c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d002      	beq.n	8002042 <HAL_ADC_IRQHandler+0xf6>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	e000      	b.n	8002044 <HAL_ADC_IRQHandler+0xf8>
 8002042:	4b4e      	ldr	r3, [pc, #312]	@ (800217c <HAL_ADC_IRQHandler+0x230>)
 8002044:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d135      	bne.n	80020c2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b08      	cmp	r3, #8
 8002062:	d12e      	bne.n	80020c2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fcb9 	bl	80019e0 <LL_ADC_REG_IsConversionOngoing>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11a      	bne.n	80020aa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 020c 	bic.w	r2, r2, #12
 8002082:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d112      	bne.n	80020c2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a8:	e00b      	b.n	80020c2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ae:	f043 0210 	orr.w	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fd3e 	bl	8000b44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	220c      	movs	r2, #12
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x198>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 809f 	beq.w	800222e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8099 	beq.w	800222e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fb32 	bl	8001782 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800211e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff faed 	bl	8001704 <LL_ADC_REG_IsTriggerSourceSWStart>
 800212a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a11      	ldr	r2, [pc, #68]	@ (8002178 <HAL_ADC_IRQHandler+0x22c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d002      	beq.n	800213c <HAL_ADC_IRQHandler+0x1f0>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	e000      	b.n	800213e <HAL_ADC_IRQHandler+0x1f2>
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <HAL_ADC_IRQHandler+0x230>)
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	4293      	cmp	r3, r2
 8002144:	d008      	beq.n	8002158 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b06      	cmp	r3, #6
 8002150:	d002      	beq.n	8002158 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b07      	cmp	r3, #7
 8002156:	d104      	bne.n	8002162 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	e013      	b.n	800218a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_ADC_IRQHandler+0x22c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_ADC_IRQHandler+0x234>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	e007      	b.n	8002182 <HAL_ADC_IRQHandler+0x236>
 8002172:	bf00      	nop
 8002174:	42028300 	.word	0x42028300
 8002178:	42028100 	.word	0x42028100
 800217c:	42028000 	.word	0x42028000
 8002180:	4b7d      	ldr	r3, [pc, #500]	@ (8002378 <HAL_ADC_IRQHandler+0x42c>)
 8002182:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d047      	beq.n	8002220 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_ADC_IRQHandler+0x25e>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d03f      	beq.n	8002220 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d13a      	bne.n	8002220 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	2b40      	cmp	r3, #64	@ 0x40
 80021b6:	d133      	bne.n	8002220 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d12e      	bne.n	8002220 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fc1d 	bl	8001a06 <LL_ADC_INJ_IsConversionOngoing>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11a      	bne.n	8002208 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021e0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d112      	bne.n	8002220 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	659a      	str	r2, [r3, #88]	@ 0x58
 8002206:	e00b      	b.n	8002220 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	f043 0210 	orr.w	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	f043 0201 	orr.w	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fe41 	bl	8002ea8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2260      	movs	r2, #96	@ 0x60
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002234:	2b00      	cmp	r3, #0
 8002236:	d011      	beq.n	800225c <HAL_ADC_IRQHandler+0x310>
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f896 	bl	8002380 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2280      	movs	r2, #128	@ 0x80
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d012      	beq.n	800228c <HAL_ADC_IRQHandler+0x340>
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002274:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fe27 	bl	8002ed0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002292:	2b00      	cmp	r3, #0
 8002294:	d012      	beq.n	80022bc <HAL_ADC_IRQHandler+0x370>
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fe19 	bl	8002ee4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d036      	beq.n	8002334 <HAL_ADC_IRQHandler+0x3e8>
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d031      	beq.n	8002334 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
 80022dc:	e014      	b.n	8002308 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022e4:	4825      	ldr	r0, [pc, #148]	@ (800237c <HAL_ADC_IRQHandler+0x430>)
 80022e6:	f7ff fabd 	bl	8001864 <LL_ADC_GetMultiDMATransfer>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80022f0:	2301      	movs	r3, #1
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f4:	e008      	b.n	8002308 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002304:	2301      	movs	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10e      	bne.n	800232c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f834 	bl	8002394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2210      	movs	r2, #16
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d018      	beq.n	8002370 <HAL_ADC_IRQHandler+0x424>
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	f043 0208 	orr.w	r2, r3, #8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002368:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fda6 	bl	8002ebc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	@ 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	42028000 	.word	0x42028000
 800237c:	42028300 	.word	0x42028300

08002380 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0b6      	sub	sp, #216	@ 0xd8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x22>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e3e6      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x7f0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fb02 	bl	80019e0 <LL_ADC_REG_IsConversionOngoing>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 83cb 	bne.w	8002b7a <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d009      	beq.n	8002400 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4ab0      	ldr	r2, [pc, #704]	@ (80026b4 <HAL_ADC_ConfigChannel+0x30c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d109      	bne.n	800240a <HAL_ADC_ConfigChannel+0x62>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4aaf      	ldr	r2, [pc, #700]	@ (80026b8 <HAL_ADC_ConfigChannel+0x310>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d104      	bne.n	800240a <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f8cb 	bl	80015a0 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	f7ff f987 	bl	800172a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fadd 	bl	80019e0 <LL_ADC_REG_IsConversionOngoing>
 8002426:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fae9 	bl	8001a06 <LL_ADC_INJ_IsConversionOngoing>
 8002434:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002438:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 81dd 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002442:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 81d8 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002454:	d10f      	bne.n	8002476 <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	4619      	mov	r1, r3
 8002462:	f7ff f9a1 	bl	80017a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f935 	bl	80016de <LL_ADC_SetSamplingTimeCommonConfig>
 8002474:	e00e      	b.n	8002494 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	461a      	mov	r2, r3
 8002484:	f7ff f990 	bl	80017a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f925 	bl	80016de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d022      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024c6:	f7ff f87f 	bl	80015c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6919      	ldr	r1, [r3, #16]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f7ff f8cb 	bl	8001672 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d102      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x14a>
 80024ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024f0:	e000      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x14c>
 80024f2:	2300      	movs	r3, #0
 80024f4:	461a      	mov	r2, r3
 80024f6:	f7ff f8d7 	bl	80016a8 <LL_ADC_SetOffsetSaturation>
 80024fa:	e17f      	b.n	80027fc <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f884 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x180>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f879 	bl	8001610 <LL_ADC_GetOffsetChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	f003 021f 	and.w	r2, r3, #31
 8002526:	e01e      	b.n	8002566 <HAL_ADC_ConfigChannel+0x1be>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f86e 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800254a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 800254e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e004      	b.n	8002564 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 800255a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800256e:	2b00      	cmp	r3, #0
 8002570:	d105      	bne.n	800257e <HAL_ADC_ConfigChannel+0x1d6>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	0e9b      	lsrs	r3, r3, #26
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	e018      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x208>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800259a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e004      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 80025a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d106      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f83d 	bl	800163c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2101      	movs	r1, #1
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f821 	bl	8001610 <LL_ADC_GetOffsetChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x246>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f816 	bl	8001610 <LL_ADC_GetOffsetChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	0e9b      	lsrs	r3, r3, #26
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	e01e      	b.n	800262c <HAL_ADC_ConfigChannel+0x284>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff f80b 	bl	8001610 <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800260c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002610:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e004      	b.n	800262a <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8002620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x29c>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	e018      	b.n	8002676 <HAL_ADC_ConfigChannel+0x2ce>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002658:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800265c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e004      	b.n	8002676 <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 800266c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002676:	429a      	cmp	r2, r3
 8002678:	d106      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe ffda 	bl	800163c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe ffbe 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10e      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x314>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2102      	movs	r1, #2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe ffb3 	bl	8001610 <LL_ADC_GetOffsetChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	e022      	b.n	80026fa <HAL_ADC_ConfigChannel+0x352>
 80026b4:	04300002 	.word	0x04300002
 80026b8:	407f0000 	.word	0x407f0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2102      	movs	r1, #2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe ffa4 	bl	8001610 <LL_ADC_GetOffsetChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80026da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80026e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e004      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80026ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x36a>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	e016      	b.n	8002740 <HAL_ADC_ConfigChannel+0x398>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002724:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800272a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e004      	b.n	8002740 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8002736:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002740:	429a      	cmp	r2, r3
 8002742:	d106      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	2102      	movs	r1, #2
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe ff75 	bl	800163c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2103      	movs	r1, #3
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe ff59 	bl	8001610 <LL_ADC_GetOffsetChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_ADC_ConfigChannel+0x3d6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2103      	movs	r1, #3
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe ff4e 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	e017      	b.n	80027ae <HAL_ADC_ConfigChannel+0x406>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2103      	movs	r1, #3
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe ff43 	bl	8001610 <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002798:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800279a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80027a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x41e>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	0e9b      	lsrs	r3, r3, #26
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	e011      	b.n	80027ea <HAL_ADC_ConfigChannel+0x442>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80027d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80027d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e003      	b.n	80027ea <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 80027e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d106      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	2103      	movs	r1, #3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe ff20 	bl	800163c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff f8b3 	bl	800196c <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 813f 	bne.w	8002a8c <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	461a      	mov	r2, r3
 800281c:	f7fe fff0 	bl	8001800 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a8e      	ldr	r2, [pc, #568]	@ (8002a60 <HAL_ADC_ConfigChannel+0x6b8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	f040 8130 	bne.w	8002a8c <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x4ac>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	3301      	adds	r3, #1
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	2b09      	cmp	r3, #9
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e019      	b.n	8002888 <HAL_ADC_ConfigChannel+0x4e0>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002862:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002864:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e003      	b.n	8002878 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8002870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	3301      	adds	r3, #1
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2b09      	cmp	r3, #9
 8002880:	bf94      	ite	ls
 8002882:	2301      	movls	r3, #1
 8002884:	2300      	movhi	r3, #0
 8002886:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002888:	2b00      	cmp	r3, #0
 800288a:	d079      	beq.n	8002980 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002894:	2b00      	cmp	r3, #0
 8002896:	d107      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x500>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	3301      	adds	r3, #1
 80028a0:	069b      	lsls	r3, r3, #26
 80028a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028a6:	e015      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x52c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80028ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 80028c0:	2320      	movs	r3, #32
 80028c2:	e003      	b.n	80028cc <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 80028c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	069b      	lsls	r3, r3, #26
 80028d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x54c>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0e9b      	lsrs	r3, r3, #26
 80028e6:	3301      	adds	r3, #1
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2101      	movs	r1, #1
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	e017      	b.n	8002924 <HAL_ADC_ConfigChannel+0x57c>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002904:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	e003      	b.n	8002918 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8002910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	3301      	adds	r3, #1
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	ea42 0103 	orr.w	r1, r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <HAL_ADC_ConfigChannel+0x5a2>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	3301      	adds	r3, #1
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	051b      	lsls	r3, r3, #20
 8002948:	e018      	b.n	800297c <HAL_ADC_ConfigChannel+0x5d4>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800295c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8002966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297c:	430b      	orrs	r3, r1
 800297e:	e080      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <HAL_ADC_ConfigChannel+0x5f4>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	069b      	lsls	r3, r3, #26
 8002996:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800299a:	e015      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x620>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80029aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 80029b4:	2320      	movs	r3, #32
 80029b6:	e003      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	069b      	lsls	r3, r3, #26
 80029c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x640>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0e9b      	lsrs	r3, r3, #26
 80029da:	3301      	adds	r3, #1
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2101      	movs	r1, #1
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	e017      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x670>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	61fb      	str	r3, [r7, #28]
  return result;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	ea42 0103 	orr.w	r1, r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x69c>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	3b1e      	subs	r3, #30
 8002a3c:	051b      	lsls	r3, r3, #20
 8002a3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	e01d      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x6d8>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	613b      	str	r3, [r7, #16]
  return result;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e005      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x6c4>
 8002a60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 021f 	and.w	r2, r3, #31
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	3b1e      	subs	r3, #30
 8002a7a:	051b      	lsls	r3, r3, #20
 8002a7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe fe8e 	bl	80017a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b43      	ldr	r3, [pc, #268]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x7f8>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d079      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a98:	4842      	ldr	r0, [pc, #264]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x7fc>)
 8002a9a:	f7fe fd61 	bl	8001560 <LL_ADC_GetCommonPathInternalCh>
 8002a9e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a40      	ldr	r2, [pc, #256]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x800>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d124      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ab0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11e      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3b      	ldr	r2, [pc, #236]	@ (8002bac <HAL_ADC_ConfigChannel+0x804>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d164      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ac6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002aca:	4619      	mov	r1, r3
 8002acc:	4835      	ldr	r0, [pc, #212]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x7fc>)
 8002ace:	f7fe fd34 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ad2:	4b37      	ldr	r3, [pc, #220]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x808>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	4a36      	ldr	r2, [pc, #216]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x80c>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ae6:	e002      	b.n	8002aee <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af4:	e04a      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x810>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d113      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_ADC_ConfigChannel+0x814>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d13a      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4820      	ldr	r0, [pc, #128]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x7fc>)
 8002b22:	f7fe fd0a 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b26:	e031      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a24      	ldr	r2, [pc, #144]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x818>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d113      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1a      	ldr	r2, [pc, #104]	@ (8002bac <HAL_ADC_ConfigChannel+0x804>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d121      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b50:	4619      	mov	r1, r3
 8002b52:	4814      	ldr	r0, [pc, #80]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x7fc>)
 8002b54:	f7fe fcf1 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b58:	e018      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a19      	ldr	r2, [pc, #100]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x81c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d113      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a10      	ldr	r2, [pc, #64]	@ (8002bac <HAL_ADC_ConfigChannel+0x804>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00e      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fd02 	bl	800157c <LL_ADC_EnableChannelVDDcore>
 8002b78:	e008      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b94:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	37d8      	adds	r7, #216	@ 0xd8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	80080000 	.word	0x80080000
 8002ba4:	42028300 	.word	0x42028300
 8002ba8:	c3210000 	.word	0xc3210000
 8002bac:	42028000 	.word	0x42028000
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	053e2d63 	.word	0x053e2d63
 8002bb8:	43290000 	.word	0x43290000
 8002bbc:	42028100 	.word	0x42028100
 8002bc0:	c7520000 	.word	0xc7520000
 8002bc4:	475a0000 	.word	0x475a0000

08002bc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fec7 	bl	800196c <LL_ADC_IsEnabled>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d166      	bne.n	8002cb2 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <ADC_Enable+0xf4>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e052      	b.n	8002cb4 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fe82 	bl	800191c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c18:	4829      	ldr	r0, [pc, #164]	@ (8002cc0 <ADC_Enable+0xf8>)
 8002c1a:	f7fe fca1 	bl	8001560 <LL_ADC_GetCommonPathInternalCh>
 8002c1e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c28:	4b26      	ldr	r3, [pc, #152]	@ (8002cc4 <ADC_Enable+0xfc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	4a26      	ldr	r2, [pc, #152]	@ (8002cc8 <ADC_Enable+0x100>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	3301      	adds	r3, #1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c3c:	e002      	b.n	8002c44 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f9      	bne.n	8002c3e <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fc57 	bl	80014fc <HAL_GetTick>
 8002c4e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c50:	e028      	b.n	8002ca4 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fe88 	bl	800196c <LL_ADC_IsEnabled>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fe58 	bl	800191c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c6c:	f7fe fc46 	bl	80014fc <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d914      	bls.n	8002ca4 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d00d      	beq.n	8002ca4 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	f043 0210 	orr.w	r2, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e007      	b.n	8002cb4 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d1cf      	bne.n	8002c52 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	8000003f 	.word	0x8000003f
 8002cc0:	42028300 	.word	0x42028300
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	053e2d63 	.word	0x053e2d63

08002ccc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fe5a 	bl	8001992 <LL_ADC_IsDisableOngoing>
 8002cde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fe41 	bl	800196c <LL_ADC_IsEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d047      	beq.n	8002d80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d144      	bne.n	8002d80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 030d 	and.w	r3, r3, #13
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10c      	bne.n	8002d1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fe1b 	bl	8001944 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2203      	movs	r2, #3
 8002d14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d16:	f7fe fbf1 	bl	80014fc <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d1c:	e029      	b.n	8002d72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e023      	b.n	8002d82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d3a:	f7fe fbdf 	bl	80014fc <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d914      	bls.n	8002d72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5a:	f043 0210 	orr.w	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e007      	b.n	8002d82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1dc      	bne.n	8002d3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <LL_ADC_StartCalibration>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002d9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_IsCalibrationOnGoing>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADCEx_Calibration_Start+0x1c>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e04d      	b.n	8002e9c <HAL_ADCEx_Calibration_Start+0xb8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff5f 	bl	8002ccc <ADC_Disable>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d136      	bne.n	8002e86 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e20:	f023 0302 	bic.w	r3, r3, #2
 8002e24:	f043 0202 	orr.w	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ffa9 	bl	8002d8a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e38:	e014      	b.n	8002e64 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d30d      	bcc.n	8002e64 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	f023 0312 	bic.w	r3, r3, #18
 8002e50:	f043 0210 	orr.w	r2, r3, #16
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e01b      	b.n	8002e9c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ffa7 	bl	8002dbc <LL_ADC_IsCalibrationOnGoing>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e2      	bne.n	8002e3a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	f023 0303 	bic.w	r3, r3, #3
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e84:	e005      	b.n	8002e92 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	f043 0210 	orr.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	25c3f800 	.word	0x25c3f800

08002ea8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3e:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	60d3      	str	r3, [r2, #12]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <__NVIC_GetPriorityGrouping+0x18>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	f003 0307 	and.w	r3, r3, #7
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db0b      	blt.n	8002f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4907      	ldr	r1, [pc, #28]	@ (8002fa8 <__NVIC_EnableIRQ+0x38>)
 8002f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	6039      	str	r1, [r7, #0]
 8002fb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	db0a      	blt.n	8002fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	490c      	ldr	r1, [pc, #48]	@ (8002ff8 <__NVIC_SetPriority+0x4c>)
 8002fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd4:	e00a      	b.n	8002fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4908      	ldr	r1, [pc, #32]	@ (8002ffc <__NVIC_SetPriority+0x50>)
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	3b04      	subs	r3, #4
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	440b      	add	r3, r1
 8002fea:	761a      	strb	r2, [r3, #24]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000e100 	.word	0xe000e100
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	@ 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f1c3 0307 	rsb	r3, r3, #7
 800301a:	2b04      	cmp	r3, #4
 800301c:	bf28      	it	cs
 800301e:	2304      	movcs	r3, #4
 8003020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3304      	adds	r3, #4
 8003026:	2b06      	cmp	r3, #6
 8003028:	d902      	bls.n	8003030 <NVIC_EncodePriority+0x30>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3b03      	subs	r3, #3
 800302e:	e000      	b.n	8003032 <NVIC_EncodePriority+0x32>
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	401a      	ands	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003048:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43d9      	mvns	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	4313      	orrs	r3, r2
         );
}
 800305a:	4618      	mov	r0, r3
 800305c:	3724      	adds	r7, #36	@ 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ff4c 	bl	8002f0c <__NVIC_SetPriorityGrouping>
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800308a:	f7ff ff63 	bl	8002f54 <__NVIC_GetPriorityGrouping>
 800308e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	6978      	ldr	r0, [r7, #20]
 8003096:	f7ff ffb3 	bl	8003000 <NVIC_EncodePriority>
 800309a:	4602      	mov	r2, r0
 800309c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ff82 	bl	8002fac <__NVIC_SetPriority>
}
 80030a8:	bf00      	nop
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff56 	bl	8002f70 <__NVIC_EnableIRQ>
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030dc:	d301      	bcc.n	80030e2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80030de:	2301      	movs	r3, #1
 80030e0:	e00d      	b.n	80030fe <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80030e2:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <HAL_SYSTICK_Config+0x40>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80030ea:	4b08      	ldr	r3, [pc, #32]	@ (800310c <HAL_SYSTICK_Config+0x40>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_SYSTICK_Config+0x40>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a05      	ldr	r2, [pc, #20]	@ (800310c <HAL_SYSTICK_Config+0x40>)
 80030f6:	f043 0303 	orr.w	r3, r3, #3
 80030fa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e010 	.word	0xe000e010

08003110 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d844      	bhi.n	80031a8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800311e:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003147 	.word	0x08003147
 8003128:	08003165 	.word	0x08003165
 800312c:	08003187 	.word	0x08003187
 8003130:	080031a9 	.word	0x080031a9
 8003134:	08003139 	.word	0x08003139
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003138:	4b1f      	ldr	r3, [pc, #124]	@ (80031b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	6013      	str	r3, [r2, #0]
      break;
 8003144:	e031      	b.n	80031aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003146:	4b1c      	ldr	r3, [pc, #112]	@ (80031b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003152:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003154:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003158:	4a18      	ldr	r2, [pc, #96]	@ (80031bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800315a:	f023 030c 	bic.w	r3, r3, #12
 800315e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003162:	e022      	b.n	80031aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a13      	ldr	r2, [pc, #76]	@ (80031b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003172:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003176:	f023 030c 	bic.w	r3, r3, #12
 800317a:	4a10      	ldr	r2, [pc, #64]	@ (80031bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003184:	e011      	b.n	80031aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003186:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a0b      	ldr	r2, [pc, #44]	@ (80031b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003192:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003198:	f023 030c 	bic.w	r3, r3, #12
 800319c:	4a07      	ldr	r2, [pc, #28]	@ (80031bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800319e:	f043 0308 	orr.w	r3, r3, #8
 80031a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80031a6:	e000      	b.n	80031aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80031a8:	bf00      	nop
  }
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e010 	.word	0xe000e010
 80031bc:	44020c00 	.word	0x44020c00

080031c0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80031c6:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80031d2:	2304      	movs	r3, #4
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	e01e      	b.n	8003216 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80031d8:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80031da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d00f      	beq.n	800320a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d80f      	bhi.n	8003210 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d003      	beq.n	8003204 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80031fc:	e008      	b.n	8003210 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
        break;
 8003202:	e008      	b.n	8003216 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003204:	2301      	movs	r3, #1
 8003206:	607b      	str	r3, [r7, #4]
        break;
 8003208:	e005      	b.n	8003216 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800320a:	2302      	movs	r3, #2
 800320c:	607b      	str	r3, [r7, #4]
        break;
 800320e:	e002      	b.n	8003216 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
        break;
 8003214:	bf00      	nop
    }
  }
  return systick_source;
 8003216:	687b      	ldr	r3, [r7, #4]
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000e010 	.word	0xe000e010
 8003228:	44020c00 	.word	0x44020c00

0800322c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	460b      	mov	r3, r1
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d011      	beq.n	8003268 <HAL_EXTI_RegisterCallback+0x3c>
 8003244:	2b02      	cmp	r3, #2
 8003246:	dc13      	bgt.n	8003270 <HAL_EXTI_RegisterCallback+0x44>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_EXTI_RegisterCallback+0x26>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d007      	beq.n	8003260 <HAL_EXTI_RegisterCallback+0x34>
 8003250:	e00e      	b.n	8003270 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]
      break;
 800325e:	e00a      	b.n	8003276 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	605a      	str	r2, [r3, #4]
      break;
 8003266:	e006      	b.n	8003276 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]
      break;
 800326e:	e002      	b.n	8003276 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
      break;
 8003274:	bf00      	nop
  }

  return status;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e003      	b.n	80032a0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800329e:	2300      	movs	r3, #0
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2201      	movs	r2, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <HAL_EXTI_IRQHandler+0x88>)
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <HAL_EXTI_IRQHandler+0x8c>)
 8003304:	4413      	add	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4798      	blx	r3
    }
  }
}
 800332c:	bf00      	nop
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	4402200c 	.word	0x4402200c
 8003338:	44022010 	.word	0x44022010

0800333c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800334a:	e142      	b.n	80035d2 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8134 	beq.w	80035cc <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x38>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b12      	cmp	r3, #18
 8003372:	d125      	bne.n	80033c0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003380:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4013      	ands	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f003 020f 	and.w	r2, r3, #15
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	08da      	lsrs	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3208      	adds	r2, #8
 80033ba:	6979      	ldr	r1, [r7, #20]
 80033bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4013      	ands	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0203 	and.w	r2, r3, #3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d00b      	beq.n	8003414 <HAL_GPIO_Init+0xd8>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d007      	beq.n	8003414 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003408:	2b11      	cmp	r3, #17
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b12      	cmp	r3, #18
 8003412:	d130      	bne.n	8003476 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4013      	ands	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800344a:	2201      	movs	r2, #1
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4013      	ands	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f003 0201 	and.w	r2, r3, #1
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b03      	cmp	r3, #3
 8003480:	d109      	bne.n	8003496 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800348a:	2b03      	cmp	r3, #3
 800348c:	d11b      	bne.n	80034c6 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d017      	beq.n	80034c6 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4013      	ands	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d07c      	beq.n	80035cc <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80034d2:	4a47      	ldr	r2, [pc, #284]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3318      	adds	r3, #24
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4013      	ands	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0a9a      	lsrs	r2, r3, #10
 80034fa:	4b3e      	ldr	r3, [pc, #248]	@ (80035f4 <HAL_GPIO_Init+0x2b8>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	f002 0203 	and.w	r2, r2, #3
 8003504:	00d2      	lsls	r2, r2, #3
 8003506:	4093      	lsls	r3, r2
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800350e:	4938      	ldr	r1, [pc, #224]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3318      	adds	r3, #24
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800351c:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	43db      	mvns	r3, r3
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4013      	ands	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003540:	4a2b      	ldr	r2, [pc, #172]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003546:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	43db      	mvns	r3, r3
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4013      	ands	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800356a:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003570:	4b1f      	ldr	r3, [pc, #124]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 8003572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003576:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4013      	ands	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003596:	4a16      	ldr	r2, [pc, #88]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800359e:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 80035a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4013      	ands	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80035c4:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <HAL_GPIO_Init+0x2b4>)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3301      	adds	r3, #1
 80035d0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f47f aeb5 	bne.w	800334c <HAL_GPIO_Init+0x10>
  }
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	44022000 	.word	0x44022000
 80035f4:	002f7f7f 	.word	0x002f7f7f

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003614:	e002      	b.n	800361c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f000 bc28 	b.w	8003e8c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363c:	4b94      	ldr	r3, [pc, #592]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f003 0318 	and.w	r3, r3, #24
 8003644:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003646:	4b92      	ldr	r3, [pc, #584]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d05b      	beq.n	8003714 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b08      	cmp	r3, #8
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x46>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b18      	cmp	r3, #24
 8003666:	d114      	bne.n	8003692 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d111      	bne.n	8003692 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f000 bc08 	b.w	8003e8c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800367c:	4b84      	ldr	r3, [pc, #528]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	4981      	ldr	r1, [pc, #516]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 800368c:	4313      	orrs	r3, r2
 800368e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003690:	e040      	b.n	8003714 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d023      	beq.n	80036e2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800369a:	4b7d      	ldr	r3, [pc, #500]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7c      	ldr	r2, [pc, #496]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fd ff29 	bl	80014fc <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80036ae:	f7fd ff25 	bl	80014fc <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e3e5      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80036c0:	4b73      	ldr	r3, [pc, #460]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80036cc:	4b70      	ldr	r3, [pc, #448]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	041b      	lsls	r3, r3, #16
 80036da:	496d      	ldr	r1, [pc, #436]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	618b      	str	r3, [r1, #24]
 80036e0:	e018      	b.n	8003714 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80036e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fd ff05 	bl	80014fc <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80036f6:	f7fd ff01 	bl	80014fc <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e3c1      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003708:	4b61      	ldr	r3, [pc, #388]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a0 	beq.w	8003862 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b10      	cmp	r3, #16
 8003726:	d005      	beq.n	8003734 <HAL_RCC_OscConfig+0x10c>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b18      	cmp	r3, #24
 800372c:	d109      	bne.n	8003742 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 8092 	bne.w	8003862 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e3a4      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x132>
 800374c:	4b50      	ldr	r3, [pc, #320]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4f      	ldr	r2, [pc, #316]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	e058      	b.n	800380c <HAL_RCC_OscConfig+0x1e4>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x160>
 8003762:	4b4b      	ldr	r3, [pc, #300]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a4a      	ldr	r2, [pc, #296]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b48      	ldr	r3, [pc, #288]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a47      	ldr	r2, [pc, #284]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003774:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b45      	ldr	r3, [pc, #276]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a44      	ldr	r2, [pc, #272]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e041      	b.n	800380c <HAL_RCC_OscConfig+0x1e4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003790:	d112      	bne.n	80037b8 <HAL_RCC_OscConfig+0x190>
 8003792:	4b3f      	ldr	r3, [pc, #252]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a3e      	ldr	r2, [pc, #248]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b3c      	ldr	r3, [pc, #240]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b39      	ldr	r3, [pc, #228]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a38      	ldr	r2, [pc, #224]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e029      	b.n	800380c <HAL_RCC_OscConfig+0x1e4>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80037c0:	d112      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1c0>
 80037c2:	4b33      	ldr	r3, [pc, #204]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a32      	ldr	r2, [pc, #200]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b30      	ldr	r3, [pc, #192]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b2d      	ldr	r3, [pc, #180]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2c      	ldr	r2, [pc, #176]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e011      	b.n	800380c <HAL_RCC_OscConfig+0x1e4>
 80037e8:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a28      	ldr	r2, [pc, #160]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b26      	ldr	r3, [pc, #152]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a25      	ldr	r2, [pc, #148]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 80037fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003806:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800380a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fe72 	bl	80014fc <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800381c:	f7fd fe6e 	bl	80014fc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	@ 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e32e      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382e:	4b18      	ldr	r3, [pc, #96]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x1f4>
 800383a:	e012      	b.n	8003862 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd fe5e 	bl	80014fc <HAL_GetTick>
 8003840:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003844:	f7fd fe5a 	bl	80014fc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	@ 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e31a      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <HAL_RCC_OscConfig+0x268>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 809a 	beq.w	80039a4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_RCC_OscConfig+0x25a>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b18      	cmp	r3, #24
 800387a:	d149      	bne.n	8003910 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d146      	bne.n	8003910 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e2fe      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
 800388e:	bf00      	nop
 8003890:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800389a:	4b9a      	ldr	r3, [pc, #616]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0218 	and.w	r2, r3, #24
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d014      	beq.n	80038d4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80038aa:	4b96      	ldr	r3, [pc, #600]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 0218 	bic.w	r2, r3, #24
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	4993      	ldr	r1, [pc, #588]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80038bc:	f000 fdd0 	bl	8004460 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038c0:	4b91      	ldr	r3, [pc, #580]	@ (8003b08 <HAL_RCC_OscConfig+0x4e0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd fd8f 	bl	80013e8 <HAL_InitTick>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e2db      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd fe12 	bl	80014fc <HAL_GetTick>
 80038d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80038dc:	f7fd fe0e 	bl	80014fc <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e2ce      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ee:	4b85      	ldr	r3, [pc, #532]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80038fa:	4b82      	ldr	r3, [pc, #520]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	497e      	ldr	r1, [pc, #504]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800390e:	e049      	b.n	80039a4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02c      	beq.n	8003972 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003918:	4b7a      	ldr	r3, [pc, #488]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 0218 	bic.w	r2, r3, #24
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	4977      	ldr	r1, [pc, #476]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800392a:	4b76      	ldr	r3, [pc, #472]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a75      	ldr	r2, [pc, #468]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fd fde1 	bl	80014fc <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800393e:	f7fd fddd 	bl	80014fc <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e29d      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003950:	4b6c      	ldr	r3, [pc, #432]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800395c:	4b69      	ldr	r3, [pc, #420]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	4966      	ldr	r1, [pc, #408]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	610b      	str	r3, [r1, #16]
 8003970:	e018      	b.n	80039a4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003972:	4b64      	ldr	r3, [pc, #400]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a63      	ldr	r2, [pc, #396]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fd fdbd 	bl	80014fc <HAL_GetTick>
 8003982:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003986:	f7fd fdb9 	bl	80014fc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e279      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003998:	4b5a      	ldr	r3, [pc, #360]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f0      	bne.n	8003986 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d03c      	beq.n	8003a2a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01c      	beq.n	80039f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b8:	4b52      	ldr	r3, [pc, #328]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80039ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039be:	4a51      	ldr	r2, [pc, #324]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80039c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c8:	f7fd fd98 	bl	80014fc <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80039d0:	f7fd fd94 	bl	80014fc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e254      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80039e2:	4b48      	ldr	r3, [pc, #288]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80039e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ef      	beq.n	80039d0 <HAL_RCC_OscConfig+0x3a8>
 80039f0:	e01b      	b.n	8003a2a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f2:	4b44      	ldr	r3, [pc, #272]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80039f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039f8:	4a42      	ldr	r2, [pc, #264]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 80039fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fd fd7b 	bl	80014fc <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003a0a:	f7fd fd77 	bl	80014fc <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e237      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a1c:	4b39      	ldr	r3, [pc, #228]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1ef      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80d2 	beq.w	8003bdc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a38:	4b34      	ldr	r3, [pc, #208]	@ (8003b0c <HAL_RCC_OscConfig+0x4e4>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d118      	bne.n	8003a76 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003a44:	4b31      	ldr	r3, [pc, #196]	@ (8003b0c <HAL_RCC_OscConfig+0x4e4>)
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	4a30      	ldr	r2, [pc, #192]	@ (8003b0c <HAL_RCC_OscConfig+0x4e4>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a50:	f7fd fd54 	bl	80014fc <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fd fd50 	bl	80014fc <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e210      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a6a:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <HAL_RCC_OscConfig+0x4e4>)
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d108      	bne.n	8003a90 <HAL_RCC_OscConfig+0x468>
 8003a7e:	4b21      	ldr	r3, [pc, #132]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a84:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a8e:	e074      	b.n	8003b7a <HAL_RCC_OscConfig+0x552>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d118      	bne.n	8003aca <HAL_RCC_OscConfig+0x4a2>
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a9e:	4a19      	ldr	r2, [pc, #100]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003aa8:	4b16      	ldr	r3, [pc, #88]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aae:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ab8:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003abe:	4a11      	ldr	r2, [pc, #68]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ac8:	e057      	b.n	8003b7a <HAL_RCC_OscConfig+0x552>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d11e      	bne.n	8003b10 <HAL_RCC_OscConfig+0x4e8>
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003ada:	f043 0304 	orr.w	r3, r3, #4
 8003ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ae2:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ae8:	4a06      	ldr	r2, [pc, #24]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003af2:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003af8:	4a02      	ldr	r2, [pc, #8]	@ (8003b04 <HAL_RCC_OscConfig+0x4dc>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b02:	e03a      	b.n	8003b7a <HAL_RCC_OscConfig+0x552>
 8003b04:	44020c00 	.word	0x44020c00
 8003b08:	20000018 	.word	0x20000018
 8003b0c:	44020800 	.word	0x44020800
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b85      	cmp	r3, #133	@ 0x85
 8003b16:	d118      	bne.n	8003b4a <HAL_RCC_OscConfig+0x522>
 8003b18:	4ba2      	ldr	r3, [pc, #648]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b1e:	4aa1      	ldr	r2, [pc, #644]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b28:	4b9e      	ldr	r3, [pc, #632]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b2e:	4a9d      	ldr	r2, [pc, #628]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b38:	4b9a      	ldr	r3, [pc, #616]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b3e:	4a99      	ldr	r2, [pc, #612]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b48:	e017      	b.n	8003b7a <HAL_RCC_OscConfig+0x552>
 8003b4a:	4b96      	ldr	r3, [pc, #600]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b50:	4a94      	ldr	r2, [pc, #592]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b5a:	4b92      	ldr	r3, [pc, #584]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b60:	4a90      	ldr	r2, [pc, #576]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b6a:	4b8e      	ldr	r3, [pc, #568]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b70:	4a8c      	ldr	r2, [pc, #560]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fd fcbb 	bl	80014fc <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd fcb7 	bl	80014fc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e175      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba0:	4b80      	ldr	r3, [pc, #512]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0ed      	beq.n	8003b8a <HAL_RCC_OscConfig+0x562>
 8003bae:	e015      	b.n	8003bdc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7fd fca4 	bl	80014fc <HAL_GetTick>
 8003bb4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fca0 	bl	80014fc <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e15e      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bce:	4b75      	ldr	r3, [pc, #468]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ed      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d036      	beq.n	8003c56 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d019      	beq.n	8003c24 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003bf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fd fc7e 	bl	80014fc <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003c04:	f7fd fc7a 	bl	80014fc <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e13a      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c16:	4b63      	ldr	r3, [pc, #396]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x5dc>
 8003c22:	e018      	b.n	8003c56 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c24:	4b5f      	ldr	r3, [pc, #380]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5e      	ldr	r2, [pc, #376]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fd fc64 	bl	80014fc <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003c38:	f7fd fc60 	bl	80014fc <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e120      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c4a:	4b56      	ldr	r3, [pc, #344]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8115 	beq.w	8003e8a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b18      	cmp	r3, #24
 8003c64:	f000 80af 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	f040 8086 	bne.w	8003d7e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003c72:	4b4c      	ldr	r3, [pc, #304]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a4b      	ldr	r2, [pc, #300]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003c78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fd fc3d 	bl	80014fc <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003c86:	f7fd fc39 	bl	80014fc <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e0f9      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c98:	4b42      	ldr	r3, [pc, #264]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cac:	f023 0303 	bic.w	r3, r3, #3
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cb8:	0212      	lsls	r2, r2, #8
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	4939      	ldr	r1, [pc, #228]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	025b      	lsls	r3, r3, #9
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	3b01      	subs	r3, #1
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cf2:	492c      	ldr	r1, [pc, #176]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	4a29      	ldr	r2, [pc, #164]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003cfe:	f023 0310 	bic.w	r3, r3, #16
 8003d02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d08:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003d0e:	4b25      	ldr	r3, [pc, #148]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	4a24      	ldr	r2, [pc, #144]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d14:	f043 0310 	orr.w	r3, r3, #16
 8003d18:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003d1a:	4b22      	ldr	r3, [pc, #136]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1e:	f023 020c 	bic.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	491f      	ldr	r1, [pc, #124]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	f023 0220 	bic.w	r2, r3, #32
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d38:	491a      	ldr	r1, [pc, #104]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d3e:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d42:	4a18      	ldr	r2, [pc, #96]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d48:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fd fbd1 	bl	80014fc <HAL_GetTick>
 8003d5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d5e:	f7fd fbcd 	bl	80014fc <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e08d      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d70:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x736>
 8003d7c:	e085      	b.n	8003e8a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a08      	ldr	r2, [pc, #32]	@ (8003da4 <HAL_RCC_OscConfig+0x77c>)
 8003d84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8a:	f7fd fbb7 	bl	80014fc <HAL_GetTick>
 8003d8e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d90:	e00a      	b.n	8003da8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d92:	f7fd fbb3 	bl	80014fc <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d903      	bls.n	8003da8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e073      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
 8003da4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003da8:	4b3a      	ldr	r3, [pc, #232]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ee      	bne.n	8003d92 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003db4:	4b37      	ldr	r3, [pc, #220]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	4a36      	ldr	r2, [pc, #216]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003dba:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	6293      	str	r3, [r2, #40]	@ 0x28
 8003dc4:	e061      	b.n	8003e8a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003dc6:	4b33      	ldr	r3, [pc, #204]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d031      	beq.n	8003e3e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d12a      	bne.n	8003e3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d122      	bne.n	8003e3e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e02:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d11a      	bne.n	8003e3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	0a5b      	lsrs	r3, r3, #9
 8003e0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e14:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d111      	bne.n	8003e3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e26:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d108      	bne.n	8003e3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	0e1b      	lsrs	r3, r3, #24
 8003e30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e024      	b.n	8003e8c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003e42:	4b14      	ldr	r3, [pc, #80]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	08db      	lsrs	r3, r3, #3
 8003e48:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d01a      	beq.n	8003e8a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003e54:	4b0f      	ldr	r3, [pc, #60]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	4a0e      	ldr	r2, [pc, #56]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003e5a:	f023 0310 	bic.w	r3, r3, #16
 8003e5e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fb4c 	bl	80014fc <HAL_GetTick>
 8003e64:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003e66:	bf00      	nop
 8003e68:	f7fd fb48 	bl	80014fc <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d0f9      	beq.n	8003e68 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e78:	4a06      	ldr	r2, [pc, #24]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003e7e:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	4a04      	ldr	r2, [pc, #16]	@ (8003e94 <HAL_RCC_OscConfig+0x86c>)
 8003e84:	f043 0310 	orr.w	r3, r3, #16
 8003e88:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	44020c00 	.word	0x44020c00

08003e98 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e19e      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b83      	ldr	r3, [pc, #524]	@ (80040bc <HAL_RCC_ClockConfig+0x224>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b80      	ldr	r3, [pc, #512]	@ (80040bc <HAL_RCC_ClockConfig+0x224>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 020f 	bic.w	r2, r3, #15
 8003ec2:	497e      	ldr	r1, [pc, #504]	@ (80040bc <HAL_RCC_ClockConfig+0x224>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b7c      	ldr	r3, [pc, #496]	@ (80040bc <HAL_RCC_ClockConfig+0x224>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e186      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	4b74      	ldr	r3, [pc, #464]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d909      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003efa:	4b71      	ldr	r3, [pc, #452]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	496d      	ldr	r1, [pc, #436]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	4b68      	ldr	r3, [pc, #416]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d909      	bls.n	8003f40 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003f2c:	4b64      	ldr	r3, [pc, #400]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	4961      	ldr	r1, [pc, #388]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	4b5b      	ldr	r3, [pc, #364]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d908      	bls.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003f5c:	4b58      	ldr	r3, [pc, #352]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4955      	ldr	r1, [pc, #340]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d010      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	4b50      	ldr	r3, [pc, #320]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d908      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 020f 	bic.w	r2, r3, #15
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	494a      	ldr	r1, [pc, #296]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8093 	beq.w	80040d0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003fb2:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d121      	bne.n	8004002 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e113      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fca:	4b3d      	ldr	r3, [pc, #244]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d115      	bne.n	8004002 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e107      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003fe2:	4b37      	ldr	r3, [pc, #220]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0fb      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff2:	4b33      	ldr	r3, [pc, #204]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0f3      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004002:	4b2f      	ldr	r3, [pc, #188]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	492c      	ldr	r1, [pc, #176]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8004010:	4313      	orrs	r3, r2
 8004012:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004014:	f7fd fa72 	bl	80014fc <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d112      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004022:	e00a      	b.n	800403a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fd fa6a 	bl	80014fc <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0d7      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800403a:	4b21      	ldr	r3, [pc, #132]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0318 	and.w	r3, r3, #24
 8004042:	2b18      	cmp	r3, #24
 8004044:	d1ee      	bne.n	8004024 <HAL_RCC_ClockConfig+0x18c>
 8004046:	e043      	b.n	80040d0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d112      	bne.n	8004076 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004050:	e00a      	b.n	8004068 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004052:	f7fd fa53 	bl	80014fc <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e0c0      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004068:	4b15      	ldr	r3, [pc, #84]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f003 0318 	and.w	r3, r3, #24
 8004070:	2b10      	cmp	r3, #16
 8004072:	d1ee      	bne.n	8004052 <HAL_RCC_ClockConfig+0x1ba>
 8004074:	e02c      	b.n	80040d0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d122      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fd fa3c 	bl	80014fc <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0a9      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004096:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <HAL_RCC_ClockConfig+0x228>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 0318 	and.w	r3, r3, #24
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d1ee      	bne.n	8004080 <HAL_RCC_ClockConfig+0x1e8>
 80040a2:	e015      	b.n	80040d0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fd fa2a 	bl	80014fc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d906      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e097      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
 80040ba:	bf00      	nop
 80040bc:	40022000 	.word	0x40022000
 80040c0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f003 0318 	and.w	r3, r3, #24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e9      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d010      	beq.n	80040fe <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	4b44      	ldr	r3, [pc, #272]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d208      	bcs.n	80040fe <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80040ec:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f023 020f 	bic.w	r2, r3, #15
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	493e      	ldr	r1, [pc, #248]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040fe:	4b3e      	ldr	r3, [pc, #248]	@ (80041f8 <HAL_RCC_ClockConfig+0x360>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d210      	bcs.n	800412e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410c:	4b3a      	ldr	r3, [pc, #232]	@ (80041f8 <HAL_RCC_ClockConfig+0x360>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f023 020f 	bic.w	r2, r3, #15
 8004114:	4938      	ldr	r1, [pc, #224]	@ (80041f8 <HAL_RCC_ClockConfig+0x360>)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411c:	4b36      	ldr	r3, [pc, #216]	@ (80041f8 <HAL_RCC_ClockConfig+0x360>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d001      	beq.n	800412e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e05d      	b.n	80041ea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d010      	beq.n	800415c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004146:	429a      	cmp	r2, r3
 8004148:	d208      	bcs.n	800415c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800414a:	4b2a      	ldr	r3, [pc, #168]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	4927      	ldr	r1, [pc, #156]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004176:	429a      	cmp	r2, r3
 8004178:	d209      	bcs.n	800418e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800417a:	4b1e      	ldr	r3, [pc, #120]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	491a      	ldr	r1, [pc, #104]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 800418a:	4313      	orrs	r3, r2
 800418c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d012      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d209      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	490e      	ldr	r1, [pc, #56]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80041c0:	f000 f822 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	490b      	ldr	r1, [pc, #44]	@ (80041fc <HAL_RCC_ClockConfig+0x364>)
 80041d0:	5ccb      	ldrb	r3, [r1, r3]
 80041d2:	fa22 f303 	lsr.w	r3, r2, r3
 80041d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <HAL_RCC_ClockConfig+0x368>)
 80041d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041da:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x36c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd f902 	bl	80013e8 <HAL_InitTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80041e8:	7afb      	ldrb	r3, [r7, #11]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	44020c00 	.word	0x44020c00
 80041f8:	40022000 	.word	0x40022000
 80041fc:	0800a198 	.word	0x0800a198
 8004200:	20000000 	.word	0x20000000
 8004204:	20000018 	.word	0x20000018

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	@ 0x24
 800420c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800420e:	4b8c      	ldr	r3, [pc, #560]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 0318 	and.w	r3, r3, #24
 8004216:	2b08      	cmp	r3, #8
 8004218:	d102      	bne.n	8004220 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800421a:	4b8a      	ldr	r3, [pc, #552]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x23c>)
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e107      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004220:	4b87      	ldr	r3, [pc, #540]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 0318 	and.w	r3, r3, #24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d112      	bne.n	8004252 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800422c:	4b84      	ldr	r3, [pc, #528]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004238:	4b81      	ldr	r3, [pc, #516]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	08db      	lsrs	r3, r3, #3
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	4a81      	ldr	r2, [pc, #516]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x240>)
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	e0f1      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800424c:	4b7e      	ldr	r3, [pc, #504]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x240>)
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	e0ee      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004252:	4b7b      	ldr	r3, [pc, #492]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f003 0318 	and.w	r3, r3, #24
 800425a:	2b10      	cmp	r3, #16
 800425c:	d102      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800425e:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <HAL_RCC_GetSysClockFreq+0x244>)
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	e0e5      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004264:	4b76      	ldr	r3, [pc, #472]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 0318 	and.w	r3, r3, #24
 800426c:	2b18      	cmp	r3, #24
 800426e:	f040 80dd 	bne.w	800442c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004272:	4b73      	ldr	r3, [pc, #460]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800427c:	4b70      	ldr	r3, [pc, #448]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004286:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004288:	4b6d      	ldr	r3, [pc, #436]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004294:	4b6a      	ldr	r3, [pc, #424]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ac:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80b7 	beq.w	8004426 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0xbe>
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d056      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x16a>
 80042c4:	e077      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80042c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d02d      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	08db      	lsrs	r3, r3, #3
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x240>)
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fc:	4b50      	ldr	r3, [pc, #320]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 80042fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800430c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004310:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004450 <HAL_RCC_GetSysClockFreq+0x248>
 8004314:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004318:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800431c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004320:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004328:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800432c:	e065      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004338:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004454 <HAL_RCC_GetSysClockFreq+0x24c>
 800433c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004340:	4b3f      	ldr	r3, [pc, #252]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 8004342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004350:	ed97 6a02 	vldr	s12, [r7, #8]
 8004354:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004450 <HAL_RCC_GetSysClockFreq+0x248>
 8004358:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800435c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004360:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004364:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004370:	e043      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004458 <HAL_RCC_GetSysClockFreq+0x250>
 8004380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004384:	4b2e      	ldr	r3, [pc, #184]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 8004386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004394:	ed97 6a02 	vldr	s12, [r7, #8]
 8004398:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004450 <HAL_RCC_GetSysClockFreq+0x248>
 800439c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80043a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80043b4:	e021      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800445c <HAL_RCC_GetSysClockFreq+0x254>
 80043c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 80043ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80043dc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004450 <HAL_RCC_GetSysClockFreq+0x248>
 80043e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80043f8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80043fa:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x238>)
 80043fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fe:	0a5b      	lsrs	r3, r3, #9
 8004400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004404:	3301      	adds	r3, #1
 8004406:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004412:	edd7 6a06 	vldr	s13, [r7, #24]
 8004416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441e:	ee17 3a90 	vmov	r3, s15
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e004      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e001      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800442c:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x240>)
 800442e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004430:	69fb      	ldr	r3, [r7, #28]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	@ 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	44020c00 	.word	0x44020c00
 8004444:	003d0900 	.word	0x003d0900
 8004448:	03d09000 	.word	0x03d09000
 800444c:	017d7840 	.word	0x017d7840
 8004450:	46000000 	.word	0x46000000
 8004454:	4c742400 	.word	0x4c742400
 8004458:	4bbebc20 	.word	0x4bbebc20
 800445c:	4a742400 	.word	0x4a742400

08004460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004464:	f7ff fed0 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b08      	ldr	r3, [pc, #32]	@ (800448c <HAL_RCC_GetHCLKFreq+0x2c>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800446e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004472:	4907      	ldr	r1, [pc, #28]	@ (8004490 <HAL_RCC_GetHCLKFreq+0x30>)
 8004474:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004476:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800447a:	fa22 f303 	lsr.w	r3, r2, r3
 800447e:	4a05      	ldr	r2, [pc, #20]	@ (8004494 <HAL_RCC_GetHCLKFreq+0x34>)
 8004480:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004482:	4b04      	ldr	r3, [pc, #16]	@ (8004494 <HAL_RCC_GetHCLKFreq+0x34>)
 8004484:	681b      	ldr	r3, [r3, #0]
}
 8004486:	4618      	mov	r0, r3
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	44020c00 	.word	0x44020c00
 8004490:	0800a198 	.word	0x0800a198
 8004494:	20000000 	.word	0x20000000

08004498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800449c:	f7ff ffe0 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4904      	ldr	r1, [pc, #16]	@ (80044c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	44020c00 	.word	0x44020c00
 80044c0:	0800a1a8 	.word	0x0800a1a8

080044c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80044c8:	f7ff ffca 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4904      	ldr	r1, [pc, #16]	@ (80044ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	44020c00 	.word	0x44020c00
 80044ec:	0800a1a8 	.word	0x0800a1a8

080044f0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80044f4:	f7ff ffb4 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_GetPCLK3Freq+0x24>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	0b1b      	lsrs	r3, r3, #12
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	@ (8004518 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	44020c00 	.word	0x44020c00
 8004518:	0800a1a8 	.word	0x0800a1a8

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b0ba      	sub	sp, #232	@ 0xe8
 8004522:	af00      	add	r7, sp, #0
 8004524:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004528:	2300      	movs	r3, #0
 800452a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800452e:	2300      	movs	r3, #0
 8004530:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004540:	2500      	movs	r5, #0
 8004542:	ea54 0305 	orrs.w	r3, r4, r5
 8004546:	d00b      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004548:	4bcd      	ldr	r3, [pc, #820]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800454a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800454e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	4ac9      	ldr	r2, [pc, #804]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800455a:	430b      	orrs	r3, r1
 800455c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f002 0801 	and.w	r8, r2, #1
 800456c:	f04f 0900 	mov.w	r9, #0
 8004570:	ea58 0309 	orrs.w	r3, r8, r9
 8004574:	d042      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800457a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457c:	2b05      	cmp	r3, #5
 800457e:	d823      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004580:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	080045d1 	.word	0x080045d1
 800458c:	080045a1 	.word	0x080045a1
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045d1 	.word	0x080045d1
 8004598:	080045d1 	.word	0x080045d1
 800459c:	080045d1 	.word	0x080045d1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045a4:	3308      	adds	r3, #8
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 f90c 	bl	80077c4 <RCCEx_PLL2_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80045b2:	e00e      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045b8:	3330      	adds	r3, #48	@ 0x30
 80045ba:	4618      	mov	r0, r3
 80045bc:	f003 f99a 	bl	80078f4 <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80045d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80045da:	4ba9      	ldr	r3, [pc, #676]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045e0:	f023 0107 	bic.w	r1, r3, #7
 80045e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ea:	4aa5      	ldr	r2, [pc, #660]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80045f2:	e003      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045f8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f002 0a02 	and.w	sl, r2, #2
 8004608:	f04f 0b00 	mov.w	fp, #0
 800460c:	ea5a 030b 	orrs.w	r3, sl, fp
 8004610:	f000 8088 	beq.w	8004724 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461a:	2b28      	cmp	r3, #40	@ 0x28
 800461c:	d868      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800461e:	a201      	add	r2, pc, #4	@ (adr r2, 8004624 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	080046f9 	.word	0x080046f9
 8004628:	080046f1 	.word	0x080046f1
 800462c:	080046f1 	.word	0x080046f1
 8004630:	080046f1 	.word	0x080046f1
 8004634:	080046f1 	.word	0x080046f1
 8004638:	080046f1 	.word	0x080046f1
 800463c:	080046f1 	.word	0x080046f1
 8004640:	080046f1 	.word	0x080046f1
 8004644:	080046c9 	.word	0x080046c9
 8004648:	080046f1 	.word	0x080046f1
 800464c:	080046f1 	.word	0x080046f1
 8004650:	080046f1 	.word	0x080046f1
 8004654:	080046f1 	.word	0x080046f1
 8004658:	080046f1 	.word	0x080046f1
 800465c:	080046f1 	.word	0x080046f1
 8004660:	080046f1 	.word	0x080046f1
 8004664:	080046dd 	.word	0x080046dd
 8004668:	080046f1 	.word	0x080046f1
 800466c:	080046f1 	.word	0x080046f1
 8004670:	080046f1 	.word	0x080046f1
 8004674:	080046f1 	.word	0x080046f1
 8004678:	080046f1 	.word	0x080046f1
 800467c:	080046f1 	.word	0x080046f1
 8004680:	080046f1 	.word	0x080046f1
 8004684:	080046f9 	.word	0x080046f9
 8004688:	080046f1 	.word	0x080046f1
 800468c:	080046f1 	.word	0x080046f1
 8004690:	080046f1 	.word	0x080046f1
 8004694:	080046f1 	.word	0x080046f1
 8004698:	080046f1 	.word	0x080046f1
 800469c:	080046f1 	.word	0x080046f1
 80046a0:	080046f1 	.word	0x080046f1
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	080046f1 	.word	0x080046f1
 80046ac:	080046f1 	.word	0x080046f1
 80046b0:	080046f1 	.word	0x080046f1
 80046b4:	080046f1 	.word	0x080046f1
 80046b8:	080046f1 	.word	0x080046f1
 80046bc:	080046f1 	.word	0x080046f1
 80046c0:	080046f1 	.word	0x080046f1
 80046c4:	080046f9 	.word	0x080046f9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046cc:	3308      	adds	r3, #8
 80046ce:	4618      	mov	r0, r3
 80046d0:	f003 f878 	bl	80077c4 <RCCEx_PLL2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80046da:	e00e      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e0:	3330      	adds	r3, #48	@ 0x30
 80046e2:	4618      	mov	r0, r3
 80046e4:	f003 f906 	bl	80078f4 <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80046f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10c      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004702:	4b5f      	ldr	r3, [pc, #380]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004708:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800470c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004712:	4a5b      	ldr	r2, [pc, #364]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004714:	430b      	orrs	r3, r1
 8004716:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004720:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f002 0304 	and.w	r3, r2, #4
 8004730:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004734:	2300      	movs	r3, #0
 8004736:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800473a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	d04e      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800474a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800474e:	d02c      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004750:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004754:	d825      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800475a:	d028      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 800475c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004760:	d81f      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004762:	2bc0      	cmp	r3, #192	@ 0xc0
 8004764:	d025      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004766:	2bc0      	cmp	r3, #192	@ 0xc0
 8004768:	d81b      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800476a:	2b80      	cmp	r3, #128	@ 0x80
 800476c:	d00f      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800476e:	2b80      	cmp	r3, #128	@ 0x80
 8004770:	d817      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01f      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004776:	2b40      	cmp	r3, #64	@ 0x40
 8004778:	d113      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800477a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800477e:	3308      	adds	r3, #8
 8004780:	4618      	mov	r0, r3
 8004782:	f003 f81f 	bl	80077c4 <RCCEx_PLL2_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 800478c:	e014      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800478e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004792:	3330      	adds	r3, #48	@ 0x30
 8004794:	4618      	mov	r0, r3
 8004796:	f003 f8ad 	bl	80078f4 <RCCEx_PLL3_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80047a0:	e00a      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80047a8:	e006      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80047aa:	bf00      	nop
 80047ac:	e004      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80047b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10c      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80047c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80047c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047c6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80047ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80047d8:	e003      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047de:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f002 0308 	and.w	r3, r2, #8
 80047ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d056      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004808:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800480c:	d031      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800480e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004812:	d82a      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004818:	d02d      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800481a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800481e:	d824      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004820:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004824:	d029      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004826:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800482a:	d81e      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004830:	d011      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004836:	d818      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d023      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800483c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004840:	d113      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004846:	3308      	adds	r3, #8
 8004848:	4618      	mov	r0, r3
 800484a:	f002 ffbb 	bl	80077c4 <RCCEx_PLL2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004854:	e017      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800485a:	3330      	adds	r3, #48	@ 0x30
 800485c:	4618      	mov	r0, r3
 800485e:	f003 f849 	bl	80078f4 <RCCEx_PLL3_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004868:	e00d      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004870:	e009      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004872:	bf00      	nop
 8004874:	e007      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004876:	bf00      	nop
 8004878:	e005      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800487a:	bf00      	nop
 800487c:	e003      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800487e:	bf00      	nop
 8004880:	44020c00 	.word	0x44020c00
        break;
 8004884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004886:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10c      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800488e:	4bb9      	ldr	r3, [pc, #740]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004894:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800489c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800489e:	4ab5      	ldr	r2, [pc, #724]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048a0:	430b      	orrs	r3, r1
 80048a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80048a6:	e003      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048ac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f002 0310 	and.w	r3, r2, #16
 80048bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80048c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d053      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80048d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048da:	d031      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80048dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048e0:	d82a      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048e6:	d02d      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80048e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048ec:	d824      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048f2:	d029      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80048f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048f8:	d81e      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048fe:	d011      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004904:	d818      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d020      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800490e:	d113      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004910:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004914:	3308      	adds	r3, #8
 8004916:	4618      	mov	r0, r3
 8004918:	f002 ff54 	bl	80077c4 <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004922:	e014      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004928:	3330      	adds	r3, #48	@ 0x30
 800492a:	4618      	mov	r0, r3
 800492c:	f002 ffe2 	bl	80078f4 <RCCEx_PLL3_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004936:	e00a      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800493e:	e006      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004940:	bf00      	nop
 8004942:	e004      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004944:	bf00      	nop
 8004946:	e002      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004948:	bf00      	nop
 800494a:	e000      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800494c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10c      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004956:	4b87      	ldr	r3, [pc, #540]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800495c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004960:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004966:	4a83      	ldr	r2, [pc, #524]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004968:	430b      	orrs	r3, r1
 800496a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004974:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	f002 0320 	and.w	r3, r2, #32
 8004984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800498e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d053      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80049a2:	d031      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80049a4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80049a8:	d82a      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80049aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049ae:	d02d      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049b4:	d824      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80049b6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80049ba:	d029      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80049bc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80049c0:	d81e      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80049c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049c6:	d011      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049cc:	d818      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d020      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80049d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d6:	d113      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049dc:	3308      	adds	r3, #8
 80049de:	4618      	mov	r0, r3
 80049e0:	f002 fef0 	bl	80077c4 <RCCEx_PLL2_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80049ea:	e014      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049f0:	3330      	adds	r3, #48	@ 0x30
 80049f2:	4618      	mov	r0, r3
 80049f4:	f002 ff7e 	bl	80078f4 <RCCEx_PLL3_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80049fe:	e00a      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a06:	e006      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004a08:	bf00      	nop
 8004a0a:	e004      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004a0c:	bf00      	nop
 8004a0e:	e002      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a16:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004a1e:	4b55      	ldr	r3, [pc, #340]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a24:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2e:	4a51      	ldr	r2, [pc, #324]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a36:	e003      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a3c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	d053      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a66:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a6a:	d031      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004a6c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a70:	d82a      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a76:	d02d      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004a78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a7c:	d824      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a82:	d029      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004a84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a88:	d81e      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a8e:	d011      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a94:	d818      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d020      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a9e:	d113      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f002 fe8c 	bl	80077c4 <RCCEx_PLL2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004ab2:	e014      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ab4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab8:	3330      	adds	r3, #48	@ 0x30
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 ff1a 	bl	80078f4 <RCCEx_PLL3_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004ac6:	e00a      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ace:	e006      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ad0:	bf00      	nop
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ad4:	bf00      	nop
 8004ad6:	e002      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004ae6:	4b23      	ldr	r3, [pc, #140]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b1e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	d03d      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b32:	d01b      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004b34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b38:	d814      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004b3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b3e:	d017      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004b40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b44:	d80e      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d016      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4e:	d109      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b54:	3330      	adds	r3, #48	@ 0x30
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 fecc 	bl	80078f4 <RCCEx_PLL3_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004b62:	e00a      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b6a:	e006      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004b6c:	bf00      	nop
 8004b6e:	e004      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004b70:	bf00      	nop
 8004b72:	e002      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004b74:	44020c00 	.word	0x44020c00
        break;
 8004b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004b82:	4b99      	ldr	r3, [pc, #612]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b88:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b92:	4a95      	ldr	r2, [pc, #596]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b94:	430b      	orrs	r3, r1
 8004b96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ba0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d03b      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bce:	d01b      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004bd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bd4:	d814      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004bd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bda:	d017      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004bdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004be0:	d80e      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d014      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004be6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bea:	d109      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bf0:	3330      	adds	r3, #48	@ 0x30
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f002 fe7e 	bl	80078f4 <RCCEx_PLL3_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004bfe:	e008      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c06:	e004      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004c08:	bf00      	nop
 8004c0a:	e002      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004c0c:	bf00      	nop
 8004c0e:	e000      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004c1a:	4b73      	ldr	r3, [pc, #460]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c20:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c2a:	4a6f      	ldr	r2, [pc, #444]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c32:	e003      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c38:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c56:	460b      	mov	r3, r1
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	d03d      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c68:	d01b      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004c6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c6e:	d814      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004c70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c74:	d017      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004c76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c7a:	d80e      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d014      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004c80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c84:	d109      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c8a:	3330      	adds	r3, #48	@ 0x30
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f002 fe31 	bl	80078f4 <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ca0:	e004      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cc6:	4a48      	ldr	r2, [pc, #288]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004cce:	e003      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004cee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d035      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d04:	d015      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004d06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d0a:	d80e      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d012      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d14:	d109      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d1a:	3330      	adds	r3, #48	@ 0x30
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f002 fde9 	bl	80078f4 <RCCEx_PLL3_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004d28:	e006      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d30:	e002      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10d      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004d40:	4b29      	ldr	r3, [pc, #164]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d46:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d52:	4a25      	ldr	r2, [pc, #148]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d54:	430b      	orrs	r3, r1
 8004d56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d5a:	e003      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d60:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d7a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4313      	orrs	r3, r2
 8004d82:	d037      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d90:	d015      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d96:	d80e      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004d9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004da0:	d109      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da6:	3330      	adds	r3, #48	@ 0x30
 8004da8:	4618      	mov	r0, r3
 8004daa:	f002 fda3 	bl	80078f4 <RCCEx_PLL3_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004db4:	e006      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004dc2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004dc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10f      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004dcc:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dd2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dde:	4a02      	ldr	r2, [pc, #8]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004de6:	e005      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8004de8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004df0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e06:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004e10:	4bb8      	ldr	r3, [pc, #736]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	4ab7      	ldr	r2, [pc, #732]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e1a:	61d3      	str	r3, [r2, #28]
 8004e1c:	4bb5      	ldr	r3, [pc, #724]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e1e:	69d9      	ldr	r1, [r3, #28]
 8004e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e24:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004e28:	4ab2      	ldr	r2, [pc, #712]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e44:	460b      	mov	r3, r1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	d055      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e52:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004e56:	d031      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004e58:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004e5c:	d82a      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e62:	d02d      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e68:	d824      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004e6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e6e:	d029      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004e70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e74:	d81e      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7a:	d011      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e80:	d818      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d020      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8a:	d113      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e90:	3308      	adds	r3, #8
 8004e92:	4618      	mov	r0, r3
 8004e94:	f002 fc96 	bl	80077c4 <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004e9e:	e014      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea4:	3330      	adds	r3, #48	@ 0x30
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f002 fd24 	bl	80078f4 <RCCEx_PLL3_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004eb2:	e00a      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004eba:	e006      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004ebc:	bf00      	nop
 8004ebe:	e004      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004ec0:	bf00      	nop
 8004ec2:	e002      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004ec4:	bf00      	nop
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004ed2:	4b88      	ldr	r3, [pc, #544]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ed4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ed8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee4:	4a83      	ldr	r2, [pc, #524]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004eec:	e003      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ef2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f04:	2300      	movs	r3, #0
 8004f06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f08:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	d055      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f1e:	d031      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004f20:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f24:	d82a      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f2a:	d02d      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f30:	d824      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004f32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f36:	d029      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f3c:	d81e      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f42:	d011      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f48:	d818      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d020      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f52:	d113      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f58:	3308      	adds	r3, #8
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 fc32 	bl	80077c4 <RCCEx_PLL2_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004f66:	e014      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f6c:	3330      	adds	r3, #48	@ 0x30
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f002 fcc0 	bl	80078f4 <RCCEx_PLL3_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f82:	e006      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004f84:	bf00      	nop
 8004f86:	e004      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e002      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004f8c:	bf00      	nop
 8004f8e:	e000      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f92:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004f9a:	4b56      	ldr	r3, [pc, #344]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004f9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004fa0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	4a51      	ldr	r2, [pc, #324]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004fb4:	e003      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004fca:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fcc:	2300      	movs	r3, #0
 8004fce:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	d032      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d80f      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d211      	bcs.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d911      	bls.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d109      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 fbe3 	bl	80077c4 <RCCEx_PLL2_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005004:	e006      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800500c:	e002      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005014:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10d      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800501c:	4b35      	ldr	r3, [pc, #212]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800501e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005022:	f023 0107 	bic.w	r1, r3, #7
 8005026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800502a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800502e:	4a31      	ldr	r2, [pc, #196]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005030:	430b      	orrs	r3, r1
 8005032:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005036:	e003      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800503c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	2100      	movs	r1, #0
 800504a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800504c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005052:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005056:	460b      	mov	r3, r1
 8005058:	4313      	orrs	r3, r2
 800505a:	d024      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800505c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005060:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8005068:	2b08      	cmp	r3, #8
 800506a:	d005      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005072:	e002      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10d      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005082:	4b1c      	ldr	r3, [pc, #112]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005088:	f023 0108 	bic.w	r1, r3, #8
 800508c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005094:	4a17      	ldr	r2, [pc, #92]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005096:	430b      	orrs	r3, r1
 8005098:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800509c:	e003      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050a2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80050b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050b4:	2300      	movs	r3, #0
 80050b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80050b8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80050bc:	460b      	mov	r3, r1
 80050be:	4313      	orrs	r3, r2
 80050c0:	f000 80b9 	beq.w	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80050c4:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	4a0b      	ldr	r2, [pc, #44]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050d0:	f7fc fa14 	bl	80014fc <HAL_GetTick>
 80050d4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80050d8:	e010      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050da:	f7fc fa0f 	bl	80014fc <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d908      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050f0:	e00a      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80050f2:	bf00      	nop
 80050f4:	44020c00 	.word	0x44020c00
 80050f8:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80050fc:	4bba      	ldr	r3, [pc, #744]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0e8      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005108:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800510c:	2b00      	cmp	r3, #0
 800510e:	f040 808e 	bne.w	800522e <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005112:	4bb6      	ldr	r3, [pc, #728]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800511c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d023      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800512c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005134:	4293      	cmp	r3, r2
 8005136:	d01b      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005138:	4bac      	ldr	r3, [pc, #688]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800513a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800513e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005146:	4ba9      	ldr	r3, [pc, #676]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800514c:	4aa7      	ldr	r2, [pc, #668]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800514e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005152:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005156:	4ba5      	ldr	r3, [pc, #660]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800515c:	4aa3      	ldr	r2, [pc, #652]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800515e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005162:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005166:	4aa1      	ldr	r2, [pc, #644]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d019      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fc f9be 	bl	80014fc <HAL_GetTick>
 8005180:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005184:	e00d      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005186:	f7fc f9b9 	bl	80014fc <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005190:	1ad2      	subs	r2, r2, r3
 8005192:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005196:	429a      	cmp	r2, r3
 8005198:	d903      	bls.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80051a0:	e006      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a2:	4b92      	ldr	r3, [pc, #584]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0ea      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80051b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d135      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80051b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051c8:	d110      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80051ca:	4b88      	ldr	r3, [pc, #544]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80051d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051e0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80051e4:	4a81      	ldr	r2, [pc, #516]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051e6:	430b      	orrs	r3, r1
 80051e8:	61d3      	str	r3, [r2, #28]
 80051ea:	e005      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80051ec:	4b7f      	ldr	r3, [pc, #508]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	4a7e      	ldr	r2, [pc, #504]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051f6:	61d3      	str	r3, [r2, #28]
 80051f8:	4b7c      	ldr	r3, [pc, #496]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051fe:	4a7b      	ldr	r2, [pc, #492]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005204:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005208:	4b78      	ldr	r3, [pc, #480]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800520a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800520e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005212:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800521a:	4a74      	ldr	r2, [pc, #464]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800521c:	430b      	orrs	r3, r1
 800521e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005222:	e008      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005224:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005228:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005232:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005244:	2300      	movs	r3, #0
 8005246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005248:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800524c:	460b      	mov	r3, r1
 800524e:	4313      	orrs	r3, r2
 8005250:	d035      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800525a:	2b30      	cmp	r3, #48	@ 0x30
 800525c:	d014      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800525e:	2b30      	cmp	r3, #48	@ 0x30
 8005260:	d80e      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005262:	2b20      	cmp	r3, #32
 8005264:	d012      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005266:	2b20      	cmp	r3, #32
 8005268:	d80a      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d010      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800526e:	2b10      	cmp	r3, #16
 8005270:	d106      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005272:	4b5e      	ldr	r3, [pc, #376]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005276:	4a5d      	ldr	r2, [pc, #372]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800527e:	e008      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005286:	e004      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005288:	bf00      	nop
 800528a:	e002      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800528c:	bf00      	nop
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005292:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10d      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800529a:	4b54      	ldr	r3, [pc, #336]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800529c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80052a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ac:	4a4f      	ldr	r2, [pc, #316]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052b4:	e003      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80052ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80052cc:	2300      	movs	r3, #0
 80052ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80052d4:	460b      	mov	r3, r1
 80052d6:	4313      	orrs	r3, r2
 80052d8:	d033      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80052da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 80052e6:	2b40      	cmp	r3, #64	@ 0x40
 80052e8:	d007      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80052ea:	e010      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ec:	4b3f      	ldr	r3, [pc, #252]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	4a3e      	ldr	r2, [pc, #248]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80052f8:	e00d      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052fe:	3308      	adds	r3, #8
 8005300:	4618      	mov	r0, r3
 8005302:	f002 fa5f 	bl	80077c4 <RCCEx_PLL2_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800530c:	e003      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005316:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10d      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800531e:	4b33      	ldr	r3, [pc, #204]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005320:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005324:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800532c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005330:	4a2e      	ldr	r2, [pc, #184]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005332:	430b      	orrs	r3, r1
 8005334:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005338:	e003      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800533e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800534e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005350:	2300      	movs	r3, #0
 8005352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005354:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005358:	460b      	mov	r3, r1
 800535a:	4313      	orrs	r3, r2
 800535c:	d04c      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800535e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005366:	2b04      	cmp	r3, #4
 8005368:	d827      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800536a:	a201      	add	r2, pc, #4	@ (adr r2, 8005370 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	08005385 	.word	0x08005385
 8005374:	08005393 	.word	0x08005393
 8005378:	080053a7 	.word	0x080053a7
 800537c:	080053c3 	.word	0x080053c3
 8005380:	080053c3 	.word	0x080053c3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005384:	4b19      	ldr	r3, [pc, #100]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	4a18      	ldr	r2, [pc, #96]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800538a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800538e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005390:	e018      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005396:	3308      	adds	r3, #8
 8005398:	4618      	mov	r0, r3
 800539a:	f002 fa13 	bl	80077c4 <RCCEx_PLL2_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80053a4:	e00e      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053aa:	3330      	adds	r3, #48	@ 0x30
 80053ac:	4618      	mov	r0, r3
 80053ae:	f002 faa1 	bl	80078f4 <RCCEx_PLL3_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80053b8:	e004      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053c0:	e000      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80053c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d111      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80053cc:	4b07      	ldr	r3, [pc, #28]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053d2:	f023 0107 	bic.w	r1, r3, #7
 80053d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053de:	4a03      	ldr	r2, [pc, #12]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053e0:	430b      	orrs	r3, r1
 80053e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053e6:	e007      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80053e8:	44020800 	.word	0x44020800
 80053ec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80053f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005404:	633b      	str	r3, [r7, #48]	@ 0x30
 8005406:	2300      	movs	r3, #0
 8005408:	637b      	str	r3, [r7, #52]	@ 0x34
 800540a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800540e:	460b      	mov	r3, r1
 8005410:	4313      	orrs	r3, r2
 8005412:	f000 8081 	beq.w	8005518 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800541a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800541e:	2b20      	cmp	r3, #32
 8005420:	d85f      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005422:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	080054ad 	.word	0x080054ad
 800542c:	080054e3 	.word	0x080054e3
 8005430:	080054e3 	.word	0x080054e3
 8005434:	080054e3 	.word	0x080054e3
 8005438:	080054e3 	.word	0x080054e3
 800543c:	080054e3 	.word	0x080054e3
 8005440:	080054e3 	.word	0x080054e3
 8005444:	080054e3 	.word	0x080054e3
 8005448:	080054bb 	.word	0x080054bb
 800544c:	080054e3 	.word	0x080054e3
 8005450:	080054e3 	.word	0x080054e3
 8005454:	080054e3 	.word	0x080054e3
 8005458:	080054e3 	.word	0x080054e3
 800545c:	080054e3 	.word	0x080054e3
 8005460:	080054e3 	.word	0x080054e3
 8005464:	080054e3 	.word	0x080054e3
 8005468:	080054cf 	.word	0x080054cf
 800546c:	080054e3 	.word	0x080054e3
 8005470:	080054e3 	.word	0x080054e3
 8005474:	080054e3 	.word	0x080054e3
 8005478:	080054e3 	.word	0x080054e3
 800547c:	080054e3 	.word	0x080054e3
 8005480:	080054e3 	.word	0x080054e3
 8005484:	080054e3 	.word	0x080054e3
 8005488:	080054eb 	.word	0x080054eb
 800548c:	080054e3 	.word	0x080054e3
 8005490:	080054e3 	.word	0x080054e3
 8005494:	080054e3 	.word	0x080054e3
 8005498:	080054e3 	.word	0x080054e3
 800549c:	080054e3 	.word	0x080054e3
 80054a0:	080054e3 	.word	0x080054e3
 80054a4:	080054e3 	.word	0x080054e3
 80054a8:	080054eb 	.word	0x080054eb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ac:	4bb9      	ldr	r3, [pc, #740]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	4ab8      	ldr	r2, [pc, #736]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80054b8:	e018      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054be:	3308      	adds	r3, #8
 80054c0:	4618      	mov	r0, r3
 80054c2:	f002 f97f 	bl	80077c4 <RCCEx_PLL2_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80054cc:	e00e      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054d2:	3330      	adds	r3, #48	@ 0x30
 80054d4:	4618      	mov	r0, r3
 80054d6:	f002 fa0d 	bl	80078f4 <RCCEx_PLL3_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80054e0:	e004      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80054ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10d      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80054f4:	4ba7      	ldr	r3, [pc, #668]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80054fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005502:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005506:	4aa3      	ldr	r2, [pc, #652]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005508:	430b      	orrs	r3, r1
 800550a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005514:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005526:	2300      	movs	r3, #0
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800552a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800552e:	460b      	mov	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	d04e      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800553c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005540:	d02e      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005546:	d827      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005548:	2bc0      	cmp	r3, #192	@ 0xc0
 800554a:	d02b      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800554c:	2bc0      	cmp	r3, #192	@ 0xc0
 800554e:	d823      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005550:	2b80      	cmp	r3, #128	@ 0x80
 8005552:	d017      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005554:	2b80      	cmp	r3, #128	@ 0x80
 8005556:	d81f      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 800555c:	2b40      	cmp	r3, #64	@ 0x40
 800555e:	d007      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005560:	e01a      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005562:	4b8c      	ldr	r3, [pc, #560]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	4a8b      	ldr	r2, [pc, #556]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800556e:	e01a      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005574:	3308      	adds	r3, #8
 8005576:	4618      	mov	r0, r3
 8005578:	f002 f924 	bl	80077c4 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005582:	e010      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005588:	3330      	adds	r3, #48	@ 0x30
 800558a:	4618      	mov	r0, r3
 800558c:	f002 f9b2 	bl	80078f4 <RCCEx_PLL3_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005596:	e006      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800559e:	e002      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80055a0:	bf00      	nop
 80055a2:	e000      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80055a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10d      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80055ae:	4b79      	ldr	r3, [pc, #484]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80055b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055b4:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80055b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055c0:	4974      	ldr	r1, [pc, #464]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80055c8:	e003      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055ce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80055d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	2300      	movs	r3, #0
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80055e8:	460b      	mov	r3, r1
 80055ea:	4313      	orrs	r3, r2
 80055ec:	d055      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80055ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80055fa:	d031      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 80055fc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005600:	d82a      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005606:	d02d      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800560c:	d824      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800560e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005612:	d029      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005614:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005618:	d81e      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800561a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800561e:	d011      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005624:	d818      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d020      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800562a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800562e:	d113      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005634:	3308      	adds	r3, #8
 8005636:	4618      	mov	r0, r3
 8005638:	f002 f8c4 	bl	80077c4 <RCCEx_PLL2_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005642:	e014      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005648:	3330      	adds	r3, #48	@ 0x30
 800564a:	4618      	mov	r0, r3
 800564c:	f002 f952 	bl	80078f4 <RCCEx_PLL3_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005656:	e00a      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800565e:	e006      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005660:	bf00      	nop
 8005662:	e004      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800566c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10d      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005676:	4b47      	ldr	r3, [pc, #284]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800567c:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005684:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005688:	4942      	ldr	r1, [pc, #264]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005690:	e003      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005692:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005696:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	2100      	movs	r1, #0
 80056a4:	61b9      	str	r1, [r7, #24]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80056b0:	460b      	mov	r3, r1
 80056b2:	4313      	orrs	r3, r2
 80056b4:	d03c      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80056b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d81b      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80056c2:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	08005703 	.word	0x08005703
 80056cc:	080056d9 	.word	0x080056d9
 80056d0:	080056e7 	.word	0x080056e7
 80056d4:	08005703 	.word	0x08005703
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80056de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80056e4:	e00e      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ea:	3308      	adds	r3, #8
 80056ec:	4618      	mov	r0, r3
 80056ee:	f002 f869 	bl	80077c4 <RCCEx_PLL2_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80056f8:	e004      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005700:	e000      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005704:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10d      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800570c:	4b21      	ldr	r3, [pc, #132]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800570e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005712:	f023 0203 	bic.w	r2, r3, #3
 8005716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800571a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800571e:	491d      	ldr	r1, [pc, #116]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005726:	e003      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005728:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800572c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	2100      	movs	r1, #0
 800573a:	6139      	str	r1, [r7, #16]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005746:	460b      	mov	r3, r1
 8005748:	4313      	orrs	r3, r2
 800574a:	d03c      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800574c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005758:	d00e      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800575a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800575e:	d815      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d019      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005768:	d110      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576a:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	4a09      	ldr	r2, [pc, #36]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005774:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005776:	e010      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800577c:	3308      	adds	r3, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f002 f820 	bl	80077c4 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800578a:	e006      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005792:	e002      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005794:	44020c00 	.word	0x44020c00
        break;
 8005798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80057a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80057a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057b4:	4938      	ldr	r1, [pc, #224]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80057bc:	e003      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057c2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	2100      	movs	r1, #0
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d038      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80057e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80057ea:	2b30      	cmp	r3, #48	@ 0x30
 80057ec:	d01b      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80057ee:	2b30      	cmp	r3, #48	@ 0x30
 80057f0:	d815      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80057f2:	2b10      	cmp	r3, #16
 80057f4:	d002      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d007      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80057fa:	e010      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057fc:	4b26      	ldr	r3, [pc, #152]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	4a25      	ldr	r2, [pc, #148]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005806:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005808:	e00e      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800580a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800580e:	3330      	adds	r3, #48	@ 0x30
 8005810:	4618      	mov	r0, r3
 8005812:	f002 f86f 	bl	80078f4 <RCCEx_PLL3_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800581c:	e004      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005828:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10d      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005830:	4b19      	ldr	r3, [pc, #100]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005836:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800583a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800583e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005842:	4915      	ldr	r1, [pc, #84]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800584a:	e003      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005850:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	2100      	movs	r1, #0
 800585e:	6039      	str	r1, [r7, #0]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	e9d7 1200 	ldrd	r1, r2, [r7]
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d00c      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005870:	4b09      	ldr	r3, [pc, #36]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005876:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800587a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005882:	4905      	ldr	r1, [pc, #20]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800588a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800588e:	4618      	mov	r0, r3
 8005890:	37e8      	adds	r7, #232	@ 0xe8
 8005892:	46bd      	mov	sp, r7
 8005894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005898:	44020c00 	.word	0x44020c00

0800589c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800589c:	b480      	push	{r7}
 800589e:	b08b      	sub	sp, #44	@ 0x2c
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80058a4:	4bae      	ldr	r3, [pc, #696]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ac:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80058ae:	4bac      	ldr	r3, [pc, #688]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80058b8:	4ba9      	ldr	r3, [pc, #676]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058c2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80058c4:	4ba6      	ldr	r3, [pc, #664]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80058d0:	4ba3      	ldr	r3, [pc, #652]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d4:	08db      	lsrs	r3, r3, #3
 80058d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8126 	beq.w	8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d053      	beq.n	80059a2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d86f      	bhi.n	80059e0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d003      	beq.n	800590e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d02b      	beq.n	8005964 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800590c:	e068      	b.n	80059e0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800590e:	4b94      	ldr	r3, [pc, #592]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	08db      	lsrs	r3, r3, #3
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	4a92      	ldr	r2, [pc, #584]	@ (8005b64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800591a:	fa22 f303 	lsr.w	r3, r2, r3
 800591e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005942:	ed97 6a04 	vldr	s12, [r7, #16]
 8005946:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800594a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005962:	e068      	b.n	8005a36 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005b6c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	ee07 3a90 	vmov	s15, r3
 800597c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005980:	ed97 6a04 	vldr	s12, [r7, #16]
 8005984:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80059a0:	e049      	b.n	8005a36 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ac:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80059b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a04 	vldr	s12, [r7, #16]
 80059c2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80059de:	e02a      	b.n	8005a36 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	08db      	lsrs	r3, r3, #3
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005b64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a14:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a18:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005a34:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a36:	4b4a      	ldr	r3, [pc, #296]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a42:	d121      	bne.n	8005a88 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005a44:	4b46      	ldr	r3, [pc, #280]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d017      	beq.n	8005a80 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a50:	4b43      	ldr	r3, [pc, #268]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a54:	0a5b      	lsrs	r3, r3, #9
 8005a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a66:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005a6a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a76:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e006      	b.n	8005a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e002      	b.n	8005a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a8e:	4b34      	ldr	r3, [pc, #208]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a9a:	d121      	bne.n	8005ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005a9c:	4b30      	ldr	r3, [pc, #192]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d017      	beq.n	8005ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005abe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005ac2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ace:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	605a      	str	r2, [r3, #4]
 8005ad6:	e006      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	e002      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005af2:	d121      	bne.n	8005b38 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005af4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d017      	beq.n	8005b30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b00:	4b17      	ldr	r3, [pc, #92]	@ (8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b04:	0e1b      	lsrs	r3, r3, #24
 8005b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b16:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005b1a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b26:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b2e:	e010      	b.n	8005b52 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]
}
 8005b36:	e00c      	b.n	8005b52 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	609a      	str	r2, [r3, #8]
}
 8005b3e:	e008      	b.n	8005b52 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	609a      	str	r2, [r3, #8]
}
 8005b52:	bf00      	nop
 8005b54:	372c      	adds	r7, #44	@ 0x2c
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	44020c00 	.word	0x44020c00
 8005b64:	03d09000 	.word	0x03d09000
 8005b68:	46000000 	.word	0x46000000
 8005b6c:	4a742400 	.word	0x4a742400
 8005b70:	4bbebc20 	.word	0x4bbebc20

08005b74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b08b      	sub	sp, #44	@ 0x2c
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005b7c:	4bae      	ldr	r3, [pc, #696]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b84:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005b86:	4bac      	ldr	r3, [pc, #688]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005b90:	4ba9      	ldr	r3, [pc, #676]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	0a1b      	lsrs	r3, r3, #8
 8005b96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b9a:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005b9c:	4ba6      	ldr	r3, [pc, #664]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005ba8:	4ba3      	ldr	r3, [pc, #652]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bac:	08db      	lsrs	r3, r3, #3
 8005bae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8126 	beq.w	8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d053      	beq.n	8005c7a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d86f      	bhi.n	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d003      	beq.n	8005be6 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d02b      	beq.n	8005c3c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005be4:	e068      	b.n	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005be6:	4b94      	ldr	r3, [pc, #592]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	08db      	lsrs	r3, r3, #3
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	4a92      	ldr	r2, [pc, #584]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c1e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005c3a:	e068      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c58:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c5c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005c78:	e049      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c84:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8005c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c96:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c9a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005cb6:	e02a      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	08db      	lsrs	r3, r3, #3
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cec:	ed97 6a04 	vldr	s12, [r7, #16]
 8005cf0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d0c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d1a:	d121      	bne.n	8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005d1c:	4b46      	ldr	r3, [pc, #280]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d017      	beq.n	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d28:	4b43      	ldr	r3, [pc, #268]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2c:	0a5b      	lsrs	r3, r3, #9
 8005d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005d3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005d42:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e006      	b.n	8005d66 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e002      	b.n	8005d66 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d66:	4b34      	ldr	r3, [pc, #208]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d72:	d121      	bne.n	8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005d74:	4b30      	ldr	r3, [pc, #192]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d017      	beq.n	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d80:	4b2d      	ldr	r3, [pc, #180]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d96:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005d9a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	e006      	b.n	8005dbe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	e002      	b.n	8005dbe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dca:	d121      	bne.n	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d017      	beq.n	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dd8:	4b17      	ldr	r3, [pc, #92]	@ (8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ddc:	0e1b      	lsrs	r3, r3, #24
 8005dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005dea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005df2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfe:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e06:	e010      	b.n	8005e2a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	609a      	str	r2, [r3, #8]
}
 8005e0e:	e00c      	b.n	8005e2a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	609a      	str	r2, [r3, #8]
}
 8005e16:	e008      	b.n	8005e2a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
}
 8005e2a:	bf00      	nop
 8005e2c:	372c      	adds	r7, #44	@ 0x2c
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	44020c00 	.word	0x44020c00
 8005e3c:	03d09000 	.word	0x03d09000
 8005e40:	46000000 	.word	0x46000000
 8005e44:	4a742400 	.word	0x4a742400
 8005e48:	4bbebc20 	.word	0x4bbebc20

08005e4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b08b      	sub	sp, #44	@ 0x2c
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005e54:	4bae      	ldr	r3, [pc, #696]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005e5e:	4bac      	ldr	r3, [pc, #688]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005e68:	4ba9      	ldr	r3, [pc, #676]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e72:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005e74:	4ba6      	ldr	r3, [pc, #664]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	091b      	lsrs	r3, r3, #4
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005e80:	4ba3      	ldr	r3, [pc, #652]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e84:	08db      	lsrs	r3, r3, #3
 8005e86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e98:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8126 	beq.w	80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d053      	beq.n	8005f52 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d86f      	bhi.n	8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d02b      	beq.n	8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005ebc:	e068      	b.n	8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ebe:	4b94      	ldr	r3, [pc, #592]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	4a92      	ldr	r2, [pc, #584]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005eca:	fa22 f303 	lsr.w	r3, r2, r3
 8005ece:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ef6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005f12:	e068      	b.n	8005fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	ee07 3a90 	vmov	s15, r3
 8005f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f30:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f34:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005f50:	e049      	b.n	8005fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	ee07 3a90 	vmov	s15, r3
 8005f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8005f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f72:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005f8e:	e02a      	b.n	8005fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f90:	4b5f      	ldr	r3, [pc, #380]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	08db      	lsrs	r3, r3, #3
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc4:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fc8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005fe4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff2:	d121      	bne.n	8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005ff4:	4b46      	ldr	r3, [pc, #280]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d017      	beq.n	8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006000:	4b43      	ldr	r3, [pc, #268]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006004:	0a5b      	lsrs	r3, r3, #9
 8006006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006016:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800601a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800601e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006026:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e006      	b.n	800603e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e002      	b.n	800603e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800603e:	4b34      	ldr	r3, [pc, #208]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604a:	d121      	bne.n	8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800604c:	4b30      	ldr	r3, [pc, #192]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d017      	beq.n	8006088 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006058:	4b2d      	ldr	r3, [pc, #180]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800605a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800606a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800606e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006072:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800607a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	605a      	str	r2, [r3, #4]
 8006086:	e006      	b.n	8006096 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	e002      	b.n	8006096 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006096:	4b1e      	ldr	r3, [pc, #120]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a2:	d121      	bne.n	80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80060a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80060a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d017      	beq.n	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060b0:	4b17      	ldr	r3, [pc, #92]	@ (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80060b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b4:	0e1b      	lsrs	r3, r3, #24
 80060b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80060c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060c6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80060ca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80060ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80060de:	e010      	b.n	8006102 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	609a      	str	r2, [r3, #8]
}
 80060e6:	e00c      	b.n	8006102 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	609a      	str	r2, [r3, #8]
}
 80060ee:	e008      	b.n	8006102 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	609a      	str	r2, [r3, #8]
}
 8006102:	bf00      	nop
 8006104:	372c      	adds	r7, #44	@ 0x2c
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	44020c00 	.word	0x44020c00
 8006114:	03d09000 	.word	0x03d09000
 8006118:	46000000 	.word	0x46000000
 800611c:	4a742400 	.word	0x4a742400
 8006120:	4bbebc20 	.word	0x4bbebc20

08006124 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b08f      	sub	sp, #60	@ 0x3c
 8006128:	af00      	add	r7, sp, #0
 800612a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800612e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006132:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006136:	4321      	orrs	r1, r4
 8006138:	d150      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800613a:	4b26      	ldr	r3, [pc, #152]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800613c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006140:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006144:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006146:	4b23      	ldr	r3, [pc, #140]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d108      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615a:	d104      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800615c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006160:	637b      	str	r3, [r7, #52]	@ 0x34
 8006162:	f001 bb20 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006166:	4b1b      	ldr	r3, [pc, #108]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800616c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006174:	d108      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800617c:	d104      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800617e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006182:	637b      	str	r3, [r7, #52]	@ 0x34
 8006184:	f001 bb0f 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006188:	4b12      	ldr	r3, [pc, #72]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006194:	d119      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619c:	d115      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800619e:	4b0d      	ldr	r3, [pc, #52]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80061a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061aa:	d30a      	bcc.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80061ac:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061b6:	4a08      	ldr	r2, [pc, #32]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80061be:	f001 baf2 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80061c6:	f001 baee 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ce:	f001 baea 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80061d2:	bf00      	nop
 80061d4:	44020c00 	.word	0x44020c00
 80061d8:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80061dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061e0:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 80061e4:	ea50 0104 	orrs.w	r1, r0, r4
 80061e8:	f000 8615 	beq.w	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 80061ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061f0:	2801      	cmp	r0, #1
 80061f2:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 80061f6:	f081 82d3 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061fe:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006202:	ea50 0104 	orrs.w	r1, r0, r4
 8006206:	f000 84d8 	beq.w	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800620a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800620e:	2801      	cmp	r0, #1
 8006210:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006214:	f081 82c4 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800621c:	f1a1 0410 	sub.w	r4, r1, #16
 8006220:	ea50 0104 	orrs.w	r1, r0, r4
 8006224:	f001 8288 	beq.w	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8006228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800622c:	2801      	cmp	r0, #1
 800622e:	f171 0110 	sbcs.w	r1, r1, #16
 8006232:	f081 82b5 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006236:	e9d7 0100 	ldrd	r0, r1, [r7]
 800623a:	f1a1 0408 	sub.w	r4, r1, #8
 800623e:	ea50 0104 	orrs.w	r1, r0, r4
 8006242:	f001 81fe 	beq.w	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8006246:	e9d7 0100 	ldrd	r0, r1, [r7]
 800624a:	2801      	cmp	r0, #1
 800624c:	f171 0108 	sbcs.w	r1, r1, #8
 8006250:	f081 82a6 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006254:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006258:	1f0c      	subs	r4, r1, #4
 800625a:	ea50 0104 	orrs.w	r1, r0, r4
 800625e:	f000 8753 	beq.w	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8006262:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006266:	2801      	cmp	r0, #1
 8006268:	f171 0104 	sbcs.w	r1, r1, #4
 800626c:	f081 8298 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006274:	1e8c      	subs	r4, r1, #2
 8006276:	ea50 0104 	orrs.w	r1, r0, r4
 800627a:	f001 8173 	beq.w	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 800627e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006282:	2801      	cmp	r0, #1
 8006284:	f171 0102 	sbcs.w	r1, r1, #2
 8006288:	f081 828a 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800628c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006290:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006294:	4321      	orrs	r1, r4
 8006296:	f001 80fe 	beq.w	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800629a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800629e:	4ccb      	ldr	r4, [pc, #812]	@ (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80062a0:	42a0      	cmp	r0, r4
 80062a2:	f171 0100 	sbcs.w	r1, r1, #0
 80062a6:	f081 827b 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ae:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80062b2:	4321      	orrs	r1, r4
 80062b4:	f001 8076 	beq.w	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 80062b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062bc:	4cc4      	ldr	r4, [pc, #784]	@ (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80062be:	42a0      	cmp	r0, r4
 80062c0:	f171 0100 	sbcs.w	r1, r1, #0
 80062c4:	f081 826c 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062cc:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80062d0:	4321      	orrs	r1, r4
 80062d2:	f000 87b5 	beq.w	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 80062d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062da:	4cbe      	ldr	r4, [pc, #760]	@ (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 80062dc:	42a0      	cmp	r0, r4
 80062de:	f171 0100 	sbcs.w	r1, r1, #0
 80062e2:	f081 825d 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ea:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80062ee:	4321      	orrs	r1, r4
 80062f0:	f000 8738 	beq.w	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80062f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062f8:	4cb7      	ldr	r4, [pc, #732]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 80062fa:	42a0      	cmp	r0, r4
 80062fc:	f171 0100 	sbcs.w	r1, r1, #0
 8006300:	f081 824e 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006304:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006308:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800630c:	4321      	orrs	r1, r4
 800630e:	f001 81cd 	beq.w	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8006312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006316:	4cb1      	ldr	r4, [pc, #708]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8006318:	42a0      	cmp	r0, r4
 800631a:	f171 0100 	sbcs.w	r1, r1, #0
 800631e:	f081 823f 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006326:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800632a:	4321      	orrs	r1, r4
 800632c:	f000 80d9 	beq.w	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006334:	4caa      	ldr	r4, [pc, #680]	@ (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8006336:	42a0      	cmp	r0, r4
 8006338:	f171 0100 	sbcs.w	r1, r1, #0
 800633c:	f081 8230 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006344:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8006348:	4321      	orrs	r1, r4
 800634a:	f000 83da 	beq.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800634e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006352:	4ca4      	ldr	r4, [pc, #656]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8006354:	42a0      	cmp	r0, r4
 8006356:	f171 0100 	sbcs.w	r1, r1, #0
 800635a:	f081 8221 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800635e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006362:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006366:	4321      	orrs	r1, r4
 8006368:	f000 8627 	beq.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 800636c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006370:	4c9d      	ldr	r4, [pc, #628]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8006372:	42a0      	cmp	r0, r4
 8006374:	f171 0100 	sbcs.w	r1, r1, #0
 8006378:	f081 8212 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800637c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006380:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006384:	4321      	orrs	r1, r4
 8006386:	f000 857a 	beq.w	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800638a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800638e:	4c97      	ldr	r4, [pc, #604]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8006390:	42a0      	cmp	r0, r4
 8006392:	f171 0100 	sbcs.w	r1, r1, #0
 8006396:	f081 8203 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800639a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800639e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80063a2:	4321      	orrs	r1, r4
 80063a4:	f000 84fb 	beq.w	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80063a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ac:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80063b0:	f171 0100 	sbcs.w	r1, r1, #0
 80063b4:	f081 81f4 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063bc:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80063c0:	4321      	orrs	r1, r4
 80063c2:	f000 84a9 	beq.w	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80063c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ca:	f248 0401 	movw	r4, #32769	@ 0x8001
 80063ce:	42a0      	cmp	r0, r4
 80063d0:	f171 0100 	sbcs.w	r1, r1, #0
 80063d4:	f081 81e4 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063dc:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80063e0:	4321      	orrs	r1, r4
 80063e2:	f000 8456 	beq.w	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 80063e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ea:	f244 0401 	movw	r4, #16385	@ 0x4001
 80063ee:	42a0      	cmp	r0, r4
 80063f0:	f171 0100 	sbcs.w	r1, r1, #0
 80063f4:	f081 81d4 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063fc:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006400:	4321      	orrs	r1, r4
 8006402:	f000 8403 	beq.w	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800640a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800640e:	42a0      	cmp	r0, r4
 8006410:	f171 0100 	sbcs.w	r1, r1, #0
 8006414:	f081 81c4 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800641c:	2821      	cmp	r0, #33	@ 0x21
 800641e:	f171 0100 	sbcs.w	r1, r1, #0
 8006422:	d255      	bcs.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006428:	4301      	orrs	r1, r0
 800642a:	f001 81b9 	beq.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800642e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006432:	1e42      	subs	r2, r0, #1
 8006434:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8006438:	2a20      	cmp	r2, #32
 800643a:	f173 0100 	sbcs.w	r1, r3, #0
 800643e:	f081 81af 	bcs.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006442:	2a1f      	cmp	r2, #31
 8006444:	f201 81ac 	bhi.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006448:	a101      	add	r1, pc, #4	@ (adr r1, 8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800644a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006527 	.word	0x08006527
 8006454:	08006625 	.word	0x08006625
 8006458:	080077a1 	.word	0x080077a1
 800645c:	080066e5 	.word	0x080066e5
 8006460:	080077a1 	.word	0x080077a1
 8006464:	080077a1 	.word	0x080077a1
 8006468:	080077a1 	.word	0x080077a1
 800646c:	080067b5 	.word	0x080067b5
 8006470:	080077a1 	.word	0x080077a1
 8006474:	080077a1 	.word	0x080077a1
 8006478:	080077a1 	.word	0x080077a1
 800647c:	080077a1 	.word	0x080077a1
 8006480:	080077a1 	.word	0x080077a1
 8006484:	080077a1 	.word	0x080077a1
 8006488:	080077a1 	.word	0x080077a1
 800648c:	08006899 	.word	0x08006899
 8006490:	080077a1 	.word	0x080077a1
 8006494:	080077a1 	.word	0x080077a1
 8006498:	080077a1 	.word	0x080077a1
 800649c:	080077a1 	.word	0x080077a1
 80064a0:	080077a1 	.word	0x080077a1
 80064a4:	080077a1 	.word	0x080077a1
 80064a8:	080077a1 	.word	0x080077a1
 80064ac:	080077a1 	.word	0x080077a1
 80064b0:	080077a1 	.word	0x080077a1
 80064b4:	080077a1 	.word	0x080077a1
 80064b8:	080077a1 	.word	0x080077a1
 80064bc:	080077a1 	.word	0x080077a1
 80064c0:	080077a1 	.word	0x080077a1
 80064c4:	080077a1 	.word	0x080077a1
 80064c8:	080077a1 	.word	0x080077a1
 80064cc:	0800696f 	.word	0x0800696f
 80064d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80064d8:	430b      	orrs	r3, r1
 80064da:	f000 82b3 	beq.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80064de:	f001 b95f 	b.w	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80064e2:	4b43      	ldr	r3, [pc, #268]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80064e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ec:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f4:	f107 0320 	add.w	r3, r7, #32
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff f9cf 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006502:	f001 b950 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	2b40      	cmp	r3, #64	@ 0x40
 800650a:	d108      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650c:	f107 0314 	add.w	r3, r7, #20
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff fb2f 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800651a:	f001 b944 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006522:	f001 b940 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006526:	4b32      	ldr	r3, [pc, #200]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006538:	f7fd ffc4 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 800653c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800653e:	f001 b932 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006542:	4b2b      	ldr	r3, [pc, #172]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800654a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800654e:	d10a      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006552:	2b01      	cmp	r3, #1
 8006554:	d107      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fb0a 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	637b      	str	r3, [r7, #52]	@ 0x34
 8006564:	e05c      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006566:	4b22      	ldr	r3, [pc, #136]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800656e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006572:	d10a      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	2b02      	cmp	r3, #2
 8006578:	d107      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800657a:	f107 0308 	add.w	r3, r7, #8
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fc64 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	637b      	str	r3, [r7, #52]	@ 0x34
 8006588:	e04a      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800658a:	4b19      	ldr	r3, [pc, #100]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b02      	cmp	r3, #2
 8006594:	d10c      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	2b03      	cmp	r3, #3
 800659a:	d109      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800659c:	4b14      	ldr	r3, [pc, #80]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	08db      	lsrs	r3, r3, #3
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	4a13      	ldr	r2, [pc, #76]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ae:	e037      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80065b0:	4b0f      	ldr	r3, [pc, #60]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065bc:	d11e      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d11b      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80065c4:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80065c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c8:	e02a      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80065ca:	bf00      	nop
 80065cc:	40000001 	.word	0x40000001
 80065d0:	20000001 	.word	0x20000001
 80065d4:	10000001 	.word	0x10000001
 80065d8:	08000001 	.word	0x08000001
 80065dc:	04000001 	.word	0x04000001
 80065e0:	00400001 	.word	0x00400001
 80065e4:	00200001 	.word	0x00200001
 80065e8:	00040001 	.word	0x00040001
 80065ec:	00020001 	.word	0x00020001
 80065f0:	44020c00 	.word	0x44020c00
 80065f4:	03d09000 	.word	0x03d09000
 80065f8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80065fc:	4ba3      	ldr	r3, [pc, #652]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d106      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	2b05      	cmp	r3, #5
 800660e:	d103      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8006610:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
 8006616:	e003      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800661c:	f001 b8c3 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006620:	f001 b8c1 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006624:	4b99      	ldr	r3, [pc, #612]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006626:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800662a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800662e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006636:	f7fd ff2f 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 800663a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800663c:	f001 b8b3 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006640:	4b92      	ldr	r3, [pc, #584]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800664c:	d10a      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006650:	2b08      	cmp	r3, #8
 8006652:	d107      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fa8b 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
 8006662:	e03d      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006666:	2b10      	cmp	r3, #16
 8006668:	d108      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800666a:	f107 0308 	add.w	r3, r7, #8
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fbec 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006678:	f001 b895 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800667c:	4b83      	ldr	r3, [pc, #524]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b02      	cmp	r3, #2
 8006686:	d10c      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	2b18      	cmp	r3, #24
 800668c:	d109      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800668e:	4b7f      	ldr	r3, [pc, #508]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	08db      	lsrs	r3, r3, #3
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	4a7d      	ldr	r2, [pc, #500]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800669a:	fa22 f303 	lsr.w	r3, r2, r3
 800669e:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a0:	e01e      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80066a2:	4b7a      	ldr	r3, [pc, #488]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ae:	d105      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d102      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80066b6:	4b77      	ldr	r3, [pc, #476]	@ (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80066b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ba:	e011      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80066bc:	4b73      	ldr	r3, [pc, #460]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d106      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	2b28      	cmp	r3, #40	@ 0x28
 80066ce:	d103      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80066d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d6:	e003      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066dc:	f001 b863 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80066e0:	f001 b861 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80066e4:	4b69      	ldr	r3, [pc, #420]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80066ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066f6:	f7fd fecf 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 80066fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80066fc:	f001 b853 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006700:	4b62      	ldr	r3, [pc, #392]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006708:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800670c:	d10a      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d107      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006714:	f107 0314 	add.w	r3, r7, #20
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff fa2b 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	637b      	str	r3, [r7, #52]	@ 0x34
 8006722:	e045      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006724:	4b59      	ldr	r3, [pc, #356]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800672c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006730:	d10a      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	2b80      	cmp	r3, #128	@ 0x80
 8006736:	d107      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fb85 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	637b      	str	r3, [r7, #52]	@ 0x34
 8006746:	e033      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006748:	4b50      	ldr	r3, [pc, #320]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b02      	cmp	r3, #2
 8006752:	d10c      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006756:	2bc0      	cmp	r3, #192	@ 0xc0
 8006758:	d109      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800675a:	4b4c      	ldr	r3, [pc, #304]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	08db      	lsrs	r3, r3, #3
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	4a4a      	ldr	r2, [pc, #296]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006766:	fa22 f303 	lsr.w	r3, r2, r3
 800676a:	637b      	str	r3, [r7, #52]	@ 0x34
 800676c:	e020      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800676e:	4b47      	ldr	r3, [pc, #284]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800677a:	d106      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006782:	d102      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8006784:	4b43      	ldr	r3, [pc, #268]	@ (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006786:	637b      	str	r3, [r7, #52]	@ 0x34
 8006788:	e012      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800678a:	4b40      	ldr	r3, [pc, #256]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800678c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d107      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800679e:	d103      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80067a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ac:	f000 bffb 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80067b0:	f000 bff9 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80067b4:	4b35      	ldr	r3, [pc, #212]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80067ba:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80067be:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067c6:	f7fd fe67 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 80067ca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80067cc:	f000 bfeb 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80067d0:	4b2e      	ldr	r3, [pc, #184]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067dc:	d10b      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e4:	d107      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067e6:	f107 0314 	add.w	r3, r7, #20
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff f9c2 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f4:	e047      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80067f6:	4b25      	ldr	r3, [pc, #148]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006802:	d10b      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680a:	d107      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800680c:	f107 0308 	add.w	r3, r7, #8
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fb1b 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	637b      	str	r3, [r7, #52]	@ 0x34
 800681a:	e034      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800681c:	4b1b      	ldr	r3, [pc, #108]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b02      	cmp	r3, #2
 8006826:	d10d      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800682e:	d109      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006830:	4b16      	ldr	r3, [pc, #88]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	08db      	lsrs	r3, r3, #3
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	4a15      	ldr	r2, [pc, #84]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
 8006842:	e020      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006844:	4b11      	ldr	r3, [pc, #68]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800684c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006850:	d106      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006858:	d102      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800685a:	4b0e      	ldr	r3, [pc, #56]	@ (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
 800685e:	e012      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006860:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b02      	cmp	r3, #2
 800686c:	d107      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006874:	d103      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8006876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800687a:	637b      	str	r3, [r7, #52]	@ 0x34
 800687c:	e003      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006882:	f000 bf90 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006886:	f000 bf8e 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800688a:	bf00      	nop
 800688c:	44020c00 	.word	0x44020c00
 8006890:	03d09000 	.word	0x03d09000
 8006894:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006898:	4ba5      	ldr	r3, [pc, #660]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800689a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800689e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80068a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068aa:	f7fd fdf5 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 80068ae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80068b0:	f000 bf79 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80068b4:	4b9e      	ldr	r3, [pc, #632]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068c0:	d10b      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068c8:	d107      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ca:	f107 0314 	add.w	r3, r7, #20
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff f950 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d8:	e047      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80068da:	4b95      	ldr	r3, [pc, #596]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e6:	d10b      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068ee:	d107      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff faa9 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fe:	e034      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006900:	4b8b      	ldr	r3, [pc, #556]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b02      	cmp	r3, #2
 800690a:	d10d      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006912:	d109      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006914:	4b86      	ldr	r3, [pc, #536]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	08db      	lsrs	r3, r3, #3
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	4a85      	ldr	r2, [pc, #532]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	637b      	str	r3, [r7, #52]	@ 0x34
 8006926:	e020      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006928:	4b81      	ldr	r3, [pc, #516]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006934:	d106      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800693c:	d102      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 800693e:	4b7e      	ldr	r3, [pc, #504]	@ (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
 8006942:	e012      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006944:	4b7a      	ldr	r3, [pc, #488]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b02      	cmp	r3, #2
 8006950:	d107      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006958:	d103      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 800695a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006960:	e003      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006966:	f000 bf1e 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800696a:	f000 bf1c 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800696e:	4b70      	ldr	r3, [pc, #448]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006974:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006978:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006980:	f7fd fd8a 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8006984:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006986:	f000 bf0e 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800698a:	4b69      	ldr	r3, [pc, #420]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006996:	d10b      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699e:	d107      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a0:	f107 0314 	add.w	r3, r7, #20
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff f8e5 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ae:	e047      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80069b0:	4b5f      	ldr	r3, [pc, #380]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069bc:	d10b      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c4:	d107      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fa3e 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d4:	e034      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80069d6:	4b56      	ldr	r3, [pc, #344]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d10d      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80069e8:	d109      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069ea:	4b51      	ldr	r3, [pc, #324]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	08db      	lsrs	r3, r3, #3
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	4a4f      	ldr	r2, [pc, #316]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80069f6:	fa22 f303 	lsr.w	r3, r2, r3
 80069fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80069fc:	e020      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80069fe:	4b4c      	ldr	r3, [pc, #304]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a0a:	d106      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a12:	d102      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8006a14:	4b48      	ldr	r3, [pc, #288]	@ (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a18:	e012      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006a1a:	4b45      	ldr	r3, [pc, #276]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d107      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006a2e:	d103      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a3c:	f000 beb3 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006a40:	f000 beb1 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006a44:	4b3a      	ldr	r3, [pc, #232]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a4a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006a4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a56:	f7fd fd4b 	bl	80044f0 <HAL_RCC_GetPCLK3Freq>
 8006a5a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a5c:	f000 bea3 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a66:	d108      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff f881 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a76:	f000 be96 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a80:	d108      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff f9e0 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a90:	f000 be89 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006a94:	4b26      	ldr	r3, [pc, #152]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d10d      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006aa6:	d109      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006aa8:	4b21      	ldr	r3, [pc, #132]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	08db      	lsrs	r3, r3, #3
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	4a20      	ldr	r2, [pc, #128]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aba:	e020      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006abc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac8:	d106      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8006ad2:	4b19      	ldr	r3, [pc, #100]	@ (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad6:	e012      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006ad8:	4b15      	ldr	r3, [pc, #84]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006aec:	d103      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8006aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af4:	e003      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006afa:	f000 be54 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006afe:	f000 be52 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006b02:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006b14:	f7fd fca4 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8006b18:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006b1a:	f000 be44 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d10b      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b24:	f7fd fb70 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8006b28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b2a:	f000 be3c 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006b2e:	bf00      	nop
 8006b30:	44020c00 	.word	0x44020c00
 8006b34:	03d09000 	.word	0x03d09000
 8006b38:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d108      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b42:	f107 0314 	add.w	r3, r7, #20
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff f814 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b50:	f000 be29 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006b54:	4b9f      	ldr	r3, [pc, #636]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b60:	d105      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d102      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8006b68:	4b9b      	ldr	r3, [pc, #620]	@ (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6c:	e023      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006b6e:	4b99      	ldr	r3, [pc, #612]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b80:	4b94      	ldr	r3, [pc, #592]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	08db      	lsrs	r3, r3, #3
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	4a94      	ldr	r2, [pc, #592]	@ (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b92:	e010      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006b94:	4b8f      	ldr	r3, [pc, #572]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ba0:	d105      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	d102      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8006ba8:	4b8d      	ldr	r3, [pc, #564]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bac:	e003      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bb2:	f000 bdf8 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006bb6:	f000 bdf6 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006bba:	4b86      	ldr	r3, [pc, #536]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006bc6:	4b83      	ldr	r3, [pc, #524]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d106      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d103      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8006bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be0:	e012      	b.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006be2:	4b7c      	ldr	r3, [pc, #496]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d103      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8006bf8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfe:	e003      	b.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006c04:	f000 bdcf 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c08:	f000 bdcd 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006c0c:	4b71      	ldr	r3, [pc, #452]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c16:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d104      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c1e:	f7fd fc3b 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8006c22:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c24:	f000 bdbf 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c2e:	d108      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c30:	f107 0308 	add.w	r3, r7, #8
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff f909 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c3e:	f000 bdb2 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006c42:	4b64      	ldr	r3, [pc, #400]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d10d      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c54:	d109      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c56:	4b5f      	ldr	r3, [pc, #380]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	08db      	lsrs	r3, r3, #3
 8006c5c:	f003 0303 	and.w	r3, r3, #3
 8006c60:	4a5e      	ldr	r2, [pc, #376]	@ (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006c62:	fa22 f303 	lsr.w	r3, r2, r3
 8006c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c68:	e011      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c76:	d106      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c7e:	d102      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006c80:	4b57      	ldr	r3, [pc, #348]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c84:	e003      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c8a:	f000 bd8c 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c8e:	f000 bd8a 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006c92:	4b50      	ldr	r3, [pc, #320]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c98:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006c9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7fd fbf8 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8006ca8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006caa:	f000 bd7c 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cb4:	d108      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cb6:	f107 0308 	add.w	r3, r7, #8
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff f8c6 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cc4:	f000 bd6f 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006cc8:	4b42      	ldr	r3, [pc, #264]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d10d      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006cda:	d109      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	08db      	lsrs	r3, r3, #3
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	4a3d      	ldr	r2, [pc, #244]	@ (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cee:	e011      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006cf0:	4b38      	ldr	r3, [pc, #224]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cfc:	d106      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006d04:	d102      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8006d06:	4b36      	ldr	r3, [pc, #216]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0a:	e003      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d10:	f000 bd49 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d14:	f000 bd47 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006d18:	4b2e      	ldr	r3, [pc, #184]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d1e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006d22:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006d2a:	f7fd fbe1 	bl	80044f0 <HAL_RCC_GetPCLK3Freq>
 8006d2e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d30:	f000 bd39 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d3a:	d108      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d3c:	f107 0308 	add.w	r3, r7, #8
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff f883 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d4a:	f000 bd2c 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006d4e:	4b21      	ldr	r3, [pc, #132]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d10d      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d60:	d109      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d62:	4b1c      	ldr	r3, [pc, #112]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	08db      	lsrs	r3, r3, #3
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d74:	e011      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006d76:	4b17      	ldr	r3, [pc, #92]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d82:	d106      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d8a:	d102      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006d8c:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d90:	e003      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d96:	f000 bd06 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d9a:	f000 bd04 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006da0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006da4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006da8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006db0:	f7fd fb72 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8006db4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006db6:	f000 bcf6 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dc0:	d110      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dc2:	f107 0308 	add.w	r3, r7, #8
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff f840 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dd0:	f000 bce9 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006dd4:	44020c00 	.word	0x44020c00
 8006dd8:	017d7840 	.word	0x017d7840
 8006ddc:	03d09000 	.word	0x03d09000
 8006de0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006de4:	4ba4      	ldr	r3, [pc, #656]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d10e      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006df6:	d10a      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006df8:	4b9f      	ldr	r3, [pc, #636]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	4a9e      	ldr	r2, [pc, #632]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e0a:	f000 bccc 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e12:	f000 bcc8 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006e16:	4b98      	ldr	r3, [pc, #608]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e1c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006e20:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006e28:	f7fd fb62 	bl	80044f0 <HAL_RCC_GetPCLK3Freq>
 8006e2c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e2e:	f000 bcba 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e38:	d108      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e3a:	f107 0308 	add.w	r3, r7, #8
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff f804 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e48:	f000 bcad 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d10e      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e5e:	d10a      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e60:	4b85      	ldr	r3, [pc, #532]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a84      	ldr	r2, [pc, #528]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e72:	f000 bc98 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e7a:	f000 bc94 	b.w	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006e7e:	4b7e      	ldr	r3, [pc, #504]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e88:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006e90:	d056      	beq.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006e98:	f200 808b 	bhi.w	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea2:	d03e      	beq.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eaa:	f200 8082 	bhi.w	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eb4:	d027      	beq.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ebc:	d879      	bhi.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec4:	d017      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ecc:	d871      	bhi.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d004      	beq.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eda:	d004      	beq.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006edc:	e069      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006ede:	f7fd fb07 	bl	80044f0 <HAL_RCC_GetPCLK3Freq>
 8006ee2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006ee4:	e068      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee6:	f107 0314 	add.w	r3, r7, #20
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fe42 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ef4:	e060      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe ffa6 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f04:	e058      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f06:	4b5c      	ldr	r3, [pc, #368]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d103      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006f14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f1a:	e04d      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f20:	e04a      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f22:	4b55      	ldr	r3, [pc, #340]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f30:	d103      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006f32:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f36:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f38:	e03e      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f3e:	e03b      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f40:	4b4d      	ldr	r3, [pc, #308]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f46:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d10c      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8006f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f5e:	4b46      	ldr	r3, [pc, #280]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	08db      	lsrs	r3, r3, #3
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	4a44      	ldr	r2, [pc, #272]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f70:	e01e      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f72:	4b41      	ldr	r3, [pc, #260]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f7e:	d106      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f86:	d102      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f88:	4b3d      	ldr	r3, [pc, #244]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8c:	e010      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f9a:	d106      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fa2:	d102      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fa4:	4b37      	ldr	r3, [pc, #220]	@ (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006fae:	e003      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006fb0:	e002      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fb6:	bf00      	nop
          }
        }
        break;
 8006fb8:	e3f5      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006fba:	4b2f      	ldr	r3, [pc, #188]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006fbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006fc0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006fc4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006fcc:	d05f      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006fd4:	f200 8094 	bhi.w	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fde:	d03f      	beq.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fe6:	f200 808b 	bhi.w	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ff0:	d028      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ff8:	f200 8082 	bhi.w	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007002:	d017      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800700a:	d879      	bhi.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007018:	d004      	beq.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800701a:	e071      	b.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fd fa3c 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 8007020:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007022:	e070      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007024:	f107 0314 	add.w	r3, r7, #20
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe fda3 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007032:	e068      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007034:	f107 0308 	add.w	r3, r7, #8
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe ff07 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007042:	e060      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007044:	4b0c      	ldr	r3, [pc, #48]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b02      	cmp	r3, #2
 8007050:	d103      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8007052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007058:	e055      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800705e:	e052      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007060:	4b05      	ldr	r3, [pc, #20]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007066:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800706a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800706e:	d10b      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8007070:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007076:	e046      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8007078:	44020c00 	.word	0x44020c00
 800707c:	03d09000 	.word	0x03d09000
 8007080:	003d0900 	.word	0x003d0900
 8007084:	017d7840 	.word	0x017d7840
              frequency = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800708c:	e03b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800708e:	4bae      	ldr	r3, [pc, #696]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007094:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007098:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800709a:	4bab      	ldr	r3, [pc, #684]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d10c      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 80070a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070ac:	4ba6      	ldr	r3, [pc, #664]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	08db      	lsrs	r3, r3, #3
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	4aa5      	ldr	r2, [pc, #660]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070be:	e01e      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070cc:	d106      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 80070ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d4:	d102      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80070d6:	4b9e      	ldr	r3, [pc, #632]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80070d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070da:	e010      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070dc:	4b9a      	ldr	r3, [pc, #616]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070e8:	d106      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80070ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070f0:	d102      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070f2:	4b98      	ldr	r3, [pc, #608]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80070f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f6:	e002      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80070fc:	e003      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80070fe:	e002      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007104:	bf00      	nop
          }
        }
        break;
 8007106:	e34e      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007108:	4b8f      	ldr	r3, [pc, #572]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800710a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800710e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007112:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007114:	4b8c      	ldr	r3, [pc, #560]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800711c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007120:	d105      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8007128:	4b8a      	ldr	r3, [pc, #552]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800712a:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800712c:	e33b      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007134:	d107      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007136:	f107 0320 	add.w	r3, r7, #32
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fbae 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007144:	e32f      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800714c:	d107      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714e:	f107 0314 	add.w	r3, r7, #20
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fd0e 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800715c:	e323      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007162:	e320      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007164:	4b78      	ldr	r3, [pc, #480]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	2b04      	cmp	r3, #4
 8007174:	d860      	bhi.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8007176:	a201      	add	r2, pc, #4	@ (adr r2, 800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	08007191 	.word	0x08007191
 8007180:	080071a1 	.word	0x080071a1
 8007184:	080071b1 	.word	0x080071b1
 8007188:	080071c1 	.word	0x080071c1
 800718c:	080071c7 	.word	0x080071c7
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007190:	f107 0320 	add.w	r3, r7, #32
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe fb81 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800719e:	e04e      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a0:	f107 0314 	add.w	r3, r7, #20
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe fce5 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071ae:	e046      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b0:	f107 0308 	add.w	r3, r7, #8
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fe49 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071be:	e03e      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80071c0:	4b65      	ldr	r3, [pc, #404]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071c4:	e03b      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071c6:	4b60      	ldr	r3, [pc, #384]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80071c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80071d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071d2:	4b5d      	ldr	r3, [pc, #372]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d10c      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 80071de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071e4:	4b58      	ldr	r3, [pc, #352]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	4a57      	ldr	r2, [pc, #348]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f6:	e01e      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071f8:	4b53      	ldr	r3, [pc, #332]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007204:	d106      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720c:	d102      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800720e:	4b50      	ldr	r3, [pc, #320]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007210:	637b      	str	r3, [r7, #52]	@ 0x34
 8007212:	e010      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007214:	4b4c      	ldr	r3, [pc, #304]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007220:	d106      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8007222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007228:	d102      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800722a:	4b4a      	ldr	r3, [pc, #296]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800722c:	637b      	str	r3, [r7, #52]	@ 0x34
 800722e:	e002      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007234:	e003      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007236:	e002      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800723c:	bf00      	nop
          }
        }
        break;
 800723e:	e2b2      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007240:	4b41      	ldr	r3, [pc, #260]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800724a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	2b20      	cmp	r3, #32
 8007250:	f200 80a4 	bhi.w	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8007254:	a201      	add	r2, pc, #4	@ (adr r2, 800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8007256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725a:	bf00      	nop
 800725c:	080072e1 	.word	0x080072e1
 8007260:	0800739d 	.word	0x0800739d
 8007264:	0800739d 	.word	0x0800739d
 8007268:	0800739d 	.word	0x0800739d
 800726c:	0800739d 	.word	0x0800739d
 8007270:	0800739d 	.word	0x0800739d
 8007274:	0800739d 	.word	0x0800739d
 8007278:	0800739d 	.word	0x0800739d
 800727c:	080072f1 	.word	0x080072f1
 8007280:	0800739d 	.word	0x0800739d
 8007284:	0800739d 	.word	0x0800739d
 8007288:	0800739d 	.word	0x0800739d
 800728c:	0800739d 	.word	0x0800739d
 8007290:	0800739d 	.word	0x0800739d
 8007294:	0800739d 	.word	0x0800739d
 8007298:	0800739d 	.word	0x0800739d
 800729c:	08007301 	.word	0x08007301
 80072a0:	0800739d 	.word	0x0800739d
 80072a4:	0800739d 	.word	0x0800739d
 80072a8:	0800739d 	.word	0x0800739d
 80072ac:	0800739d 	.word	0x0800739d
 80072b0:	0800739d 	.word	0x0800739d
 80072b4:	0800739d 	.word	0x0800739d
 80072b8:	0800739d 	.word	0x0800739d
 80072bc:	08007311 	.word	0x08007311
 80072c0:	0800739d 	.word	0x0800739d
 80072c4:	0800739d 	.word	0x0800739d
 80072c8:	0800739d 	.word	0x0800739d
 80072cc:	0800739d 	.word	0x0800739d
 80072d0:	0800739d 	.word	0x0800739d
 80072d4:	0800739d 	.word	0x0800739d
 80072d8:	0800739d 	.word	0x0800739d
 80072dc:	08007317 	.word	0x08007317
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072e0:	f107 0320 	add.w	r3, r7, #32
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fad9 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072ee:	e058      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f0:	f107 0314 	add.w	r3, r7, #20
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe fc3d 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072fe:	e050      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007300:	f107 0308 	add.w	r3, r7, #8
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe fda1 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800730e:	e048      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007310:	4b11      	ldr	r3, [pc, #68]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007312:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007314:	e045      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007316:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800731c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007320:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007322:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b02      	cmp	r3, #2
 800732c:	d116      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 800732e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d113      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007334:	4b04      	ldr	r3, [pc, #16]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	08db      	lsrs	r3, r3, #3
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	4a03      	ldr	r2, [pc, #12]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007340:	fa22 f303 	lsr.w	r3, r2, r3
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
 8007346:	e028      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007348:	44020c00 	.word	0x44020c00
 800734c:	03d09000 	.word	0x03d09000
 8007350:	003d0900 	.word	0x003d0900
 8007354:	017d7840 	.word	0x017d7840
 8007358:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800735c:	4b95      	ldr	r3, [pc, #596]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007368:	d106      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007370:	d102      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007372:	4b91      	ldr	r3, [pc, #580]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007374:	637b      	str	r3, [r7, #52]	@ 0x34
 8007376:	e010      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007378:	4b8e      	ldr	r3, [pc, #568]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007384:	d106      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8007386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800738c:	d102      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800738e:	4b8b      	ldr	r3, [pc, #556]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007390:	637b      	str	r3, [r7, #52]	@ 0x34
 8007392:	e002      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007398:	e003      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800739a:	e002      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073a0:	bf00      	nop
          }
        }
        break;
 80073a2:	e200      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80073a4:	4b83      	ldr	r3, [pc, #524]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80073a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80073ae:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b6:	d031      	beq.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073be:	d866      	bhi.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073c4:	d027      	beq.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80073ca:	d860      	bhi.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	2b80      	cmp	r3, #128	@ 0x80
 80073d0:	d019      	beq.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	2b80      	cmp	r3, #128	@ 0x80
 80073d6:	d85a      	bhi.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	2b40      	cmp	r3, #64	@ 0x40
 80073e2:	d008      	beq.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 80073e4:	e053      	b.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073e6:	f107 0320 	add.w	r3, r7, #32
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fa56 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073f4:	e04e      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fbba 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007404:	e046      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007406:	f107 0308 	add.w	r3, r7, #8
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fd1e 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007414:	e03e      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007416:	4b6a      	ldr	r3, [pc, #424]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800741a:	e03b      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800741c:	4b65      	ldr	r3, [pc, #404]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800741e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007422:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007426:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007428:	4b62      	ldr	r3, [pc, #392]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b02      	cmp	r3, #2
 8007432:	d10c      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d109      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800743a:	4b5e      	ldr	r3, [pc, #376]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	08db      	lsrs	r3, r3, #3
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	4a5f      	ldr	r2, [pc, #380]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007446:	fa22 f303 	lsr.w	r3, r2, r3
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
 800744c:	e01e      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800744e:	4b59      	ldr	r3, [pc, #356]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800745a:	d106      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007462:	d102      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007464:	4b54      	ldr	r3, [pc, #336]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
 8007468:	e010      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800746a:	4b52      	ldr	r3, [pc, #328]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007476:	d106      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800747e:	d102      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007480:	4b4e      	ldr	r3, [pc, #312]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
 8007484:	e002      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800748a:	e003      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 800748c:	e002      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007492:	bf00      	nop
          }
        }
        break;
 8007494:	e187      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007496:	4b47      	ldr	r3, [pc, #284]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800749c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80074a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80074a8:	f7fd f80c 	bl	80044c4 <HAL_RCC_GetPCLK2Freq>
 80074ac:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80074ae:	e17a      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80074b0:	4b40      	ldr	r3, [pc, #256]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074bc:	d10b      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c4:	d107      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c6:	f107 0314 	add.w	r3, r7, #20
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fb52 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d4:	e045      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80074d6:	4b37      	ldr	r3, [pc, #220]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074e2:	d10b      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ea:	d107      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fcab 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074fa:	e032      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80074fc:	4b2d      	ldr	r3, [pc, #180]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b02      	cmp	r3, #2
 8007506:	d10d      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800750e:	d109      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007510:	4b28      	ldr	r3, [pc, #160]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	08db      	lsrs	r3, r3, #3
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	4a2a      	ldr	r2, [pc, #168]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
 8007522:	e01e      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007524:	4b23      	ldr	r3, [pc, #140]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800752c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007530:	d106      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007538:	d102      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800753a:	4b1f      	ldr	r3, [pc, #124]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800753c:	637b      	str	r3, [r7, #52]	@ 0x34
 800753e:	e010      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007540:	4b1c      	ldr	r3, [pc, #112]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800754c:	d106      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007554:	d102      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8007556:	4b19      	ldr	r3, [pc, #100]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007558:	637b      	str	r3, [r7, #52]	@ 0x34
 800755a:	e002      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007560:	e121      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007562:	e120      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007564:	4b13      	ldr	r3, [pc, #76]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007566:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	2b03      	cmp	r3, #3
 8007574:	d861      	bhi.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8007576:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	0800758d 	.word	0x0800758d
 8007580:	08007595 	.word	0x08007595
 8007584:	080075a5 	.word	0x080075a5
 8007588:	080075c9 	.word	0x080075c9
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800758c:	f7fc ff68 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8007590:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007592:	e055      	b.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007594:	f107 0320 	add.w	r3, r7, #32
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe f97f 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075a2:	e04d      	b.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fae3 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075b2:	e045      	b.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80075b4:	44020c00 	.word	0x44020c00
 80075b8:	003d0900 	.word	0x003d0900
 80075bc:	017d7840 	.word	0x017d7840
 80075c0:	00bb8000 	.word	0x00bb8000
 80075c4:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075c8:	4b79      	ldr	r3, [pc, #484]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80075ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075ce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80075d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075d4:	4b76      	ldr	r3, [pc, #472]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d10c      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 80075e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075e6:	4b72      	ldr	r3, [pc, #456]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	08db      	lsrs	r3, r3, #3
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	4a70      	ldr	r2, [pc, #448]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 80075f2:	fa22 f303 	lsr.w	r3, r2, r3
 80075f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f8:	e01e      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075fa:	4b6d      	ldr	r3, [pc, #436]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007606:	d106      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8007608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760e:	d102      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007610:	4b69      	ldr	r3, [pc, #420]	@ (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8007612:	637b      	str	r3, [r7, #52]	@ 0x34
 8007614:	e010      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007616:	4b66      	ldr	r3, [pc, #408]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007622:	d106      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800762a:	d102      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800762c:	4b63      	ldr	r3, [pc, #396]	@ (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007630:	e002      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007636:	e003      	b.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007638:	e002      	b.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800763e:	bf00      	nop
          }
        }
        break;
 8007640:	e0b1      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007642:	4b5b      	ldr	r3, [pc, #364]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007648:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800764c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800764e:	4b58      	ldr	r3, [pc, #352]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b02      	cmp	r3, #2
 800765a:	d106      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 800765c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765e:	2b00      	cmp	r3, #0
 8007660:	d103      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8007662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007666:	637b      	str	r3, [r7, #52]	@ 0x34
 8007668:	e01f      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800766a:	4b51      	ldr	r3, [pc, #324]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800766c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007678:	d106      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	2b40      	cmp	r3, #64	@ 0x40
 800767e:	d103      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8007680:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	e010      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007688:	4b49      	ldr	r3, [pc, #292]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007694:	d106      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	2b80      	cmp	r3, #128	@ 0x80
 800769a:	d103      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 800769c:	f248 0312 	movw	r3, #32786	@ 0x8012
 80076a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a2:	e002      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80076a8:	e07d      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80076aa:	e07c      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80076ac:	4b40      	ldr	r3, [pc, #256]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80076b8:	4b3d      	ldr	r3, [pc, #244]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c4:	d105      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80076cc:	4b3c      	ldr	r3, [pc, #240]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d0:	e031      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80076d2:	4b37      	ldr	r3, [pc, #220]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076de:	d10a      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d107      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076e6:	f107 0320 	add.w	r3, r7, #32
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe f8d6 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076f4:	e01f      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80076f6:	4b2e      	ldr	r3, [pc, #184]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b02      	cmp	r3, #2
 8007702:	d106      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	2b20      	cmp	r3, #32
 8007708:	d103      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800770a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800770e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007710:	e011      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007712:	4b27      	ldr	r3, [pc, #156]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800771c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007720:	d106      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	2b30      	cmp	r3, #48	@ 0x30
 8007726:	d103      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8007728:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800772c:	637b      	str	r3, [r7, #52]	@ 0x34
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007734:	e037      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007736:	e036      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007738:	4b1d      	ldr	r3, [pc, #116]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800773a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800773e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007742:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	2b10      	cmp	r3, #16
 8007748:	d107      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800774a:	f107 0320 	add.w	r3, r7, #32
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe f8a4 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007758:	e025      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800775a:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007766:	d10a      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	2b20      	cmp	r3, #32
 800776c:	d107      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800776e:	f107 0308 	add.w	r3, r7, #8
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fb6a 	bl	8005e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34
 800777c:	e00f      	b.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800777e:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800778a:	d105      	bne.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 800778c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778e:	2b30      	cmp	r3, #48	@ 0x30
 8007790:	d102      	bne.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8007792:	4b0b      	ldr	r3, [pc, #44]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007794:	637b      	str	r3, [r7, #52]	@ 0x34
 8007796:	e002      	b.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800779c:	e003      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800779e:	e002      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077a4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80077a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	373c      	adds	r7, #60	@ 0x3c
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd90      	pop	{r4, r7, pc}
 80077b0:	44020c00 	.word	0x44020c00
 80077b4:	03d09000 	.word	0x03d09000
 80077b8:	003d0900 	.word	0x003d0900
 80077bc:	017d7840 	.word	0x017d7840
 80077c0:	02dc6c00 	.word	0x02dc6c00

080077c4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80077cc:	4b48      	ldr	r3, [pc, #288]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a47      	ldr	r2, [pc, #284]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80077d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077d8:	f7f9 fe90 	bl	80014fc <HAL_GetTick>
 80077dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077de:	e008      	b.n	80077f2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077e0:	f7f9 fe8c 	bl	80014fc <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d901      	bls.n	80077f2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e07a      	b.n	80078e8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077f2:	4b3f      	ldr	r3, [pc, #252]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f0      	bne.n	80077e0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80077fe:	4b3c      	ldr	r3, [pc, #240]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6811      	ldr	r1, [r2, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6852      	ldr	r2, [r2, #4]
 8007812:	0212      	lsls	r2, r2, #8
 8007814:	430a      	orrs	r2, r1
 8007816:	4936      	ldr	r1, [pc, #216]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007818:	4313      	orrs	r3, r2
 800781a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	3b01      	subs	r3, #1
 8007822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	3b01      	subs	r3, #1
 800782c:	025b      	lsls	r3, r3, #9
 800782e:	b29b      	uxth	r3, r3
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	3b01      	subs	r3, #1
 8007838:	041b      	lsls	r3, r3, #16
 800783a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	3b01      	subs	r3, #1
 8007846:	061b      	lsls	r3, r3, #24
 8007848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800784c:	4928      	ldr	r1, [pc, #160]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007852:	4b27      	ldr	r3, [pc, #156]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	f023 020c 	bic.w	r2, r3, #12
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	4924      	ldr	r1, [pc, #144]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007860:	4313      	orrs	r3, r2
 8007862:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007864:	4b22      	ldr	r3, [pc, #136]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	f023 0220 	bic.w	r2, r3, #32
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	491f      	ldr	r1, [pc, #124]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007876:	4b1e      	ldr	r3, [pc, #120]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	491c      	ldr	r1, [pc, #112]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007880:	4313      	orrs	r3, r2
 8007882:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007884:	4b1a      	ldr	r3, [pc, #104]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	4a19      	ldr	r2, [pc, #100]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 800788a:	f023 0310 	bic.w	r3, r3, #16
 800788e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007890:	4b17      	ldr	r3, [pc, #92]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 8007892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007894:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007898:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6a12      	ldr	r2, [r2, #32]
 80078a0:	00d2      	lsls	r2, r2, #3
 80078a2:	4913      	ldr	r1, [pc, #76]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80078a8:	4b11      	ldr	r3, [pc, #68]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ac:	4a10      	ldr	r2, [pc, #64]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80078ae:	f043 0310 	orr.w	r3, r3, #16
 80078b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80078b4:	4b0e      	ldr	r3, [pc, #56]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a0d      	ldr	r2, [pc, #52]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80078ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078c0:	f7f9 fe1c 	bl	80014fc <HAL_GetTick>
 80078c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078c6:	e008      	b.n	80078da <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078c8:	f7f9 fe18 	bl	80014fc <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e006      	b.n	80078e8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078da:	4b05      	ldr	r3, [pc, #20]	@ (80078f0 <RCCEx_PLL2_Config+0x12c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80078e6:	2300      	movs	r3, #0

}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	44020c00 	.word	0x44020c00

080078f4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80078fc:	4b48      	ldr	r3, [pc, #288]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a47      	ldr	r2, [pc, #284]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 8007902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007906:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007908:	f7f9 fdf8 	bl	80014fc <HAL_GetTick>
 800790c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800790e:	e008      	b.n	8007922 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007910:	f7f9 fdf4 	bl	80014fc <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e07a      	b.n	8007a18 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007922:	4b3f      	ldr	r3, [pc, #252]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800792e:	4b3c      	ldr	r3, [pc, #240]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007932:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6811      	ldr	r1, [r2, #0]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6852      	ldr	r2, [r2, #4]
 8007942:	0212      	lsls	r2, r2, #8
 8007944:	430a      	orrs	r2, r1
 8007946:	4936      	ldr	r1, [pc, #216]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 8007948:	4313      	orrs	r3, r2
 800794a:	630b      	str	r3, [r1, #48]	@ 0x30
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	3b01      	subs	r3, #1
 8007952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	3b01      	subs	r3, #1
 800795c:	025b      	lsls	r3, r3, #9
 800795e:	b29b      	uxth	r3, r3
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	3b01      	subs	r3, #1
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	3b01      	subs	r3, #1
 8007976:	061b      	lsls	r3, r3, #24
 8007978:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800797c:	4928      	ldr	r1, [pc, #160]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 800797e:	4313      	orrs	r3, r2
 8007980:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007982:	4b27      	ldr	r3, [pc, #156]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007986:	f023 020c 	bic.w	r2, r3, #12
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	4924      	ldr	r1, [pc, #144]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 8007990:	4313      	orrs	r3, r2
 8007992:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007994:	4b22      	ldr	r3, [pc, #136]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 8007996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007998:	f023 0220 	bic.w	r2, r3, #32
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	491f      	ldr	r1, [pc, #124]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80079a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ae:	491c      	ldr	r1, [pc, #112]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80079b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b8:	4a19      	ldr	r2, [pc, #100]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079ba:	f023 0310 	bic.w	r3, r3, #16
 80079be:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80079c0:	4b17      	ldr	r3, [pc, #92]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6a12      	ldr	r2, [r2, #32]
 80079d0:	00d2      	lsls	r2, r2, #3
 80079d2:	4913      	ldr	r1, [pc, #76]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80079d8:	4b11      	ldr	r3, [pc, #68]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079dc:	4a10      	ldr	r2, [pc, #64]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079de:	f043 0310 	orr.w	r3, r3, #16
 80079e2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80079e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 80079ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079f0:	f7f9 fd84 	bl	80014fc <HAL_GetTick>
 80079f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079f6:	e008      	b.n	8007a0a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079f8:	f7f9 fd80 	bl	80014fc <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e006      	b.n	8007a18 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a0a:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <RCCEx_PLL3_Config+0x12c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	44020c00 	.word	0x44020c00

08007a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e049      	b.n	8007aca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7f9 f94c 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f000 fe34 	bl	80086d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d001      	beq.n	8007aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e07c      	b.n	8007be6 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a3a      	ldr	r2, [pc, #232]	@ (8007bf4 <HAL_TIM_Base_Start_IT+0x120>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d04a      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a39      	ldr	r2, [pc, #228]	@ (8007bf8 <HAL_TIM_Base_Start_IT+0x124>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d045      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b20:	d040      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b2a:	d03b      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a32      	ldr	r2, [pc, #200]	@ (8007bfc <HAL_TIM_Base_Start_IT+0x128>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d036      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a31      	ldr	r2, [pc, #196]	@ (8007c00 <HAL_TIM_Base_Start_IT+0x12c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d031      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a2f      	ldr	r2, [pc, #188]	@ (8007c04 <HAL_TIM_Base_Start_IT+0x130>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d02c      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007c08 <HAL_TIM_Base_Start_IT+0x134>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d027      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a2c      	ldr	r2, [pc, #176]	@ (8007c0c <HAL_TIM_Base_Start_IT+0x138>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d022      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a2b      	ldr	r2, [pc, #172]	@ (8007c10 <HAL_TIM_Base_Start_IT+0x13c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d01d      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a29      	ldr	r2, [pc, #164]	@ (8007c14 <HAL_TIM_Base_Start_IT+0x140>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d018      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a28      	ldr	r2, [pc, #160]	@ (8007c18 <HAL_TIM_Base_Start_IT+0x144>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a26      	ldr	r2, [pc, #152]	@ (8007c1c <HAL_TIM_Base_Start_IT+0x148>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00e      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a25      	ldr	r2, [pc, #148]	@ (8007c20 <HAL_TIM_Base_Start_IT+0x14c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d009      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a23      	ldr	r2, [pc, #140]	@ (8007c24 <HAL_TIM_Base_Start_IT+0x150>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d004      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0xd0>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a22      	ldr	r2, [pc, #136]	@ (8007c28 <HAL_TIM_Base_Start_IT+0x154>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d115      	bne.n	8007bd0 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <HAL_TIM_Base_Start_IT+0x158>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b06      	cmp	r3, #6
 8007bb4:	d015      	beq.n	8007be2 <HAL_TIM_Base_Start_IT+0x10e>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bbc:	d011      	beq.n	8007be2 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0201 	orr.w	r2, r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bce:	e008      	b.n	8007be2 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0201 	orr.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	e000      	b.n	8007be4 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	50012c00 	.word	0x50012c00
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	50000400 	.word	0x50000400
 8007c04:	40000800 	.word	0x40000800
 8007c08:	50000800 	.word	0x50000800
 8007c0c:	40000c00 	.word	0x40000c00
 8007c10:	50000c00 	.word	0x50000c00
 8007c14:	40013400 	.word	0x40013400
 8007c18:	50013400 	.word	0x50013400
 8007c1c:	40001800 	.word	0x40001800
 8007c20:	50001800 	.word	0x50001800
 8007c24:	40014000 	.word	0x40014000
 8007c28:	50014000 	.word	0x50014000
 8007c2c:	00010007 	.word	0x00010007

08007c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e049      	b.n	8007cd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f841 	bl	8007cde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f000 fd2e 	bl	80086d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
	...

08007cf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d109      	bne.n	8007d18 <HAL_TIM_PWM_Start+0x24>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	bf14      	ite	ne
 8007d10:	2301      	movne	r3, #1
 8007d12:	2300      	moveq	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	e03c      	b.n	8007d92 <HAL_TIM_PWM_Start+0x9e>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d109      	bne.n	8007d32 <HAL_TIM_PWM_Start+0x3e>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	bf14      	ite	ne
 8007d2a:	2301      	movne	r3, #1
 8007d2c:	2300      	moveq	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	e02f      	b.n	8007d92 <HAL_TIM_PWM_Start+0x9e>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d109      	bne.n	8007d4c <HAL_TIM_PWM_Start+0x58>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	bf14      	ite	ne
 8007d44:	2301      	movne	r3, #1
 8007d46:	2300      	moveq	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	e022      	b.n	8007d92 <HAL_TIM_PWM_Start+0x9e>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b0c      	cmp	r3, #12
 8007d50:	d109      	bne.n	8007d66 <HAL_TIM_PWM_Start+0x72>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	bf14      	ite	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	2300      	moveq	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	e015      	b.n	8007d92 <HAL_TIM_PWM_Start+0x9e>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d109      	bne.n	8007d80 <HAL_TIM_PWM_Start+0x8c>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	bf14      	ite	ne
 8007d78:	2301      	movne	r3, #1
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	e008      	b.n	8007d92 <HAL_TIM_PWM_Start+0x9e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e0ce      	b.n	8007f38 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_PWM_Start+0xb6>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007da8:	e023      	b.n	8007df2 <HAL_TIM_PWM_Start+0xfe>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d104      	bne.n	8007dba <HAL_TIM_PWM_Start+0xc6>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007db8:	e01b      	b.n	8007df2 <HAL_TIM_PWM_Start+0xfe>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d104      	bne.n	8007dca <HAL_TIM_PWM_Start+0xd6>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dc8:	e013      	b.n	8007df2 <HAL_TIM_PWM_Start+0xfe>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b0c      	cmp	r3, #12
 8007dce:	d104      	bne.n	8007dda <HAL_TIM_PWM_Start+0xe6>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dd8:	e00b      	b.n	8007df2 <HAL_TIM_PWM_Start+0xfe>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b10      	cmp	r3, #16
 8007dde:	d104      	bne.n	8007dea <HAL_TIM_PWM_Start+0xf6>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007de8:	e003      	b.n	8007df2 <HAL_TIM_PWM_Start+0xfe>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2201      	movs	r2, #1
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 f924 	bl	8009048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a4e      	ldr	r2, [pc, #312]	@ (8007f40 <HAL_TIM_PWM_Start+0x24c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d018      	beq.n	8007e3c <HAL_TIM_PWM_Start+0x148>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a4d      	ldr	r2, [pc, #308]	@ (8007f44 <HAL_TIM_PWM_Start+0x250>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d013      	beq.n	8007e3c <HAL_TIM_PWM_Start+0x148>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a4b      	ldr	r2, [pc, #300]	@ (8007f48 <HAL_TIM_PWM_Start+0x254>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00e      	beq.n	8007e3c <HAL_TIM_PWM_Start+0x148>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a4a      	ldr	r2, [pc, #296]	@ (8007f4c <HAL_TIM_PWM_Start+0x258>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d009      	beq.n	8007e3c <HAL_TIM_PWM_Start+0x148>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a48      	ldr	r2, [pc, #288]	@ (8007f50 <HAL_TIM_PWM_Start+0x25c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_TIM_PWM_Start+0x148>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a47      	ldr	r2, [pc, #284]	@ (8007f54 <HAL_TIM_PWM_Start+0x260>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d101      	bne.n	8007e40 <HAL_TIM_PWM_Start+0x14c>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e000      	b.n	8007e42 <HAL_TIM_PWM_Start+0x14e>
 8007e40:	2300      	movs	r3, #0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d007      	beq.n	8007e56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a39      	ldr	r2, [pc, #228]	@ (8007f40 <HAL_TIM_PWM_Start+0x24c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d04a      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a37      	ldr	r2, [pc, #220]	@ (8007f44 <HAL_TIM_PWM_Start+0x250>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d045      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e72:	d040      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e7c:	d03b      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a35      	ldr	r2, [pc, #212]	@ (8007f58 <HAL_TIM_PWM_Start+0x264>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d036      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a33      	ldr	r2, [pc, #204]	@ (8007f5c <HAL_TIM_PWM_Start+0x268>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d031      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a32      	ldr	r2, [pc, #200]	@ (8007f60 <HAL_TIM_PWM_Start+0x26c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d02c      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a30      	ldr	r2, [pc, #192]	@ (8007f64 <HAL_TIM_PWM_Start+0x270>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d027      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8007f68 <HAL_TIM_PWM_Start+0x274>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d022      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8007f6c <HAL_TIM_PWM_Start+0x278>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d01d      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a22      	ldr	r2, [pc, #136]	@ (8007f48 <HAL_TIM_PWM_Start+0x254>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d018      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a20      	ldr	r2, [pc, #128]	@ (8007f4c <HAL_TIM_PWM_Start+0x258>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d013      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a27      	ldr	r2, [pc, #156]	@ (8007f70 <HAL_TIM_PWM_Start+0x27c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00e      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a25      	ldr	r2, [pc, #148]	@ (8007f74 <HAL_TIM_PWM_Start+0x280>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f50 <HAL_TIM_PWM_Start+0x25c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d004      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x202>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a18      	ldr	r2, [pc, #96]	@ (8007f54 <HAL_TIM_PWM_Start+0x260>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d115      	bne.n	8007f22 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	4b1e      	ldr	r3, [pc, #120]	@ (8007f78 <HAL_TIM_PWM_Start+0x284>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b06      	cmp	r3, #6
 8007f06:	d015      	beq.n	8007f34 <HAL_TIM_PWM_Start+0x240>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0e:	d011      	beq.n	8007f34 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f20:	e008      	b.n	8007f34 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0201 	orr.w	r2, r2, #1
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	e000      	b.n	8007f36 <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	50012c00 	.word	0x50012c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	50013400 	.word	0x50013400
 8007f50:	40014000 	.word	0x40014000
 8007f54:	50014000 	.word	0x50014000
 8007f58:	40000400 	.word	0x40000400
 8007f5c:	50000400 	.word	0x50000400
 8007f60:	40000800 	.word	0x40000800
 8007f64:	50000800 	.word	0x50000800
 8007f68:	40000c00 	.word	0x40000c00
 8007f6c:	50000c00 	.word	0x50000c00
 8007f70:	40001800 	.word	0x40001800
 8007f74:	50001800 	.word	0x50001800
 8007f78:	00010007 	.word	0x00010007

08007f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d020      	beq.n	8007fe0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01b      	beq.n	8007fe0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0202 	mvn.w	r2, #2
 8007fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f003 0303 	and.w	r3, r3, #3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fb64 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 8007fcc:	e005      	b.n	8007fda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fb56 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb67 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d020      	beq.n	800802c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01b      	beq.n	800802c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f06f 0204 	mvn.w	r2, #4
 8007ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2202      	movs	r2, #2
 8008002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fb3e 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 8008018:	e005      	b.n	8008026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb30 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fb41 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f003 0308 	and.w	r3, r3, #8
 8008032:	2b00      	cmp	r3, #0
 8008034:	d020      	beq.n	8008078 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01b      	beq.n	8008078 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0208 	mvn.w	r2, #8
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2204      	movs	r2, #4
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f003 0303 	and.w	r3, r3, #3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fb18 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fb0a 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fb1b 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b00      	cmp	r3, #0
 8008080:	d020      	beq.n	80080c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f003 0310 	and.w	r3, r3, #16
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01b      	beq.n	80080c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0210 	mvn.w	r2, #16
 8008094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2208      	movs	r2, #8
 800809a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 faf2 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fae4 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 faf5 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f06f 0201 	mvn.w	r2, #1
 80080e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7f8 fd42 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d104      	bne.n	80080fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00c      	beq.n	8008116 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800810e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f001 fa54 	bl	80095be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00c      	beq.n	800813a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fa4c 	bl	80095d2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00c      	beq.n	800815e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 faaf 	bl	80086bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00c      	beq.n	8008182 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f06f 0220 	mvn.w	r2, #32
 800817a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 fa14 	bl	80095aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00c      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800819e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fa20 	bl	80095e6 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00c      	beq.n	80081ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80081c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 fa18 	bl	80095fa <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00c      	beq.n	80081ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d007      	beq.n	80081ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80081e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 fa10 	bl	800960e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00c      	beq.n	8008212 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d007      	beq.n	8008212 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800820a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 fa08 	bl	8009622 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008236:	2302      	movs	r3, #2
 8008238:	e0ff      	b.n	800843a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b14      	cmp	r3, #20
 8008246:	f200 80f0 	bhi.w	800842a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800824a:	a201      	add	r2, pc, #4	@ (adr r2, 8008250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	080082a5 	.word	0x080082a5
 8008254:	0800842b 	.word	0x0800842b
 8008258:	0800842b 	.word	0x0800842b
 800825c:	0800842b 	.word	0x0800842b
 8008260:	080082e5 	.word	0x080082e5
 8008264:	0800842b 	.word	0x0800842b
 8008268:	0800842b 	.word	0x0800842b
 800826c:	0800842b 	.word	0x0800842b
 8008270:	08008327 	.word	0x08008327
 8008274:	0800842b 	.word	0x0800842b
 8008278:	0800842b 	.word	0x0800842b
 800827c:	0800842b 	.word	0x0800842b
 8008280:	08008367 	.word	0x08008367
 8008284:	0800842b 	.word	0x0800842b
 8008288:	0800842b 	.word	0x0800842b
 800828c:	0800842b 	.word	0x0800842b
 8008290:	080083a9 	.word	0x080083a9
 8008294:	0800842b 	.word	0x0800842b
 8008298:	0800842b 	.word	0x0800842b
 800829c:	0800842b 	.word	0x0800842b
 80082a0:	080083e9 	.word	0x080083e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fafa 	bl	80088a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699a      	ldr	r2, [r3, #24]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0208 	orr.w	r2, r2, #8
 80082be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 0204 	bic.w	r2, r2, #4
 80082ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6999      	ldr	r1, [r3, #24]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	691a      	ldr	r2, [r3, #16]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	619a      	str	r2, [r3, #24]
      break;
 80082e2:	e0a5      	b.n	8008430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fb74 	bl	80089d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800830e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6999      	ldr	r1, [r3, #24]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	021a      	lsls	r2, r3, #8
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	430a      	orrs	r2, r1
 8008322:	619a      	str	r2, [r3, #24]
      break;
 8008324:	e084      	b.n	8008430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68b9      	ldr	r1, [r7, #8]
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fbeb 	bl	8008b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69da      	ldr	r2, [r3, #28]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f042 0208 	orr.w	r2, r2, #8
 8008340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69da      	ldr	r2, [r3, #28]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0204 	bic.w	r2, r2, #4
 8008350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	69d9      	ldr	r1, [r3, #28]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	691a      	ldr	r2, [r3, #16]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	61da      	str	r2, [r3, #28]
      break;
 8008364:	e064      	b.n	8008430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fc61 	bl	8008c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69d9      	ldr	r1, [r3, #28]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	021a      	lsls	r2, r3, #8
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	61da      	str	r2, [r3, #28]
      break;
 80083a6:	e043      	b.n	8008430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fcd8 	bl	8008d64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0208 	orr.w	r2, r2, #8
 80083c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0204 	bic.w	r2, r2, #4
 80083d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	691a      	ldr	r2, [r3, #16]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80083e6:	e023      	b.n	8008430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68b9      	ldr	r1, [r7, #8]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 fd22 	bl	8008e38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008402:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008412:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	021a      	lsls	r2, r3, #8
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008428:	e002      	b.n	8008430 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	75fb      	strb	r3, [r7, #23]
      break;
 800842e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008438:	7dfb      	ldrb	r3, [r7, #23]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop

08008444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008458:	2b01      	cmp	r3, #1
 800845a:	d101      	bne.n	8008460 <HAL_TIM_ConfigClockSource+0x1c>
 800845c:	2302      	movs	r3, #2
 800845e:	e0fe      	b.n	800865e <HAL_TIM_ConfigClockSource+0x21a>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800847e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800848a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800849c:	f000 80c9 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 80084a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084a4:	f200 80ce 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 80084a8:	4a6f      	ldr	r2, [pc, #444]	@ (8008668 <HAL_TIM_ConfigClockSource+0x224>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	f000 80c1 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 80084b0:	4a6d      	ldr	r2, [pc, #436]	@ (8008668 <HAL_TIM_ConfigClockSource+0x224>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	f200 80c6 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 80084b8:	4a6c      	ldr	r2, [pc, #432]	@ (800866c <HAL_TIM_ConfigClockSource+0x228>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	f000 80b9 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 80084c0:	4a6a      	ldr	r2, [pc, #424]	@ (800866c <HAL_TIM_ConfigClockSource+0x228>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	f200 80be 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 80084c8:	4a69      	ldr	r2, [pc, #420]	@ (8008670 <HAL_TIM_ConfigClockSource+0x22c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	f000 80b1 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 80084d0:	4a67      	ldr	r2, [pc, #412]	@ (8008670 <HAL_TIM_ConfigClockSource+0x22c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	f200 80b6 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 80084d8:	4a66      	ldr	r2, [pc, #408]	@ (8008674 <HAL_TIM_ConfigClockSource+0x230>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	f000 80a9 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 80084e0:	4a64      	ldr	r2, [pc, #400]	@ (8008674 <HAL_TIM_ConfigClockSource+0x230>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	f200 80ae 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 80084e8:	4a63      	ldr	r2, [pc, #396]	@ (8008678 <HAL_TIM_ConfigClockSource+0x234>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	f000 80a1 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 80084f0:	4a61      	ldr	r2, [pc, #388]	@ (8008678 <HAL_TIM_ConfigClockSource+0x234>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f200 80a6 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 80084f8:	4a60      	ldr	r2, [pc, #384]	@ (800867c <HAL_TIM_ConfigClockSource+0x238>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	f000 8099 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 8008500:	4a5e      	ldr	r2, [pc, #376]	@ (800867c <HAL_TIM_ConfigClockSource+0x238>)
 8008502:	4293      	cmp	r3, r2
 8008504:	f200 809e 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 8008508:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800850c:	f000 8091 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 8008510:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008514:	f200 8096 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 8008518:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800851c:	f000 8089 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 8008520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008524:	f200 808e 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 8008528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800852c:	d03e      	beq.n	80085ac <HAL_TIM_ConfigClockSource+0x168>
 800852e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008532:	f200 8087 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x200>
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800853a:	f000 8086 	beq.w	800864a <HAL_TIM_ConfigClockSource+0x206>
 800853e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008542:	d87f      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x200>
 8008544:	2b70      	cmp	r3, #112	@ 0x70
 8008546:	d01a      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x13a>
 8008548:	2b70      	cmp	r3, #112	@ 0x70
 800854a:	d87b      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x200>
 800854c:	2b60      	cmp	r3, #96	@ 0x60
 800854e:	d050      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008550:	2b60      	cmp	r3, #96	@ 0x60
 8008552:	d877      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x200>
 8008554:	2b50      	cmp	r3, #80	@ 0x50
 8008556:	d03c      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0x18e>
 8008558:	2b50      	cmp	r3, #80	@ 0x50
 800855a:	d873      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x200>
 800855c:	2b40      	cmp	r3, #64	@ 0x40
 800855e:	d058      	beq.n	8008612 <HAL_TIM_ConfigClockSource+0x1ce>
 8008560:	2b40      	cmp	r3, #64	@ 0x40
 8008562:	d86f      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x200>
 8008564:	2b30      	cmp	r3, #48	@ 0x30
 8008566:	d064      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 8008568:	2b30      	cmp	r3, #48	@ 0x30
 800856a:	d86b      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x200>
 800856c:	2b20      	cmp	r3, #32
 800856e:	d060      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 8008570:	2b20      	cmp	r3, #32
 8008572:	d867      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x200>
 8008574:	2b00      	cmp	r3, #0
 8008576:	d05c      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 8008578:	2b10      	cmp	r3, #16
 800857a:	d05a      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x1ee>
 800857c:	e062      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800858e:	f000 fd3b 	bl	8009008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	609a      	str	r2, [r3, #8]
      break;
 80085aa:	e04f      	b.n	800864c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085bc:	f000 fd24 	bl	8009008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085ce:	609a      	str	r2, [r3, #8]
      break;
 80085d0:	e03c      	b.n	800864c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085de:	461a      	mov	r2, r3
 80085e0:	f000 fc96 	bl	8008f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2150      	movs	r1, #80	@ 0x50
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fcef 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 80085f0:	e02c      	b.n	800864c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fe:	461a      	mov	r2, r3
 8008600:	f000 fcb5 	bl	8008f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2160      	movs	r1, #96	@ 0x60
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fcdf 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 8008610:	e01c      	b.n	800864c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800861e:	461a      	mov	r2, r3
 8008620:	f000 fc76 	bl	8008f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2140      	movs	r1, #64	@ 0x40
 800862a:	4618      	mov	r0, r3
 800862c:	f000 fccf 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 8008630:	e00c      	b.n	800864c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f000 fcc6 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 8008642:	e003      	b.n	800864c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	73fb      	strb	r3, [r7, #15]
      break;
 8008648:	e000      	b.n	800864c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800864a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	00100070 	.word	0x00100070
 800866c:	00100060 	.word	0x00100060
 8008670:	00100050 	.word	0x00100050
 8008674:	00100040 	.word	0x00100040
 8008678:	00100030 	.word	0x00100030
 800867c:	00100020 	.word	0x00100020

08008680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a62      	ldr	r2, [pc, #392]	@ (800886c <TIM_Base_SetConfig+0x19c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d02b      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a61      	ldr	r2, [pc, #388]	@ (8008870 <TIM_Base_SetConfig+0x1a0>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d027      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086f6:	d023      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086fe:	d01f      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a5c      	ldr	r2, [pc, #368]	@ (8008874 <TIM_Base_SetConfig+0x1a4>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d01b      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a5b      	ldr	r2, [pc, #364]	@ (8008878 <TIM_Base_SetConfig+0x1a8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d017      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a5a      	ldr	r2, [pc, #360]	@ (800887c <TIM_Base_SetConfig+0x1ac>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d013      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a59      	ldr	r2, [pc, #356]	@ (8008880 <TIM_Base_SetConfig+0x1b0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d00f      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a58      	ldr	r2, [pc, #352]	@ (8008884 <TIM_Base_SetConfig+0x1b4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00b      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a57      	ldr	r2, [pc, #348]	@ (8008888 <TIM_Base_SetConfig+0x1b8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d007      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a56      	ldr	r2, [pc, #344]	@ (800888c <TIM_Base_SetConfig+0x1bc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d003      	beq.n	8008740 <TIM_Base_SetConfig+0x70>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a55      	ldr	r2, [pc, #340]	@ (8008890 <TIM_Base_SetConfig+0x1c0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d108      	bne.n	8008752 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a45      	ldr	r2, [pc, #276]	@ (800886c <TIM_Base_SetConfig+0x19c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d03b      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a44      	ldr	r2, [pc, #272]	@ (8008870 <TIM_Base_SetConfig+0x1a0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d037      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008768:	d033      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008770:	d02f      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a3f      	ldr	r2, [pc, #252]	@ (8008874 <TIM_Base_SetConfig+0x1a4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d02b      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a3e      	ldr	r2, [pc, #248]	@ (8008878 <TIM_Base_SetConfig+0x1a8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d027      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a3d      	ldr	r2, [pc, #244]	@ (800887c <TIM_Base_SetConfig+0x1ac>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d023      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a3c      	ldr	r2, [pc, #240]	@ (8008880 <TIM_Base_SetConfig+0x1b0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d01f      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a3b      	ldr	r2, [pc, #236]	@ (8008884 <TIM_Base_SetConfig+0x1b4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01b      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a3a      	ldr	r2, [pc, #232]	@ (8008888 <TIM_Base_SetConfig+0x1b8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d017      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a39      	ldr	r2, [pc, #228]	@ (800888c <TIM_Base_SetConfig+0x1bc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d013      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a38      	ldr	r2, [pc, #224]	@ (8008890 <TIM_Base_SetConfig+0x1c0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00f      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a37      	ldr	r2, [pc, #220]	@ (8008894 <TIM_Base_SetConfig+0x1c4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00b      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a36      	ldr	r2, [pc, #216]	@ (8008898 <TIM_Base_SetConfig+0x1c8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d007      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a35      	ldr	r2, [pc, #212]	@ (800889c <TIM_Base_SetConfig+0x1cc>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d003      	beq.n	80087d2 <TIM_Base_SetConfig+0x102>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a34      	ldr	r2, [pc, #208]	@ (80088a0 <TIM_Base_SetConfig+0x1d0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d108      	bne.n	80087e4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a18      	ldr	r2, [pc, #96]	@ (800886c <TIM_Base_SetConfig+0x19c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d013      	beq.n	8008838 <TIM_Base_SetConfig+0x168>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a17      	ldr	r2, [pc, #92]	@ (8008870 <TIM_Base_SetConfig+0x1a0>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00f      	beq.n	8008838 <TIM_Base_SetConfig+0x168>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a1c      	ldr	r2, [pc, #112]	@ (800888c <TIM_Base_SetConfig+0x1bc>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00b      	beq.n	8008838 <TIM_Base_SetConfig+0x168>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a1b      	ldr	r2, [pc, #108]	@ (8008890 <TIM_Base_SetConfig+0x1c0>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_Base_SetConfig+0x168>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a1c      	ldr	r2, [pc, #112]	@ (800889c <TIM_Base_SetConfig+0x1cc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_Base_SetConfig+0x168>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a1b      	ldr	r2, [pc, #108]	@ (80088a0 <TIM_Base_SetConfig+0x1d0>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d103      	bne.n	8008840 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b01      	cmp	r3, #1
 8008850:	d105      	bne.n	800885e <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f023 0201 	bic.w	r2, r3, #1
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	611a      	str	r2, [r3, #16]
  }
}
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	40012c00 	.word	0x40012c00
 8008870:	50012c00 	.word	0x50012c00
 8008874:	40000400 	.word	0x40000400
 8008878:	50000400 	.word	0x50000400
 800887c:	40000800 	.word	0x40000800
 8008880:	50000800 	.word	0x50000800
 8008884:	40000c00 	.word	0x40000c00
 8008888:	50000c00 	.word	0x50000c00
 800888c:	40013400 	.word	0x40013400
 8008890:	50013400 	.word	0x50013400
 8008894:	40001800 	.word	0x40001800
 8008898:	50001800 	.word	0x50001800
 800889c:	40014000 	.word	0x40014000
 80088a0:	50014000 	.word	0x50014000

080088a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	f023 0201 	bic.w	r2, r3, #1
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0303 	bic.w	r3, r3, #3
 80088de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f023 0302 	bic.w	r3, r3, #2
 80088f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a30      	ldr	r2, [pc, #192]	@ (80089c0 <TIM_OC1_SetConfig+0x11c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d013      	beq.n	800892c <TIM_OC1_SetConfig+0x88>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a2f      	ldr	r2, [pc, #188]	@ (80089c4 <TIM_OC1_SetConfig+0x120>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00f      	beq.n	800892c <TIM_OC1_SetConfig+0x88>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a2e      	ldr	r2, [pc, #184]	@ (80089c8 <TIM_OC1_SetConfig+0x124>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00b      	beq.n	800892c <TIM_OC1_SetConfig+0x88>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a2d      	ldr	r2, [pc, #180]	@ (80089cc <TIM_OC1_SetConfig+0x128>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d007      	beq.n	800892c <TIM_OC1_SetConfig+0x88>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a2c      	ldr	r2, [pc, #176]	@ (80089d0 <TIM_OC1_SetConfig+0x12c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_OC1_SetConfig+0x88>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a2b      	ldr	r2, [pc, #172]	@ (80089d4 <TIM_OC1_SetConfig+0x130>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d10c      	bne.n	8008946 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f023 0308 	bic.w	r3, r3, #8
 8008932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f023 0304 	bic.w	r3, r3, #4
 8008944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a1d      	ldr	r2, [pc, #116]	@ (80089c0 <TIM_OC1_SetConfig+0x11c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d013      	beq.n	8008976 <TIM_OC1_SetConfig+0xd2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1c      	ldr	r2, [pc, #112]	@ (80089c4 <TIM_OC1_SetConfig+0x120>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d00f      	beq.n	8008976 <TIM_OC1_SetConfig+0xd2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1b      	ldr	r2, [pc, #108]	@ (80089c8 <TIM_OC1_SetConfig+0x124>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00b      	beq.n	8008976 <TIM_OC1_SetConfig+0xd2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a1a      	ldr	r2, [pc, #104]	@ (80089cc <TIM_OC1_SetConfig+0x128>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d007      	beq.n	8008976 <TIM_OC1_SetConfig+0xd2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a19      	ldr	r2, [pc, #100]	@ (80089d0 <TIM_OC1_SetConfig+0x12c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d003      	beq.n	8008976 <TIM_OC1_SetConfig+0xd2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a18      	ldr	r2, [pc, #96]	@ (80089d4 <TIM_OC1_SetConfig+0x130>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d111      	bne.n	800899a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800897c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4313      	orrs	r3, r2
 800898e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	621a      	str	r2, [r3, #32]
}
 80089b4:	bf00      	nop
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	40012c00 	.word	0x40012c00
 80089c4:	50012c00 	.word	0x50012c00
 80089c8:	40013400 	.word	0x40013400
 80089cc:	50013400 	.word	0x50013400
 80089d0:	40014000 	.word	0x40014000
 80089d4:	50014000 	.word	0x50014000

080089d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	f023 0210 	bic.w	r2, r3, #16
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f023 0320 	bic.w	r3, r3, #32
 8008a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	011b      	lsls	r3, r3, #4
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a2e      	ldr	r2, [pc, #184]	@ (8008af0 <TIM_OC2_SetConfig+0x118>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00b      	beq.n	8008a54 <TIM_OC2_SetConfig+0x7c>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8008af4 <TIM_OC2_SetConfig+0x11c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d007      	beq.n	8008a54 <TIM_OC2_SetConfig+0x7c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a2c      	ldr	r2, [pc, #176]	@ (8008af8 <TIM_OC2_SetConfig+0x120>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_OC2_SetConfig+0x7c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8008afc <TIM_OC2_SetConfig+0x124>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d10d      	bne.n	8008a70 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a1f      	ldr	r2, [pc, #124]	@ (8008af0 <TIM_OC2_SetConfig+0x118>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d013      	beq.n	8008aa0 <TIM_OC2_SetConfig+0xc8>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8008af4 <TIM_OC2_SetConfig+0x11c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d00f      	beq.n	8008aa0 <TIM_OC2_SetConfig+0xc8>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a1d      	ldr	r2, [pc, #116]	@ (8008af8 <TIM_OC2_SetConfig+0x120>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00b      	beq.n	8008aa0 <TIM_OC2_SetConfig+0xc8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008afc <TIM_OC2_SetConfig+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d007      	beq.n	8008aa0 <TIM_OC2_SetConfig+0xc8>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a1b      	ldr	r2, [pc, #108]	@ (8008b00 <TIM_OC2_SetConfig+0x128>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d003      	beq.n	8008aa0 <TIM_OC2_SetConfig+0xc8>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008b04 <TIM_OC2_SetConfig+0x12c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d113      	bne.n	8008ac8 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	621a      	str	r2, [r3, #32]
}
 8008ae2:	bf00      	nop
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	40012c00 	.word	0x40012c00
 8008af4:	50012c00 	.word	0x50012c00
 8008af8:	40013400 	.word	0x40013400
 8008afc:	50013400 	.word	0x50013400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	50014000 	.word	0x50014000

08008b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0303 	bic.w	r3, r3, #3
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a2d      	ldr	r2, [pc, #180]	@ (8008c1c <TIM_OC3_SetConfig+0x114>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00b      	beq.n	8008b82 <TIM_OC3_SetConfig+0x7a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8008c20 <TIM_OC3_SetConfig+0x118>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d007      	beq.n	8008b82 <TIM_OC3_SetConfig+0x7a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a2b      	ldr	r2, [pc, #172]	@ (8008c24 <TIM_OC3_SetConfig+0x11c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d003      	beq.n	8008b82 <TIM_OC3_SetConfig+0x7a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8008c28 <TIM_OC3_SetConfig+0x120>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d10d      	bne.n	8008b9e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8008c1c <TIM_OC3_SetConfig+0x114>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d013      	beq.n	8008bce <TIM_OC3_SetConfig+0xc6>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c20 <TIM_OC3_SetConfig+0x118>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00f      	beq.n	8008bce <TIM_OC3_SetConfig+0xc6>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8008c24 <TIM_OC3_SetConfig+0x11c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d00b      	beq.n	8008bce <TIM_OC3_SetConfig+0xc6>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c28 <TIM_OC3_SetConfig+0x120>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d007      	beq.n	8008bce <TIM_OC3_SetConfig+0xc6>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8008c2c <TIM_OC3_SetConfig+0x124>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d003      	beq.n	8008bce <TIM_OC3_SetConfig+0xc6>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a19      	ldr	r2, [pc, #100]	@ (8008c30 <TIM_OC3_SetConfig+0x128>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d113      	bne.n	8008bf6 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	621a      	str	r2, [r3, #32]
}
 8008c10:	bf00      	nop
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	40012c00 	.word	0x40012c00
 8008c20:	50012c00 	.word	0x50012c00
 8008c24:	40013400 	.word	0x40013400
 8008c28:	50013400 	.word	0x50013400
 8008c2c:	40014000 	.word	0x40014000
 8008c30:	50014000 	.word	0x50014000

08008c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	021b      	lsls	r3, r3, #8
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	031b      	lsls	r3, r3, #12
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a2e      	ldr	r2, [pc, #184]	@ (8008d4c <TIM_OC4_SetConfig+0x118>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00b      	beq.n	8008cb0 <TIM_OC4_SetConfig+0x7c>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8008d50 <TIM_OC4_SetConfig+0x11c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d007      	beq.n	8008cb0 <TIM_OC4_SetConfig+0x7c>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8008d54 <TIM_OC4_SetConfig+0x120>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_OC4_SetConfig+0x7c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a2b      	ldr	r2, [pc, #172]	@ (8008d58 <TIM_OC4_SetConfig+0x124>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d10d      	bne.n	8008ccc <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	031b      	lsls	r3, r3, #12
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a1f      	ldr	r2, [pc, #124]	@ (8008d4c <TIM_OC4_SetConfig+0x118>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d013      	beq.n	8008cfc <TIM_OC4_SetConfig+0xc8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d50 <TIM_OC4_SetConfig+0x11c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00f      	beq.n	8008cfc <TIM_OC4_SetConfig+0xc8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a1d      	ldr	r2, [pc, #116]	@ (8008d54 <TIM_OC4_SetConfig+0x120>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00b      	beq.n	8008cfc <TIM_OC4_SetConfig+0xc8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8008d58 <TIM_OC4_SetConfig+0x124>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d007      	beq.n	8008cfc <TIM_OC4_SetConfig+0xc8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a1b      	ldr	r2, [pc, #108]	@ (8008d5c <TIM_OC4_SetConfig+0x128>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d003      	beq.n	8008cfc <TIM_OC4_SetConfig+0xc8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d60 <TIM_OC4_SetConfig+0x12c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d113      	bne.n	8008d24 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	019b      	lsls	r3, r3, #6
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	019b      	lsls	r3, r3, #6
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	621a      	str	r2, [r3, #32]
}
 8008d3e:	bf00      	nop
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40012c00 	.word	0x40012c00
 8008d50:	50012c00 	.word	0x50012c00
 8008d54:	40013400 	.word	0x40013400
 8008d58:	50013400 	.word	0x50013400
 8008d5c:	40014000 	.word	0x40014000
 8008d60:	50014000 	.word	0x50014000

08008d64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008da8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	041b      	lsls	r3, r3, #16
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a19      	ldr	r2, [pc, #100]	@ (8008e20 <TIM_OC5_SetConfig+0xbc>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d013      	beq.n	8008de6 <TIM_OC5_SetConfig+0x82>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a18      	ldr	r2, [pc, #96]	@ (8008e24 <TIM_OC5_SetConfig+0xc0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00f      	beq.n	8008de6 <TIM_OC5_SetConfig+0x82>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a17      	ldr	r2, [pc, #92]	@ (8008e28 <TIM_OC5_SetConfig+0xc4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00b      	beq.n	8008de6 <TIM_OC5_SetConfig+0x82>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a16      	ldr	r2, [pc, #88]	@ (8008e2c <TIM_OC5_SetConfig+0xc8>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d007      	beq.n	8008de6 <TIM_OC5_SetConfig+0x82>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a15      	ldr	r2, [pc, #84]	@ (8008e30 <TIM_OC5_SetConfig+0xcc>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d003      	beq.n	8008de6 <TIM_OC5_SetConfig+0x82>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a14      	ldr	r2, [pc, #80]	@ (8008e34 <TIM_OC5_SetConfig+0xd0>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d109      	bne.n	8008dfa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	621a      	str	r2, [r3, #32]
}
 8008e14:	bf00      	nop
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	40012c00 	.word	0x40012c00
 8008e24:	50012c00 	.word	0x50012c00
 8008e28:	40013400 	.word	0x40013400
 8008e2c:	50013400 	.word	0x50013400
 8008e30:	40014000 	.word	0x40014000
 8008e34:	50014000 	.word	0x50014000

08008e38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	051b      	lsls	r3, r3, #20
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ef8 <TIM_OC6_SetConfig+0xc0>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d013      	beq.n	8008ebc <TIM_OC6_SetConfig+0x84>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a19      	ldr	r2, [pc, #100]	@ (8008efc <TIM_OC6_SetConfig+0xc4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00f      	beq.n	8008ebc <TIM_OC6_SetConfig+0x84>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a18      	ldr	r2, [pc, #96]	@ (8008f00 <TIM_OC6_SetConfig+0xc8>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d00b      	beq.n	8008ebc <TIM_OC6_SetConfig+0x84>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a17      	ldr	r2, [pc, #92]	@ (8008f04 <TIM_OC6_SetConfig+0xcc>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d007      	beq.n	8008ebc <TIM_OC6_SetConfig+0x84>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a16      	ldr	r2, [pc, #88]	@ (8008f08 <TIM_OC6_SetConfig+0xd0>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d003      	beq.n	8008ebc <TIM_OC6_SetConfig+0x84>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a15      	ldr	r2, [pc, #84]	@ (8008f0c <TIM_OC6_SetConfig+0xd4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d109      	bne.n	8008ed0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	029b      	lsls	r3, r3, #10
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40012c00 	.word	0x40012c00
 8008efc:	50012c00 	.word	0x50012c00
 8008f00:	40013400 	.word	0x40013400
 8008f04:	50013400 	.word	0x50013400
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	50014000 	.word	0x50014000

08008f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f023 0201 	bic.w	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f023 030a 	bic.w	r3, r3, #10
 8008f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b087      	sub	sp, #28
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	f023 0210 	bic.w	r2, r3, #16
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	031b      	lsls	r3, r3, #12
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	621a      	str	r2, [r3, #32]
}
 8008fc2:	bf00      	nop
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f043 0307 	orr.w	r3, r3, #7
 8008ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	609a      	str	r2, [r3, #8]
}
 8008ffc:	bf00      	nop
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	021a      	lsls	r2, r3, #8
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	431a      	orrs	r2, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	4313      	orrs	r3, r2
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	609a      	str	r2, [r3, #8]
}
 800903c:	bf00      	nop
 800903e:	371c      	adds	r7, #28
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f003 031f 	and.w	r3, r3, #31
 800905a:	2201      	movs	r2, #1
 800905c:	fa02 f303 	lsl.w	r3, r2, r3
 8009060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a1a      	ldr	r2, [r3, #32]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	43db      	mvns	r3, r3
 800906a:	401a      	ands	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6a1a      	ldr	r2, [r3, #32]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f003 031f 	and.w	r3, r3, #31
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	fa01 f303 	lsl.w	r3, r1, r3
 8009080:	431a      	orrs	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	621a      	str	r2, [r3, #32]
}
 8009086:	bf00      	nop
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
	...

08009094 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d109      	bne.n	80090b8 <HAL_TIMEx_PWMN_Start+0x24>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	bf14      	ite	ne
 80090b0:	2301      	movne	r3, #1
 80090b2:	2300      	moveq	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	e022      	b.n	80090fe <HAL_TIMEx_PWMN_Start+0x6a>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d109      	bne.n	80090d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	bf14      	ite	ne
 80090ca:	2301      	movne	r3, #1
 80090cc:	2300      	moveq	r3, #0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	e015      	b.n	80090fe <HAL_TIMEx_PWMN_Start+0x6a>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d109      	bne.n	80090ec <HAL_TIMEx_PWMN_Start+0x58>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	bf14      	ite	ne
 80090e4:	2301      	movne	r3, #1
 80090e6:	2300      	moveq	r3, #0
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	e008      	b.n	80090fe <HAL_TIMEx_PWMN_Start+0x6a>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	bf14      	ite	ne
 80090f8:	2301      	movne	r3, #1
 80090fa:	2300      	moveq	r3, #0
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e09b      	b.n	800923e <HAL_TIMEx_PWMN_Start+0x1aa>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <HAL_TIMEx_PWMN_Start+0x82>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009114:	e013      	b.n	800913e <HAL_TIMEx_PWMN_Start+0xaa>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b04      	cmp	r3, #4
 800911a:	d104      	bne.n	8009126 <HAL_TIMEx_PWMN_Start+0x92>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2202      	movs	r2, #2
 8009120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009124:	e00b      	b.n	800913e <HAL_TIMEx_PWMN_Start+0xaa>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b08      	cmp	r3, #8
 800912a:	d104      	bne.n	8009136 <HAL_TIMEx_PWMN_Start+0xa2>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009134:	e003      	b.n	800913e <HAL_TIMEx_PWMN_Start+0xaa>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2202      	movs	r2, #2
 800913a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2204      	movs	r2, #4
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fa75 	bl	8009636 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800915a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a39      	ldr	r2, [pc, #228]	@ (8009248 <HAL_TIMEx_PWMN_Start+0x1b4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d04a      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a38      	ldr	r2, [pc, #224]	@ (800924c <HAL_TIMEx_PWMN_Start+0x1b8>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d045      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009178:	d040      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009182:	d03b      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a31      	ldr	r2, [pc, #196]	@ (8009250 <HAL_TIMEx_PWMN_Start+0x1bc>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d036      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a30      	ldr	r2, [pc, #192]	@ (8009254 <HAL_TIMEx_PWMN_Start+0x1c0>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d031      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a2e      	ldr	r2, [pc, #184]	@ (8009258 <HAL_TIMEx_PWMN_Start+0x1c4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d02c      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a2d      	ldr	r2, [pc, #180]	@ (800925c <HAL_TIMEx_PWMN_Start+0x1c8>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d027      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a2b      	ldr	r2, [pc, #172]	@ (8009260 <HAL_TIMEx_PWMN_Start+0x1cc>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d022      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009264 <HAL_TIMEx_PWMN_Start+0x1d0>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d01d      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a28      	ldr	r2, [pc, #160]	@ (8009268 <HAL_TIMEx_PWMN_Start+0x1d4>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d018      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a27      	ldr	r2, [pc, #156]	@ (800926c <HAL_TIMEx_PWMN_Start+0x1d8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d013      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a25      	ldr	r2, [pc, #148]	@ (8009270 <HAL_TIMEx_PWMN_Start+0x1dc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d00e      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a24      	ldr	r2, [pc, #144]	@ (8009274 <HAL_TIMEx_PWMN_Start+0x1e0>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d009      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a22      	ldr	r2, [pc, #136]	@ (8009278 <HAL_TIMEx_PWMN_Start+0x1e4>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d004      	beq.n	80091fc <HAL_TIMEx_PWMN_Start+0x168>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a21      	ldr	r2, [pc, #132]	@ (800927c <HAL_TIMEx_PWMN_Start+0x1e8>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d115      	bne.n	8009228 <HAL_TIMEx_PWMN_Start+0x194>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	4b1f      	ldr	r3, [pc, #124]	@ (8009280 <HAL_TIMEx_PWMN_Start+0x1ec>)
 8009204:	4013      	ands	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b06      	cmp	r3, #6
 800920c:	d015      	beq.n	800923a <HAL_TIMEx_PWMN_Start+0x1a6>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009214:	d011      	beq.n	800923a <HAL_TIMEx_PWMN_Start+0x1a6>
    {
      __HAL_TIM_ENABLE(htim);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f042 0201 	orr.w	r2, r2, #1
 8009224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009226:	e008      	b.n	800923a <HAL_TIMEx_PWMN_Start+0x1a6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e000      	b.n	800923c <HAL_TIMEx_PWMN_Start+0x1a8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40012c00 	.word	0x40012c00
 800924c:	50012c00 	.word	0x50012c00
 8009250:	40000400 	.word	0x40000400
 8009254:	50000400 	.word	0x50000400
 8009258:	40000800 	.word	0x40000800
 800925c:	50000800 	.word	0x50000800
 8009260:	40000c00 	.word	0x40000c00
 8009264:	50000c00 	.word	0x50000c00
 8009268:	40013400 	.word	0x40013400
 800926c:	50013400 	.word	0x50013400
 8009270:	40001800 	.word	0x40001800
 8009274:	50001800 	.word	0x50001800
 8009278:	40014000 	.word	0x40014000
 800927c:	50014000 	.word	0x50014000
 8009280:	00010007 	.word	0x00010007

08009284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009294:	2b01      	cmp	r3, #1
 8009296:	d101      	bne.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009298:	2302      	movs	r3, #2
 800929a:	e0a1      	b.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a4a      	ldr	r2, [pc, #296]	@ (80093ec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d00e      	beq.n	80092e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a49      	ldr	r2, [pc, #292]	@ (80093f0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d009      	beq.n	80092e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a47      	ldr	r2, [pc, #284]	@ (80093f4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d004      	beq.n	80092e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a46      	ldr	r2, [pc, #280]	@ (80093f8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d108      	bne.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80092ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80092fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4313      	orrs	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a34      	ldr	r2, [pc, #208]	@ (80093ec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d04a      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a33      	ldr	r2, [pc, #204]	@ (80093f0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d045      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009330:	d040      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800933a:	d03b      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a2e      	ldr	r2, [pc, #184]	@ (80093fc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d036      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a2d      	ldr	r2, [pc, #180]	@ (8009400 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d031      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a2b      	ldr	r2, [pc, #172]	@ (8009404 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d02c      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a2a      	ldr	r2, [pc, #168]	@ (8009408 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d027      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a28      	ldr	r2, [pc, #160]	@ (800940c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d022      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a27      	ldr	r2, [pc, #156]	@ (8009410 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d01d      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1d      	ldr	r2, [pc, #116]	@ (80093f4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d018      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1c      	ldr	r2, [pc, #112]	@ (80093f8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d013      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a20      	ldr	r2, [pc, #128]	@ (8009414 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00e      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1f      	ldr	r2, [pc, #124]	@ (8009418 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d009      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a1d      	ldr	r2, [pc, #116]	@ (800941c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d004      	beq.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009420 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d10c      	bne.n	80093ce <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	40012c00 	.word	0x40012c00
 80093f0:	50012c00 	.word	0x50012c00
 80093f4:	40013400 	.word	0x40013400
 80093f8:	50013400 	.word	0x50013400
 80093fc:	40000400 	.word	0x40000400
 8009400:	50000400 	.word	0x50000400
 8009404:	40000800 	.word	0x40000800
 8009408:	50000800 	.word	0x50000800
 800940c:	40000c00 	.word	0x40000c00
 8009410:	50000c00 	.word	0x50000c00
 8009414:	40001800 	.word	0x40001800
 8009418:	50001800 	.word	0x50001800
 800941c:	40014000 	.word	0x40014000
 8009420:	50014000 	.word	0x50014000

08009424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800943c:	2302      	movs	r3, #2
 800943e:	e07d      	b.n	800953c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	4313      	orrs	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	4313      	orrs	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	041b      	lsls	r3, r3, #16
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009548 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d00e      	beq.n	80094f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a1d      	ldr	r2, [pc, #116]	@ (800954c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d009      	beq.n	80094f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009550 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d004      	beq.n	80094f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009554 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d11c      	bne.n	800952a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fa:	051b      	lsls	r3, r3, #20
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009526:	4313      	orrs	r3, r2
 8009528:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	40012c00 	.word	0x40012c00
 800954c:	50012c00 	.word	0x50012c00
 8009550:	40013400 	.word	0x40013400
 8009554:	50013400 	.word	0x50013400

08009558 <HAL_TIMEx_ConfigAsymmetricalDeadTime>:
  * @param  FallingDeadtime Falling edge deadtime value
  * @note   This parameter can be a number between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigAsymmetricalDeadTime(TIM_HandleTypeDef *htim, uint32_t FallingDeadtime)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DEADTIME(FallingDeadtime));

  MODIFY_REG(htim->Instance->DTR2, TIM_DTR2_DTGF, FallingDeadtime);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009568:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_TIMEx_EnableAsymmetricalDeadTime>:
  * @brief  Enable asymmetrical deadtime
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableAsymmetricalDeadTime(TIM_HandleTypeDef *htim)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTAE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800959a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009636:	b480      	push	{r7}
 8009638:	b087      	sub	sp, #28
 800963a:	af00      	add	r7, sp, #0
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	f003 030f 	and.w	r3, r3, #15
 8009648:	2204      	movs	r2, #4
 800964a:	fa02 f303 	lsl.w	r3, r2, r3
 800964e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a1a      	ldr	r2, [r3, #32]
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	43db      	mvns	r3, r3
 8009658:	401a      	ands	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6a1a      	ldr	r2, [r3, #32]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	fa01 f303 	lsl.w	r3, r1, r3
 800966e:	431a      	orrs	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	621a      	str	r2, [r3, #32]
}
 8009674:	bf00      	nop
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e042      	b.n	8009718 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009698:	2b00      	cmp	r3, #0
 800969a:	d106      	bne.n	80096aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f83b 	bl	8009720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2224      	movs	r2, #36	@ 0x24
 80096ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0201 	bic.w	r2, r2, #1
 80096c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f9e0 	bl	8009a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f82f 	bl	8009734 <UART_SetConfig>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e01b      	b.n	8009718 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80096fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0201 	orr.w	r2, r2, #1
 800970e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa5f 	bl	8009bd4 <UART_CheckIdleState>
 8009716:	4603      	mov	r3, r0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009738:	b094      	sub	sp, #80	@ 0x50
 800973a:	af00      	add	r7, sp, #0
 800973c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	4b83      	ldr	r3, [pc, #524]	@ (8009958 <UART_SetConfig+0x224>)
 800974a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	431a      	orrs	r2, r3
 8009756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	431a      	orrs	r2, r3
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	4313      	orrs	r3, r2
 8009762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	497c      	ldr	r1, [pc, #496]	@ (800995c <UART_SetConfig+0x228>)
 800976c:	4019      	ands	r1, r3
 800976e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009774:	430b      	orrs	r3, r1
 8009776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009784:	68d9      	ldr	r1, [r3, #12]
 8009786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	ea40 0301 	orr.w	r3, r0, r1
 800978e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	4b6f      	ldr	r3, [pc, #444]	@ (8009958 <UART_SetConfig+0x224>)
 800979c:	429a      	cmp	r2, r3
 800979e:	d009      	beq.n	80097b4 <UART_SetConfig+0x80>
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	4b6e      	ldr	r3, [pc, #440]	@ (8009960 <UART_SetConfig+0x22c>)
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d004      	beq.n	80097b4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ac:	6a1a      	ldr	r2, [r3, #32]
 80097ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097b0:	4313      	orrs	r3, r2
 80097b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80097be:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80097c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097c8:	430b      	orrs	r3, r1
 80097ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d2:	f023 000f 	bic.w	r0, r3, #15
 80097d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80097da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	ea40 0301 	orr.w	r3, r0, r1
 80097e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	4b5e      	ldr	r3, [pc, #376]	@ (8009964 <UART_SetConfig+0x230>)
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d102      	bne.n	80097f4 <UART_SetConfig+0xc0>
 80097ee:	2301      	movs	r3, #1
 80097f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097f2:	e032      	b.n	800985a <UART_SetConfig+0x126>
 80097f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	4b5b      	ldr	r3, [pc, #364]	@ (8009968 <UART_SetConfig+0x234>)
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d102      	bne.n	8009804 <UART_SetConfig+0xd0>
 80097fe:	2302      	movs	r3, #2
 8009800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009802:	e02a      	b.n	800985a <UART_SetConfig+0x126>
 8009804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	4b58      	ldr	r3, [pc, #352]	@ (800996c <UART_SetConfig+0x238>)
 800980a:	429a      	cmp	r2, r3
 800980c:	d102      	bne.n	8009814 <UART_SetConfig+0xe0>
 800980e:	2304      	movs	r3, #4
 8009810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009812:	e022      	b.n	800985a <UART_SetConfig+0x126>
 8009814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	4b55      	ldr	r3, [pc, #340]	@ (8009970 <UART_SetConfig+0x23c>)
 800981a:	429a      	cmp	r2, r3
 800981c:	d102      	bne.n	8009824 <UART_SetConfig+0xf0>
 800981e:	2308      	movs	r3, #8
 8009820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009822:	e01a      	b.n	800985a <UART_SetConfig+0x126>
 8009824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	4b52      	ldr	r3, [pc, #328]	@ (8009974 <UART_SetConfig+0x240>)
 800982a:	429a      	cmp	r2, r3
 800982c:	d102      	bne.n	8009834 <UART_SetConfig+0x100>
 800982e:	2310      	movs	r3, #16
 8009830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009832:	e012      	b.n	800985a <UART_SetConfig+0x126>
 8009834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	4b4f      	ldr	r3, [pc, #316]	@ (8009978 <UART_SetConfig+0x244>)
 800983a:	429a      	cmp	r2, r3
 800983c:	d102      	bne.n	8009844 <UART_SetConfig+0x110>
 800983e:	2320      	movs	r3, #32
 8009840:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009842:	e00a      	b.n	800985a <UART_SetConfig+0x126>
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4b43      	ldr	r3, [pc, #268]	@ (8009958 <UART_SetConfig+0x224>)
 800984a:	429a      	cmp	r2, r3
 800984c:	d103      	bne.n	8009856 <UART_SetConfig+0x122>
 800984e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009852:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009854:	e001      	b.n	800985a <UART_SetConfig+0x126>
 8009856:	2300      	movs	r3, #0
 8009858:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800985a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b3e      	ldr	r3, [pc, #248]	@ (8009958 <UART_SetConfig+0x224>)
 8009860:	429a      	cmp	r2, r3
 8009862:	d005      	beq.n	8009870 <UART_SetConfig+0x13c>
 8009864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	4b3d      	ldr	r3, [pc, #244]	@ (8009960 <UART_SetConfig+0x22c>)
 800986a:	429a      	cmp	r2, r3
 800986c:	f040 8088 	bne.w	8009980 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009872:	2200      	movs	r2, #0
 8009874:	623b      	str	r3, [r7, #32]
 8009876:	627a      	str	r2, [r7, #36]	@ 0x24
 8009878:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800987c:	f7fc fc52 	bl	8006124 <HAL_RCCEx_GetPeriphCLKFreq>
 8009880:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 80eb 	beq.w	8009a60 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800988a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988e:	4a3b      	ldr	r2, [pc, #236]	@ (800997c <UART_SetConfig+0x248>)
 8009890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009894:	461a      	mov	r2, r3
 8009896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009898:	fbb3 f3f2 	udiv	r3, r3, r2
 800989c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800989e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	4613      	mov	r3, r2
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	4413      	add	r3, r2
 80098a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d305      	bcc.n	80098ba <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d903      	bls.n	80098c2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80098c0:	e048      	b.n	8009954 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098c4:	2200      	movs	r2, #0
 80098c6:	61bb      	str	r3, [r7, #24]
 80098c8:	61fa      	str	r2, [r7, #28]
 80098ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ce:	4a2b      	ldr	r2, [pc, #172]	@ (800997c <UART_SetConfig+0x248>)
 80098d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2200      	movs	r2, #0
 80098d8:	613b      	str	r3, [r7, #16]
 80098da:	617a      	str	r2, [r7, #20]
 80098dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80098e4:	f7f6 fcd6 	bl	8000294 <__aeabi_uldivmod>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4610      	mov	r0, r2
 80098ee:	4619      	mov	r1, r3
 80098f0:	f04f 0200 	mov.w	r2, #0
 80098f4:	f04f 0300 	mov.w	r3, #0
 80098f8:	020b      	lsls	r3, r1, #8
 80098fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098fe:	0202      	lsls	r2, r0, #8
 8009900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009902:	6849      	ldr	r1, [r1, #4]
 8009904:	0849      	lsrs	r1, r1, #1
 8009906:	2000      	movs	r0, #0
 8009908:	460c      	mov	r4, r1
 800990a:	4605      	mov	r5, r0
 800990c:	eb12 0804 	adds.w	r8, r2, r4
 8009910:	eb43 0905 	adc.w	r9, r3, r5
 8009914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	60bb      	str	r3, [r7, #8]
 800991c:	60fa      	str	r2, [r7, #12]
 800991e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009922:	4640      	mov	r0, r8
 8009924:	4649      	mov	r1, r9
 8009926:	f7f6 fcb5 	bl	8000294 <__aeabi_uldivmod>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4613      	mov	r3, r2
 8009930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009938:	d308      	bcc.n	800994c <UART_SetConfig+0x218>
 800993a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800993c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009940:	d204      	bcs.n	800994c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009948:	60da      	str	r2, [r3, #12]
 800994a:	e003      	b.n	8009954 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009952:	e085      	b.n	8009a60 <UART_SetConfig+0x32c>
 8009954:	e084      	b.n	8009a60 <UART_SetConfig+0x32c>
 8009956:	bf00      	nop
 8009958:	44002400 	.word	0x44002400
 800995c:	cfff69f3 	.word	0xcfff69f3
 8009960:	54002400 	.word	0x54002400
 8009964:	40013800 	.word	0x40013800
 8009968:	40004400 	.word	0x40004400
 800996c:	40004800 	.word	0x40004800
 8009970:	40004c00 	.word	0x40004c00
 8009974:	40005000 	.word	0x40005000
 8009978:	40006400 	.word	0x40006400
 800997c:	0800a1b4 	.word	0x0800a1b4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009988:	d13c      	bne.n	8009a04 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800998a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800998c:	2200      	movs	r2, #0
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009996:	f7fc fbc5 	bl	8006124 <HAL_RCCEx_GetPeriphCLKFreq>
 800999a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800999c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d05e      	beq.n	8009a60 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a6:	4a39      	ldr	r2, [pc, #228]	@ (8009a8c <UART_SetConfig+0x358>)
 80099a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ac:	461a      	mov	r2, r3
 80099ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b4:	005a      	lsls	r2, r3, #1
 80099b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	441a      	add	r2, r3
 80099be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ca:	2b0f      	cmp	r3, #15
 80099cc:	d916      	bls.n	80099fc <UART_SetConfig+0x2c8>
 80099ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099d4:	d212      	bcs.n	80099fc <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f023 030f 	bic.w	r3, r3, #15
 80099de:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e2:	085b      	lsrs	r3, r3, #1
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80099ee:	4313      	orrs	r3, r2
 80099f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80099f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80099f8:	60da      	str	r2, [r3, #12]
 80099fa:	e031      	b.n	8009a60 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009a02:	e02d      	b.n	8009a60 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a06:	2200      	movs	r2, #0
 8009a08:	469a      	mov	sl, r3
 8009a0a:	4693      	mov	fp, r2
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	4659      	mov	r1, fp
 8009a10:	f7fc fb88 	bl	8006124 <HAL_RCCEx_GetPeriphCLKFreq>
 8009a14:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d021      	beq.n	8009a60 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a20:	4a1a      	ldr	r2, [pc, #104]	@ (8009a8c <UART_SetConfig+0x358>)
 8009a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a26:	461a      	mov	r2, r3
 8009a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	085b      	lsrs	r3, r3, #1
 8009a34:	441a      	add	r2, r3
 8009a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a42:	2b0f      	cmp	r3, #15
 8009a44:	d909      	bls.n	8009a5a <UART_SetConfig+0x326>
 8009a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a4c:	d205      	bcs.n	8009a5a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	60da      	str	r2, [r3, #12]
 8009a58:	e002      	b.n	8009a60 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a62:	2201      	movs	r2, #1
 8009a64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a72:	2200      	movs	r2, #0
 8009a74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a78:	2200      	movs	r2, #0
 8009a7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3750      	adds	r7, #80	@ 0x50
 8009a84:	46bd      	mov	sp, r7
 8009a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a8a:	bf00      	nop
 8009a8c:	0800a1b4 	.word	0x0800a1b4

08009a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9c:	f003 0308 	and.w	r3, r3, #8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00a      	beq.n	8009aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00a      	beq.n	8009adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00a      	beq.n	8009afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	430a      	orrs	r2, r1
 8009afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b02:	f003 0304 	and.w	r3, r3, #4
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b24:	f003 0310 	and.w	r3, r3, #16
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00a      	beq.n	8009b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b46:	f003 0320 	and.w	r3, r3, #32
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d01a      	beq.n	8009ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b8e:	d10a      	bne.n	8009ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	605a      	str	r2, [r3, #4]
  }
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b098      	sub	sp, #96	@ 0x60
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009be4:	f7f7 fc8a 	bl	80014fc <HAL_GetTick>
 8009be8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0308 	and.w	r3, r3, #8
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d12f      	bne.n	8009c58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c00:	2200      	movs	r2, #0
 8009c02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f88e 	bl	8009d28 <UART_WaitOnFlagUntilTimeout>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d022      	beq.n	8009c58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1a:	e853 3f00 	ldrex	r3, [r3]
 8009c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e6      	bne.n	8009c12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e063      	b.n	8009d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d149      	bne.n	8009cfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f857 	bl	8009d28 <UART_WaitOnFlagUntilTimeout>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d03c      	beq.n	8009cfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c88:	e853 3f00 	ldrex	r3, [r3]
 8009c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ca6:	e841 2300 	strex	r3, r2, [r1]
 8009caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1e6      	bne.n	8009c80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f023 0301 	bic.w	r3, r3, #1
 8009cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3308      	adds	r3, #8
 8009cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cd2:	61fa      	str	r2, [r7, #28]
 8009cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	69b9      	ldr	r1, [r7, #24]
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e5      	bne.n	8009cb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e012      	b.n	8009d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2220      	movs	r2, #32
 8009cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2220      	movs	r2, #32
 8009d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3758      	adds	r7, #88	@ 0x58
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	4613      	mov	r3, r2
 8009d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d38:	e04f      	b.n	8009dda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d40:	d04b      	beq.n	8009dda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d42:	f7f7 fbdb 	bl	80014fc <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d302      	bcc.n	8009d58 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e04e      	b.n	8009dfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d037      	beq.n	8009dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2b80      	cmp	r3, #128	@ 0x80
 8009d6e:	d034      	beq.n	8009dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b40      	cmp	r3, #64	@ 0x40
 8009d74:	d031      	beq.n	8009dda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d110      	bne.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2208      	movs	r2, #8
 8009d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 f838 	bl	8009e02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2208      	movs	r2, #8
 8009d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e029      	b.n	8009dfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009db4:	d111      	bne.n	8009dda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f81e 	bl	8009e02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e00f      	b.n	8009dfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	4013      	ands	r3, r2
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	bf0c      	ite	eq
 8009dea:	2301      	moveq	r3, #1
 8009dec:	2300      	movne	r3, #0
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	461a      	mov	r2, r3
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d0a0      	beq.n	8009d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b095      	sub	sp, #84	@ 0x54
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e12:	e853 3f00 	ldrex	r3, [r3]
 8009e16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	461a      	mov	r2, r3
 8009e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e30:	e841 2300 	strex	r3, r2, [r1]
 8009e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e6      	bne.n	8009e0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3308      	adds	r3, #8
 8009e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	e853 3f00 	ldrex	r3, [r3]
 8009e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e52:	f023 0301 	bic.w	r3, r3, #1
 8009e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e68:	e841 2300 	strex	r3, r2, [r1]
 8009e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1e3      	bne.n	8009e3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d118      	bne.n	8009eae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	e853 3f00 	ldrex	r3, [r3]
 8009e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f023 0310 	bic.w	r3, r3, #16
 8009e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e9a:	61bb      	str	r3, [r7, #24]
 8009e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6979      	ldr	r1, [r7, #20]
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e6      	bne.n	8009e7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ec2:	bf00      	nop
 8009ec4:	3754      	adds	r7, #84	@ 0x54
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <memset>:
 8009ece:	4402      	add	r2, r0
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d100      	bne.n	8009ed8 <memset+0xa>
 8009ed6:	4770      	bx	lr
 8009ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8009edc:	e7f9      	b.n	8009ed2 <memset+0x4>
	...

08009ee0 <__libc_init_array>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8009f18 <__libc_init_array+0x38>)
 8009ee4:	2600      	movs	r6, #0
 8009ee6:	4c0d      	ldr	r4, [pc, #52]	@ (8009f1c <__libc_init_array+0x3c>)
 8009ee8:	1b64      	subs	r4, r4, r5
 8009eea:	10a4      	asrs	r4, r4, #2
 8009eec:	42a6      	cmp	r6, r4
 8009eee:	d109      	bne.n	8009f04 <__libc_init_array+0x24>
 8009ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8009f20 <__libc_init_array+0x40>)
 8009ef2:	2600      	movs	r6, #0
 8009ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8009f24 <__libc_init_array+0x44>)
 8009ef6:	f000 f817 	bl	8009f28 <_init>
 8009efa:	1b64      	subs	r4, r4, r5
 8009efc:	10a4      	asrs	r4, r4, #2
 8009efe:	42a6      	cmp	r6, r4
 8009f00:	d105      	bne.n	8009f0e <__libc_init_array+0x2e>
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f08:	3601      	adds	r6, #1
 8009f0a:	4798      	blx	r3
 8009f0c:	e7ee      	b.n	8009eec <__libc_init_array+0xc>
 8009f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f12:	3601      	adds	r6, #1
 8009f14:	4798      	blx	r3
 8009f16:	e7f2      	b.n	8009efe <__libc_init_array+0x1e>
 8009f18:	0800a1d4 	.word	0x0800a1d4
 8009f1c:	0800a1d4 	.word	0x0800a1d4
 8009f20:	0800a1d4 	.word	0x0800a1d4
 8009f24:	0800a1d8 	.word	0x0800a1d8

08009f28 <_init>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr

08009f34 <_fini>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	bf00      	nop
 8009f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3a:	bc08      	pop	{r3}
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	4770      	bx	lr
